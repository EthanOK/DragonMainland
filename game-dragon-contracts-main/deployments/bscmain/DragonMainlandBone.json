{
  "address": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "minters",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddr",
          "type": "address"
        }
      ],
      "name": "Beneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newDmpFees",
          "type": "uint256[2]"
        }
      ],
      "name": "ChangeDmpFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "ChangeDmpToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newDmsFees",
          "type": "uint256[2]"
        }
      ],
      "name": "ChangeDmsFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "ChangeDmsToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newid",
          "type": "uint256"
        }
      ],
      "name": "Compound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        }
      ],
      "name": "CompoundAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLimit",
          "type": "uint256"
        }
      ],
      "name": "CompoundLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWeight",
          "type": "uint256"
        }
      ],
      "name": "CompoundWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "compound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dmpFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dmsFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setCompoundAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setCompoundLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "setCompoundWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_dmpFees",
          "type": "uint256[2]"
        }
      ],
      "name": "setDmpFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setDmpToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_dmsFees",
          "type": "uint256[2]"
        }
      ],
      "name": "setDmsFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setDmsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
  "receipt": {
    "to": null,
    "from": "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716",
    "contractAddress": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
    "transactionIndex": 1044,
    "gasUsed": "3411413",
    "logsBloom": "0x
    "blockHash": "0x211e42b576455738b4e1171e6dcb0fedc3668431f918b612c8f3efb2b8f7ac8b",
    "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
    "logs": [
      {
        "transactionIndex": 1044,
        "blockNumber": 13294994,
        "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
        "address": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 2182,
        "blockHash": "0x211e42b576455738b4e1171e6dcb0fedc3668431f918b612c8f3efb2b8f7ac8b"
      },
      {
        "transactionIndex": 1044,
        "blockNumber": 13294994,
        "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
        "address": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000e0c33cd3296ce1cdb3b102afdbac43d35016954e",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 2183,
        "blockHash": "0x211e42b576455738b4e1171e6dcb0fedc3668431f918b612c8f3efb2b8f7ac8b"
      },
      {
        "transactionIndex": 1044,
        "blockNumber": 13294994,
        "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
        "address": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 2184,
        "blockHash": "0x211e42b576455738b4e1171e6dcb0fedc3668431f918b612c8f3efb2b8f7ac8b"
      },
      {
        "transactionIndex": 1044,
        "blockNumber": 13294994,
        "transactionHash": "0x7466a51edf01aceae840858c3e385a57d5b333055853314b8ebbbe59b95ab5a8",
        "address": "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 2185,
        "blockHash": "0x211e42b576455738b4e1171e6dcb0fedc3668431f918b612c8f3efb2b8f7ac8b"
      }
    ],
    "blockNumber": 13294994,
    "cumulativeGasUsed": "82930555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xe0C33CD3296ce1cdb3b102afDbaC43d35016954e",
      "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716"
    ],
    [
      "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716"
    ]
  ],
  "solcInputHash": "74f5ccf9ff6601654c471cfaca5624f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"}],\"name\":\"Beneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newDmpFees\",\"type\":\"uint256[2]\"}],\"name\":\"ChangeDmpFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeDmpToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newDmsFees\",\"type\":\"uint256[2]\"}],\"name\":\"ChangeDmsFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeDmsToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newid\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"}],\"name\":\"CompoundAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"}],\"name\":\"CompoundLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"}],\"name\":\"CompoundWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dmsFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCompoundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setCompoundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"setCompoundWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_dmpFees\",\"type\":\"uint256[2]\"}],\"name\":\"setDmpFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDmpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_dmsFees\",\"type\":\"uint256[2]\"}],\"name\":\"setDmsFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDmsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"dragon mainland bone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonMainlandBone.sol\":\"DragonMainlandBone\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xedf8db444aa542739a0aabe8243a4e8100003aacba9783637a75f16bb556ab44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/DragonMainlandBone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// dragon mainland bone\\n// WATER 11 12 13\\n// FIRE 21 22 23\\n// ROCK 31 32 33\\n// STORM 41 42 43\\n// THUNDER 51 52 53\\ncontract DragonMainlandBone is\\n    ERC1155,\\n    AccessControl,\\n    Pausable,\\n    ERC1155Burnable,\\n    ReentrancyGuard\\n{\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    // change dmsToken event\\n    event ChangeDmsToken(address newAddress);\\n    // change dmpToken event\\n    event ChangeDmpToken(address newAddress);\\n    // beneficiary event\\n    event Beneficiary(address newAddr, address oldAddr);\\n    event ChangeDmsFees(uint256[2] newDmsFees);\\n    event ChangeDmpFees(uint256[2] newDmpFees);\\n    // compound event\\n    event Compound(\\n        address indexed account,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 newid\\n    );\\n    // compound limit\\n    event CompoundLimit(uint256 newLimit, uint256 oldLimit);\\n    // compound amount\\n    event CompoundAmount(uint256 newAmount, uint256 oldAmount);\\n    // compound weight\\n    event CompoundWeight(uint256 newWeight, uint256 oldWeight);\\n\\n    uint256 public compoundLimit = 3;\\n    uint256 public compoundAmount = 5;\\n    uint256 public compoundWeight = 50;\\n    // dms fees\\n    uint256[2] public dmsFees = [0.1 ether, 0.2 ether];\\n    // dmp fees\\n    uint256[2] public dmpFees = [50 ether, 100 ether];\\n    // token\\n    IERC20 public dmsToken = IERC20(0x9a26e6D24Df036B0b015016D1b55011c19E76C87);\\n    // DMP token\\n    IERC20 public dmpToken = IERC20(0x599107669322B0E72be939331f35A693ba71EBE2);\\n    // beneficiary address\\n    address public beneficiary = address(0x54C3Aaa72632E1CbE6D5eC4e6e4F2D148E438bea);\\n\\n    constructor(address[] memory owners, address[] memory minters)\\n        ERC1155(\\\"https://dragonmainland.io/storage/item/{id}.json\\\")\\n    {\\n        require(owners.length > 0, \\\"invalid owners\\\");\\n        require(minters.length > 0, \\\"invalid minters\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            _setupRole(OWNER_ROLE, owners[i]);\\n        }\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            _setupRole(MINTER_ROLE, minters[i]);\\n        }\\n    }\\n\\n    modifier checkAddr(address _address) {\\n        require(_address != address(0), \\\"address is zero\\\");\\n        _;\\n    }\\n\\n    function setURI(string memory newuri) external onlyRole(OWNER_ROLE) {\\n        _setURI(newuri);\\n    }\\n\\n    // set DMS token address\\n    function setDmsToken(address _address)\\n        external\\n        onlyRole(OWNER_ROLE)\\n        checkAddr(_address)\\n    {\\n        emit ChangeDmsToken(_address);\\n        dmsToken = IERC20(_address);\\n    }\\n\\n    // set DMP token address\\n    function setDmpToken(address _address)\\n        external\\n        onlyRole(OWNER_ROLE)\\n        checkAddr(_address)\\n    {\\n        emit ChangeDmpToken(_address);\\n        dmpToken = IERC20(_address);\\n    }\\n\\n    // set beneficiary address\\n    function setBeneficiary(address _address)\\n        external\\n        onlyRole(OWNER_ROLE)\\n        checkAddr(_address)\\n    {\\n        emit Beneficiary(_address, beneficiary);\\n        beneficiary = _address;\\n    }\\n\\n    // set DMS amount\\n    function setDmsFees(uint256[2] calldata _dmsFees)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        dmsFees = _dmsFees;\\n        emit ChangeDmsFees(_dmsFees);\\n    }\\n\\n    // set DMP amount\\n    function setDmpFees(uint256[2] calldata _dmpFees)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        dmpFees = _dmpFees;\\n        emit ChangeDmpFees(_dmpFees);\\n    }\\n\\n    function pause() external onlyRole(OWNER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(OWNER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external whenNotPaused onlyRole(MINTER_ROLE) nonReentrant {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external whenNotPaused onlyRole(MINTER_ROLE) nonReentrant {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    // set compound limit\\n    function setCompoundLimit(uint256 _limit) external onlyRole(OWNER_ROLE) {\\n        require(_limit > 0, \\\"invalid compound limit\\\");\\n        emit CompoundLimit(_limit, compoundLimit);\\n        compoundLimit = _limit;\\n    }\\n\\n    // set compound amount\\n    function setCompoundAmount(uint256 _amount) external onlyRole(OWNER_ROLE) {\\n        require(_amount > 0, \\\"invalid compound amount\\\");\\n        emit CompoundAmount(_amount, compoundAmount);\\n        compoundAmount = _amount;\\n    }\\n\\n    // set compound weight\\n    function setCompoundWeight(uint256 _weight) external onlyRole(OWNER_ROLE) {\\n        require(_weight > 0, \\\"invalid compound weight\\\");\\n        emit CompoundWeight(_weight, compoundWeight);\\n        compoundWeight = _weight;\\n    }\\n\\n    function _random() internal view returns (uint256) {\\n        uint256 rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number),\\n                    block.coinbase,\\n                    msg.sender\\n                )\\n            )\\n        );\\n        return rand % 100 < compoundWeight ? 0 : 1;\\n    }\\n\\n    // compound dragon bone\\n    // 50%=0 50%=1\\n    function compound(uint256 _id, uint256 _amount)\\n        external\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        require(_amount == compoundAmount, \\\"invalid compound amount\\\");\\n        uint256 _currLevel = _id % 10;\\n        require(_currLevel < compoundLimit, \\\"invalid compound limit\\\");\\n        require(balanceOf(msg.sender, _id) >= _amount, \\\"balance is not enough\\\");\\n        // dms dmp transfer\\n        uint256 _dmsFee = dmsFees[_currLevel - 1];\\n        uint256 _dmpFee = dmpFees[_currLevel - 1];\\n        require(\\n            dmsToken.balanceOf(msg.sender) >= _dmsFee,\\n            \\\"DMS balance not enough\\\"\\n        );\\n        require(\\n            dmpToken.balanceOf(msg.sender) >= _dmpFee,\\n            \\\"DMP balance not enough\\\"\\n        );\\n        require(\\n            dmsToken.transferFrom(msg.sender, beneficiary, _dmsFee),\\n            \\\"dms transfer failure\\\"\\n        );\\n        require(\\n            dmpToken.transferFrom(msg.sender, beneficiary, _dmpFee),\\n            \\\"dmp transfer failure\\\"\\n        );\\n        _burn(msg.sender, _id, _amount);\\n        uint256 newid = _id + _random();\\n        _mint(msg.sender, newid, 1, \\\"\\\");\\n        emit Compound(msg.sender, _id, _amount, newid);\\n        return newid;\\n    }\\n}\\n\",\"keccak256\":\"0x6f243a972f9adc1c68de4ee50c1b214c6c3a85165be4572494156fdec4c2a8e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60036006556005600755603260085560c060405267016345785d8a000060809081526702c68af0bb14000060a0526200003d9060099060026200038a565b50604080518082019091526802b5e3af16b1880000815268056bc75e2d6310000060208201526200007390600b906002620003d8565b50600d80546001600160a01b0319908116739a26e6d24df036b0b015016d1b55011c19e76c8717909155600e8054821673599107669322b0e72be939331f35a693ba71ebe2179055600f80549091167354c3aaa72632e1cbe6d5ec4e6e4f2d148e438bea179055348015620000e757600080fd5b5060405162003be038038062003be08339810160408190526200010a9162000574565b60405180606001604052806030815260200162003bb0603091396200012f81620002c4565b506004805460ff1916905560016005558151620001845760405162461bcd60e51b815260206004820152600e60248201526d696e76616c6964206f776e65727360901b60448201526064015b60405180910390fd5b6000815111620001c95760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206d696e7465727360881b60448201526064016200017b565b620001d6600033620002dd565b60005b825181101562000252576200023d7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8483815181106200022957634e487b7160e01b600052603260045260246000fd5b6020026020010151620002dd60201b60201c565b80620002498162000618565b915050620001d9565b5060005b8151811015620002bb57620002a67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68383815181106200022957634e487b7160e01b600052603260045260246000fd5b80620002b28162000618565b91505062000256565b50505062000656565b8051620002d990600290602084019062000414565b5050565b60008281526003602090815260408083206001600160a01b0385168452909152902054620002d9908390839060ff16620002d95760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003463390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8260028101928215620003c6579160200282015b82811115620003c657825182906001600160401b03169055916020019190600101906200039e565b50620003d492915062000491565b5090565b8260028101928215620003c6579160200282015b82811115620003c657825182906001600160481b0316905591602001919060010190620003ec565b8280546200042290620005db565b90600052602060002090601f016020900481019282620004465760008555620003c6565b82601f106200046157805160ff1916838001178555620003c6565b82800160010185558215620003c6579182015b82811115620003c657825182559160200191906001019062000474565b5b80821115620003d4576000815560010162000492565b80516001600160a01b0381168114620004c057600080fd5b919050565b600082601f830112620004d6578081fd5b815160206001600160401b0380831115620004f557620004f562000640565b818302604051601f19603f830116810181811084821117156200051c576200051c62000640565b604052848152838101925086840182880185018910156200053b578687fd5b8692505b8583101562000568576200055381620004a8565b8452928401926001929092019184016200053f565b50979650505050505050565b6000806040838503121562000587578182fd5b82516001600160401b03808211156200059e578384fd5b620005ac86838701620004c5565b93506020850151915080821115620005c2578283fd5b50620005d185828601620004c5565b9150509250929050565b600281046001821680620005f057607f821691505b602082108114156200061257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200063957634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b61354a80620006666000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80636b20c45411610146578063a79ee2aa116100c3578063d539139311610087578063d53913931461050d578063d547741f14610534578063e58378bb14610547578063e985e9c51461055c578063f242432a14610598578063f5298aca146105ab57610252565b8063a79ee2aa146104b8578063a7e0a342146104cb578063acb5fc82146104d4578063ba0dd0bc146104e7578063bff1208d146104fa57610252565b8063903ac6551161010a578063903ac6551461046457806391d148541461047757806394079e431461048a578063a217fddf1461049d578063a22cb465146104a557610252565b80636b20c45414610410578063721e715414610423578063731133e91461043657806373c53a65146104495780638456cb591461045c57610252565b806336568abe116101d45780634976eab0116101985780634976eab0146103b95780634e1273f4146103cc57806354a3282b146103ec5780635ae12f62146103f55780635c975abb1461040857610252565b806336568abe1461035757806338af3eed1461036a5780633f4ba83a1461039557806344aecf581461039d57806348dcb051146103b057610252565b80631f7fdffa1161021b5780631f7fdffa146102e8578063248a9ca3146102fb5780632eb2c2d61461031e5780632ee131c8146103315780632f2ff15d1461034457610252565b8062fdd58e1461025757806301ffc9a71461027d57806302fe5305146102a05780630e89341c146102b55780631c31f710146102d5575b600080fd5b61026a610265366004612b91565b6105be565b6040519081526020015b60405180910390f35b61029061028b366004612d82565b610655565b6040519015158152602001610274565b6102b36102ae366004612dba565b610668565b005b6102c86102c3366004612d48565b61068f565b6040516102749190613012565b6102b36102e3366004612904565b610723565b6102b36102f6366004612ac7565b6107ce565b61026a610309366004612d48565b60009081526003602052604090206001015490565b6102b361032c366004612950565b61088e565b6102b361033f366004612d48565b610925565b6102b3610352366004612d60565b6109cb565b6102b3610365366004612d60565b6109f6565b600f5461037d906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b6102b3610a70565b6102b36103ab366004612904565b610a94565b61026a60075481565b6102b36103c7366004612d48565b610b34565b6103df6103da366004612c3e565b610be0565b6040516102749190612fd1565b61026a60085481565b6102b3610403366004612d48565b610d41565b610290610de6565b6102b361041e366004612a57565b610df0565b600e5461037d906001600160a01b031681565b6102b3610444366004612bec565b610e33565b6102b3610457366004612d06565b610ee7565b6102b3610f49565b600d5461037d906001600160a01b031681565b610290610485366004612d60565b610f6a565b6102b3610498366004612d06565b610f95565b61026a600081565b6102b36104b3366004612b5b565b610feb565b61026a6104c6366004612d48565b6110cf565b61026a60065481565b61026a6104e2366004612d48565b6110e6565b6102b36104f5366004612904565b6110f6565b61026a610508366004612e1f565b611196565b61026a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102b3610542366004612d60565b6116c7565b61026a6000805160206134f583398151915281565b61029061056a36600461291e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b36105a63660046129f5565b6116ed565b6102b36105b9366004612bba565b611732565b60006001600160a01b03831661062f5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061066082611775565b90505b919050565b6000805160206134f583398151915261068281335b61179a565b61068b826117fe565b5050565b60606002805461069e90613360565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca90613360565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b50505050509050919050565b6000805160206134f583398151915261073c813361067d565b816001600160a01b0381166107635760405162461bcd60e51b8152600401610626906130fa565b600f54604080516001600160a01b03808716825290921660208301527fa53f46c2d8904587af08d22434cd0eb26203e77d74e524f8f78bb6c86e3c9800910160405180910390a15050600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6107d6610de6565b156107f35760405162461bcd60e51b815260040161062690613123565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661081e813361067d565b600260055414156108715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610626565b600260055561088285858585611811565b50506001600555505050565b6001600160a01b0385163314806108aa57506108aa853361056a565b6109115760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610626565b61091e8585858585611987565b5050505050565b6000805160206134f583398151915261093e813361067d565b600082116109885760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a590818dbdb5c1bdd5b9908185b5bdd5b9d604a1b6044820152606401610626565b6007546040805184815260208101929092527f9f4f406992584a1ae8643f456a1c898b814c71c5525c263d24cc516d5d6ef799910160405180910390a150600755565b6000828152600360205260409020600101546109e7813361067d565b6109f18383611b4d565b505050565b6001600160a01b0381163314610a665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610626565b61068b8282611bd3565b6000805160206134f5833981519152610a89813361067d565b610a91611c3a565b50565b6000805160206134f5833981519152610aad813361067d565b816001600160a01b038116610ad45760405162461bcd60e51b8152600401610626906130fa565b6040516001600160a01b03841681527ff61d12f5c5e9ed8d53cda5c0c70a4bc7e526585cda6454e1f64eec759b4d7ba39060200160405180910390a15050600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206134f5833981519152610b4d813361067d565b60008211610b9d5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d706f756e64207765696768740000000000000000006044820152606401610626565b6008546040805184815260208101929092527fc13faa9843010ad5a76f1eafe4d9dad09a97edacf2b5b2168403913e7184df86910160405180910390a150600855565b60608151835114610c455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610626565b600083516001600160401b03811115610c6e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c97578160200160208202803683370190505b50905060005b8451811015610d3957610cfe858281518110610cc957634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610cf157634e487b7160e01b600052603260045260246000fd5b60200260200101516105be565b828281518110610d1e57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d32816133c1565b9050610c9d565b509392505050565b6000805160206134f5833981519152610d5a813361067d565b60008211610da35760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a590818dbdb5c1bdd5b99081b1a5b5a5d60521b6044820152606401610626565b6006546040805184815260208101929092527f77e784aae0d81c48ad8db70ddca45ecc59afe92c5372f1e73834e3adcdd13c6d910160405180910390a150600655565b60045460ff165b90565b6001600160a01b038316331480610e0c5750610e0c833361056a565b610e285760405162461bcd60e51b8152600401610626906130b1565b6109f1838383611ccf565b610e3b610de6565b15610e585760405162461bcd60e51b815260040161062690613123565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e83813361067d565b60026005541415610ed65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610626565b600260055561088285858585611e79565b6000805160206134f5833981519152610f00813361067d565b610f0d6009836002612738565b507f01661dc8725f38d6cc480a37f496d2b6a15fac01356540120c7e783cf89962b082604051610f3d9190612fbe565b60405180910390a15050565b6000805160206134f5833981519152610f62813361067d565b610a91611f4f565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206134f5833981519152610fae813361067d565b610fbb600b836002612738565b507f1c18a072a246c55f6e6edd7e913d2dee32396e01ac033670b355db35c463234982604051610f3d9190612fbe565b336001600160a01b03831614156110565760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610626565b3360008181526001602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110c3911515815260200190565b60405180910390a35050565b600b81600281106110df57600080fd5b0154905081565b600981600281106110df57600080fd5b6000805160206134f583398151915261110f813361067d565b816001600160a01b0381166111365760405162461bcd60e51b8152600401610626906130fa565b6040516001600160a01b03841681527fc1cdff2e64504e7c96c2ea5eb2f145cdb913301ec18445c430ec3ab576bfce7f9060200160405180910390a15050600d80546001600160a01b0319166001600160a01b0392909216919091179055565b60006111a0610de6565b156111bd5760405162461bcd60e51b815260040161062690613123565b60075482146112085760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a590818dbdb5c1bdd5b9908185b5bdd5b9d604a1b6044820152606401610626565b6000611215600a856133dc565b905060065481106112615760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a590818dbdb5c1bdd5b99081b1a5b5a5d60521b6044820152606401610626565b8261126c33866105be565b10156112b25760405162461bcd60e51b81526020600482015260156024820152740c4c2d8c2dcc6ca40d2e640dcdee840cadcdeeaced605b1b6044820152606401610626565b600060096112c1600184613302565b600281106112df57634e487b7160e01b600052603260045260246000fd5b015490506000600b6112f2600185613302565b6002811061131057634e487b7160e01b600052603260045260246000fd5b0154600d546040516370a0823160e01b815233600482015291925083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561135a57600080fd5b505afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113929190612e07565b10156113d95760405162461bcd60e51b81526020600482015260166024820152750889aa640c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b6044820152606401610626565b600e546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190612e07565b101561149b5760405162461bcd60e51b81526020600482015260166024820152750889aa040c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b6044820152606401610626565b600d54600f546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd90606401602060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115299190612d2c565b61156c5760405162461bcd60e51b8152602060048201526014602482015273646d73207472616e73666572206661696c75726560601b6044820152606401610626565b600e54600f546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa9190612d2c565b61163d5760405162461bcd60e51b8152602060048201526014602482015273646d70207472616e73666572206661696c75726560601b6044820152606401610626565b611648338787611fa9565b60006116526120aa565b61165c90886132cb565b905061167a3382600160405180602001604052806000815250611e79565b604080518881526020810188905290810182905233907f1c349721eed47ef3e6aede3963c2597161fbd9d7be47bd891a7ecf27780b804c9060600160405180910390a29695505050505050565b6000828152600360205260409020600101546116e3813361067d565b6109f18383611bd3565b6001600160a01b0385163314806117095750611709853361056a565b6117255760405162461bcd60e51b8152600401610626906130b1565b61091e858585858561212b565b6001600160a01b03831633148061174e575061174e833361056a565b61176a5760405162461bcd60e51b8152600401610626906130b1565b6109f1838383611fa9565b60006001600160e01b03198216637965db0b60e01b1480610660575061066082612248565b6117a48282610f6a565b61068b576117bc816001600160a01b03166014612298565b6117c7836020612298565b6040516020016117d8929190612ea6565b60408051601f198184030181529082905262461bcd60e51b825261062691600401613012565b805161068b906002906020840190612776565b6001600160a01b0384166118375760405162461bcd60e51b815260040161062690613267565b81518351146118585760405162461bcd60e51b81526004016106269061321f565b3361186881600087878787612480565b60005b845181101561191f5783818151811061189457634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106118bf57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461190791906132cb565b90915550819050611917816133c1565b91505061186b565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611970929190612fe4565b60405180910390a461091e816000878787876124aa565b81518351146119a85760405162461bcd60e51b81526004016106269061321f565b6001600160a01b0384166119ce5760405162461bcd60e51b81526004016106269061314d565b336119dd818787878787612480565b60005b8451811015611adf576000858281518110611a0b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611a3757634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a875760405162461bcd60e51b8152600401610626906131d5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ac49084906132cb565b9250508190555050505080611ad8906133c1565b90506119e0565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2f929190612fe4565b60405180910390a4611b458187878787876124aa565b505050505050565b611b578282610f6a565b61068b5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bdd8282610f6a565b1561068b5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611c42610de6565b611c855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610626565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611cf55760405162461bcd60e51b815260040161062690613192565b8051825114611d165760405162461bcd60e51b81526004016106269061321f565b6000339050611d3981856000868660405180602001604052806000815250612480565b60005b8351811015611e1a576000848281518110611d6757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611d9357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015611de35760405162461bcd60e51b81526004016106269061306d565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580611e12816133c1565b915050611d3c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611e6b929190612fe4565b60405180910390a450505050565b6001600160a01b038416611e9f5760405162461bcd60e51b815260040161062690613267565b33611ebf81600087611eb088612615565b611eb988612615565b87612480565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611eef9084906132cb565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461091e8160008787878761266e565b611f57610de6565b15611f745760405162461bcd60e51b815260040161062690613123565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cb23390565b6001600160a01b038316611fcf5760405162461bcd60e51b815260040161062690613192565b33611ffe81856000611fe087612615565b611fe987612615565b60405180602001604052806000815250612480565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561203f5760405162461bcd60e51b81526004016106269061306d565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040805142602080830191909152448284015243406060808401919091526bffffffffffffffffffffffff1941821b811660808501523390911b1660948301528251808303608801815260a89092019092528051910120600854600091906121136064836133dc565b1061211f576001612122565b60005b60ff1691505090565b6001600160a01b0384166121515760405162461bcd60e51b81526004016106269061314d565b33612161818787611eb088612615565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156121a25760405162461bcd60e51b8152600401610626906131d5565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121df9084906132cb565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461223f82888888888861266e565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061227957506001600160e01b031982166303a24d0760e21b145b8061066057506301ffc9a760e01b6001600160e01b0319831614610660565b606060006122a78360026132e3565b6122b29060026132cb565b6001600160401b038111156122d757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612301576020820181803683370190505b509050600360fc1b8160008151811061232a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061236757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061238b8460026132e3565b6123969060016132cb565b90505b600181111561242a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123d857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106123fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361242381613349565b9050612399565b5083156124795760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610626565b9392505050565b612488610de6565b156124a55760405162461bcd60e51b815260040161062690613123565b611b45565b6001600160a01b0384163b15611b455760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ee9089908990889088908890600401612f1b565b602060405180830381600087803b15801561250857600080fd5b505af1925050508015612538575060408051601f3d908101601f1916820190925261253591810190612d9e565b60015b6125e557612544613428565b806308c379a0141561257e575061255961343f565b806125645750612580565b8060405162461bcd60e51b81526004016106269190613012565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610626565b6001600160e01b0319811663bc197c8160e01b1461223f5760405162461bcd60e51b815260040161062690613025565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061265d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611b455760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906126b29089908990889088908890600401612f79565b602060405180830381600087803b1580156126cc57600080fd5b505af19250505080156126fc575060408051601f3d908101601f191682019092526126f991810190612d9e565b60015b61270857612544613428565b6001600160e01b0319811663f23a6e6160e01b1461223f5760405162461bcd60e51b815260040161062690613025565b8260028101928215612766579160200282015b8281111561276657823582559160200191906001019061274b565b506127729291506127ea565b5090565b82805461278290613360565b90600052602060002090601f0160209004810192826127a45760008555612766565b82601f106127bd57805160ff1916838001178555612766565b82800160010185558215612766579182015b828111156127665782518255916020019190600101906127cf565b5b8082111561277257600081556001016127eb565b60006001600160401b0383111561281857612818613412565b60405161282f601f8501601f191660200182613395565b80915083815284848401111561284457600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461066357600080fd5b600082601f830112612883578081fd5b81356020612890826132a8565b60405161289d8282613395565b8381528281019150858301838502870184018810156128ba578586fd5b855b858110156128d8578135845292840192908401906001016128bc565b5090979650505050505050565b600082601f8301126128f5578081fd5b612479838335602085016127ff565b600060208284031215612915578081fd5b6124798261285c565b60008060408385031215612930578081fd5b6129398361285c565b91506129476020840161285c565b90509250929050565b600080600080600060a08688031215612967578081fd5b6129708661285c565b945061297e6020870161285c565b935060408601356001600160401b0380821115612999578283fd5b6129a589838a01612873565b945060608801359150808211156129ba578283fd5b6129c689838a01612873565b935060808801359150808211156129db578283fd5b506129e8888289016128e5565b9150509295509295909350565b600080600080600060a08688031215612a0c578081fd5b612a158661285c565b9450612a236020870161285c565b9350604086013592506060860135915060808601356001600160401b03811115612a4b578182fd5b6129e8888289016128e5565b600080600060608486031215612a6b578283fd5b612a748461285c565b925060208401356001600160401b0380821115612a8f578384fd5b612a9b87838801612873565b93506040860135915080821115612ab0578283fd5b50612abd86828701612873565b9150509250925092565b60008060008060808587031215612adc578081fd5b612ae58561285c565b935060208501356001600160401b0380821115612b00578283fd5b612b0c88838901612873565b94506040870135915080821115612b21578283fd5b612b2d88838901612873565b93506060870135915080821115612b42578283fd5b50612b4f878288016128e5565b91505092959194509250565b60008060408385031215612b6d578182fd5b612b768361285c565b91506020830135612b86816134d0565b809150509250929050565b60008060408385031215612ba3578182fd5b612bac8361285c565b946020939093013593505050565b600080600060608486031215612bce578081fd5b612bd78461285c565b95602085013595506040909401359392505050565b60008060008060808587031215612c01578182fd5b612c0a8561285c565b9350602085013592506040850135915060608501356001600160401b03811115612c32578182fd5b612b4f878288016128e5565b60008060408385031215612c50578182fd5b82356001600160401b0380821115612c66578384fd5b818501915085601f830112612c79578384fd5b81356020612c86826132a8565b604051612c938282613395565b8381528281019150858301838502870184018b1015612cb0578889fd5b8896505b84871015612cd957612cc58161285c565b835260019690960195918301918301612cb4565b5096505086013592505080821115612cef578283fd5b50612cfc85828601612873565b9150509250929050565b600060408284031215612d17578081fd5b82604083011115612d26578081fd5b50919050565b600060208284031215612d3d578081fd5b8151612479816134d0565b600060208284031215612d59578081fd5b5035919050565b60008060408385031215612d72578182fd5b823591506129476020840161285c565b600060208284031215612d93578081fd5b8135612479816134de565b600060208284031215612daf578081fd5b8151612479816134de565b600060208284031215612dcb578081fd5b81356001600160401b03811115612de0578182fd5b8201601f81018413612df0578182fd5b612dff848235602084016127ff565b949350505050565b600060208284031215612e18578081fd5b5051919050565b60008060408385031215612e31578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612e6f57815187529582019590820190600101612e53565b509495945050505050565b60008151808452612e92816020860160208601613319565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612ede816017850160208801613319565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f0f816028840160208801613319565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612f4790830186612e40565b8281036060840152612f598186612e40565b90508281036080840152612f6d8185612e7a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612fb390830184612e7a565b979650505050505050565b6040818101908383376000815292915050565b6000602082526124796020830184612e40565b600060408252612ff76040830185612e40565b82810360208401526130098185612e40565b95945050505050565b6000602082526124796020830184612e7a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b038211156132c1576132c1613412565b5060209081020190565b600082198211156132de576132de6133fc565b500190565b60008160001904831182151516156132fd576132fd6133fc565b500290565b600082821015613314576133146133fc565b500390565b60005b8381101561333457818101518382015260200161331c565b83811115613343576000848401525b50505050565b600081613358576133586133fc565b506000190190565b60028104600182168061337457607f821691505b60208210811415612d2657634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156133ba576133ba613412565b6040525050565b60006000198214156133d5576133d56133fc565b5060010190565b6000826133f757634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610ded57600481823e5160e01c90565b600060443d101561344f57610ded565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613480575050505050610ded565b828501915081518181111561349a57505050505050610ded565b843d87010160208285010111156134b657505050505050610ded565b6134c560208286010187613395565b509094505050505090565b8015158114610a9157600080fd5b6001600160e01b031981168114610a9157600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220eeaea349f4e2a5c2daaf1f86789604df79f28b5a1e2095ae87a4d139cab753cc64736f6c6343000802003368747470733a2f2f647261676f6e6d61696e6c616e642e696f2f73746f726167652f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c80636b20c45411610146578063a79ee2aa116100c3578063d539139311610087578063d53913931461050d578063d547741f14610534578063e58378bb14610547578063e985e9c51461055c578063f242432a14610598578063f5298aca146105ab57610252565b8063a79ee2aa146104b8578063a7e0a342146104cb578063acb5fc82146104d4578063ba0dd0bc146104e7578063bff1208d146104fa57610252565b8063903ac6551161010a578063903ac6551461046457806391d148541461047757806394079e431461048a578063a217fddf1461049d578063a22cb465146104a557610252565b80636b20c45414610410578063721e715414610423578063731133e91461043657806373c53a65146104495780638456cb591461045c57610252565b806336568abe116101d45780634976eab0116101985780634976eab0146103b95780634e1273f4146103cc57806354a3282b146103ec5780635ae12f62146103f55780635c975abb1461040857610252565b806336568abe1461035757806338af3eed1461036a5780633f4ba83a1461039557806344aecf581461039d57806348dcb051146103b057610252565b80631f7fdffa1161021b5780631f7fdffa146102e8578063248a9ca3146102fb5780632eb2c2d61461031e5780632ee131c8146103315780632f2ff15d1461034457610252565b8062fdd58e1461025757806301ffc9a71461027d57806302fe5305146102a05780630e89341c146102b55780631c31f710146102d5575b600080fd5b61026a610265366004612b91565b6105be565b6040519081526020015b60405180910390f35b61029061028b366004612d82565b610655565b6040519015158152602001610274565b6102b36102ae366004612dba565b610668565b005b6102c86102c3366004612d48565b61068f565b6040516102749190613012565b6102b36102e3366004612904565b610723565b6102b36102f6366004612ac7565b6107ce565b61026a610309366004612d48565b60009081526003602052604090206001015490565b6102b361032c366004612950565b61088e565b6102b361033f366004612d48565b610925565b6102b3610352366004612d60565b6109cb565b6102b3610365366004612d60565b6109f6565b600f5461037d906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b6102b3610a70565b6102b36103ab366004612904565b610a94565b61026a60075481565b6102b36103c7366004612d48565b610b34565b6103df6103da366004612c3e565b610be0565b6040516102749190612fd1565b61026a60085481565b6102b3610403366004612d48565b610d41565b610290610de6565b6102b361041e366004612a57565b610df0565b600e5461037d906001600160a01b031681565b6102b3610444366004612bec565b610e33565b6102b3610457366004612d06565b610ee7565b6102b3610f49565b600d5461037d906001600160a01b031681565b610290610485366004612d60565b610f6a565b6102b3610498366004612d06565b610f95565b61026a600081565b6102b36104b3366004612b5b565b610feb565b61026a6104c6366004612d48565b6110cf565b61026a60065481565b61026a6104e2366004612d48565b6110e6565b6102b36104f5366004612904565b6110f6565b61026a610508366004612e1f565b611196565b61026a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102b3610542366004612d60565b6116c7565b61026a6000805160206134f583398151915281565b61029061056a36600461291e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102b36105a63660046129f5565b6116ed565b6102b36105b9366004612bba565b611732565b60006001600160a01b03831661062f5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061066082611775565b90505b919050565b6000805160206134f583398151915261068281335b61179a565b61068b826117fe565b5050565b60606002805461069e90613360565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca90613360565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b50505050509050919050565b6000805160206134f583398151915261073c813361067d565b816001600160a01b0381166107635760405162461bcd60e51b8152600401610626906130fa565b600f54604080516001600160a01b03808716825290921660208301527fa53f46c2d8904587af08d22434cd0eb26203e77d74e524f8f78bb6c86e3c9800910160405180910390a15050600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6107d6610de6565b156107f35760405162461bcd60e51b815260040161062690613123565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661081e813361067d565b600260055414156108715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610626565b600260055561088285858585611811565b50506001600555505050565b6001600160a01b0385163314806108aa57506108aa853361056a565b6109115760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610626565b61091e8585858585611987565b5050505050565b6000805160206134f583398151915261093e813361067d565b600082116109885760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a590818dbdb5c1bdd5b9908185b5bdd5b9d604a1b6044820152606401610626565b6007546040805184815260208101929092527f9f4f406992584a1ae8643f456a1c898b814c71c5525c263d24cc516d5d6ef799910160405180910390a150600755565b6000828152600360205260409020600101546109e7813361067d565b6109f18383611b4d565b505050565b6001600160a01b0381163314610a665760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610626565b61068b8282611bd3565b6000805160206134f5833981519152610a89813361067d565b610a91611c3a565b50565b6000805160206134f5833981519152610aad813361067d565b816001600160a01b038116610ad45760405162461bcd60e51b8152600401610626906130fa565b6040516001600160a01b03841681527ff61d12f5c5e9ed8d53cda5c0c70a4bc7e526585cda6454e1f64eec759b4d7ba39060200160405180910390a15050600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206134f5833981519152610b4d813361067d565b60008211610b9d5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d706f756e64207765696768740000000000000000006044820152606401610626565b6008546040805184815260208101929092527fc13faa9843010ad5a76f1eafe4d9dad09a97edacf2b5b2168403913e7184df86910160405180910390a150600855565b60608151835114610c455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610626565b600083516001600160401b03811115610c6e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c97578160200160208202803683370190505b50905060005b8451811015610d3957610cfe858281518110610cc957634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610cf157634e487b7160e01b600052603260045260246000fd5b60200260200101516105be565b828281518110610d1e57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d32816133c1565b9050610c9d565b509392505050565b6000805160206134f5833981519152610d5a813361067d565b60008211610da35760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a590818dbdb5c1bdd5b99081b1a5b5a5d60521b6044820152606401610626565b6006546040805184815260208101929092527f77e784aae0d81c48ad8db70ddca45ecc59afe92c5372f1e73834e3adcdd13c6d910160405180910390a150600655565b60045460ff165b90565b6001600160a01b038316331480610e0c5750610e0c833361056a565b610e285760405162461bcd60e51b8152600401610626906130b1565b6109f1838383611ccf565b610e3b610de6565b15610e585760405162461bcd60e51b815260040161062690613123565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e83813361067d565b60026005541415610ed65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610626565b600260055561088285858585611e79565b6000805160206134f5833981519152610f00813361067d565b610f0d6009836002612738565b507f01661dc8725f38d6cc480a37f496d2b6a15fac01356540120c7e783cf89962b082604051610f3d9190612fbe565b60405180910390a15050565b6000805160206134f5833981519152610f62813361067d565b610a91611f4f565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206134f5833981519152610fae813361067d565b610fbb600b836002612738565b507f1c18a072a246c55f6e6edd7e913d2dee32396e01ac033670b355db35c463234982604051610f3d9190612fbe565b336001600160a01b03831614156110565760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610626565b3360008181526001602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110c3911515815260200190565b60405180910390a35050565b600b81600281106110df57600080fd5b0154905081565b600981600281106110df57600080fd5b6000805160206134f583398151915261110f813361067d565b816001600160a01b0381166111365760405162461bcd60e51b8152600401610626906130fa565b6040516001600160a01b03841681527fc1cdff2e64504e7c96c2ea5eb2f145cdb913301ec18445c430ec3ab576bfce7f9060200160405180910390a15050600d80546001600160a01b0319166001600160a01b0392909216919091179055565b60006111a0610de6565b156111bd5760405162461bcd60e51b815260040161062690613123565b60075482146112085760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a590818dbdb5c1bdd5b9908185b5bdd5b9d604a1b6044820152606401610626565b6000611215600a856133dc565b905060065481106112615760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a590818dbdb5c1bdd5b99081b1a5b5a5d60521b6044820152606401610626565b8261126c33866105be565b10156112b25760405162461bcd60e51b81526020600482015260156024820152740c4c2d8c2dcc6ca40d2e640dcdee840cadcdeeaced605b1b6044820152606401610626565b600060096112c1600184613302565b600281106112df57634e487b7160e01b600052603260045260246000fd5b015490506000600b6112f2600185613302565b6002811061131057634e487b7160e01b600052603260045260246000fd5b0154600d546040516370a0823160e01b815233600482015291925083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561135a57600080fd5b505afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113929190612e07565b10156113d95760405162461bcd60e51b81526020600482015260166024820152750889aa640c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b6044820152606401610626565b600e546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190612e07565b101561149b5760405162461bcd60e51b81526020600482015260166024820152750889aa040c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b6044820152606401610626565b600d54600f546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd90606401602060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115299190612d2c565b61156c5760405162461bcd60e51b8152602060048201526014602482015273646d73207472616e73666572206661696c75726560601b6044820152606401610626565b600e54600f546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa9190612d2c565b61163d5760405162461bcd60e51b8152602060048201526014602482015273646d70207472616e73666572206661696c75726560601b6044820152606401610626565b611648338787611fa9565b60006116526120aa565b61165c90886132cb565b905061167a3382600160405180602001604052806000815250611e79565b604080518881526020810188905290810182905233907f1c349721eed47ef3e6aede3963c2597161fbd9d7be47bd891a7ecf27780b804c9060600160405180910390a29695505050505050565b6000828152600360205260409020600101546116e3813361067d565b6109f18383611bd3565b6001600160a01b0385163314806117095750611709853361056a565b6117255760405162461bcd60e51b8152600401610626906130b1565b61091e858585858561212b565b6001600160a01b03831633148061174e575061174e833361056a565b61176a5760405162461bcd60e51b8152600401610626906130b1565b6109f1838383611fa9565b60006001600160e01b03198216637965db0b60e01b1480610660575061066082612248565b6117a48282610f6a565b61068b576117bc816001600160a01b03166014612298565b6117c7836020612298565b6040516020016117d8929190612ea6565b60408051601f198184030181529082905262461bcd60e51b825261062691600401613012565b805161068b906002906020840190612776565b6001600160a01b0384166118375760405162461bcd60e51b815260040161062690613267565b81518351146118585760405162461bcd60e51b81526004016106269061321f565b3361186881600087878787612480565b60005b845181101561191f5783818151811061189457634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106118bf57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461190791906132cb565b90915550819050611917816133c1565b91505061186b565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611970929190612fe4565b60405180910390a461091e816000878787876124aa565b81518351146119a85760405162461bcd60e51b81526004016106269061321f565b6001600160a01b0384166119ce5760405162461bcd60e51b81526004016106269061314d565b336119dd818787878787612480565b60005b8451811015611adf576000858281518110611a0b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611a3757634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a875760405162461bcd60e51b8152600401610626906131d5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ac49084906132cb565b9250508190555050505080611ad8906133c1565b90506119e0565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2f929190612fe4565b60405180910390a4611b458187878787876124aa565b505050505050565b611b578282610f6a565b61068b5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bdd8282610f6a565b1561068b5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611c42610de6565b611c855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610626565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611cf55760405162461bcd60e51b815260040161062690613192565b8051825114611d165760405162461bcd60e51b81526004016106269061321f565b6000339050611d3981856000868660405180602001604052806000815250612480565b60005b8351811015611e1a576000848281518110611d6757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611d9357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015611de35760405162461bcd60e51b81526004016106269061306d565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580611e12816133c1565b915050611d3c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611e6b929190612fe4565b60405180910390a450505050565b6001600160a01b038416611e9f5760405162461bcd60e51b815260040161062690613267565b33611ebf81600087611eb088612615565b611eb988612615565b87612480565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611eef9084906132cb565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461091e8160008787878761266e565b611f57610de6565b15611f745760405162461bcd60e51b815260040161062690613123565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cb23390565b6001600160a01b038316611fcf5760405162461bcd60e51b815260040161062690613192565b33611ffe81856000611fe087612615565b611fe987612615565b60405180602001604052806000815250612480565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561203f5760405162461bcd60e51b81526004016106269061306d565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040805142602080830191909152448284015243406060808401919091526bffffffffffffffffffffffff1941821b811660808501523390911b1660948301528251808303608801815260a89092019092528051910120600854600091906121136064836133dc565b1061211f576001612122565b60005b60ff1691505090565b6001600160a01b0384166121515760405162461bcd60e51b81526004016106269061314d565b33612161818787611eb088612615565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156121a25760405162461bcd60e51b8152600401610626906131d5565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121df9084906132cb565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461223f82888888888861266e565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061227957506001600160e01b031982166303a24d0760e21b145b8061066057506301ffc9a760e01b6001600160e01b0319831614610660565b606060006122a78360026132e3565b6122b29060026132cb565b6001600160401b038111156122d757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612301576020820181803683370190505b509050600360fc1b8160008151811061232a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061236757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061238b8460026132e3565b6123969060016132cb565b90505b600181111561242a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123d857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106123fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361242381613349565b9050612399565b5083156124795760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610626565b9392505050565b612488610de6565b156124a55760405162461bcd60e51b815260040161062690613123565b611b45565b6001600160a01b0384163b15611b455760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ee9089908990889088908890600401612f1b565b602060405180830381600087803b15801561250857600080fd5b505af1925050508015612538575060408051601f3d908101601f1916820190925261253591810190612d9e565b60015b6125e557612544613428565b806308c379a0141561257e575061255961343f565b806125645750612580565b8060405162461bcd60e51b81526004016106269190613012565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610626565b6001600160e01b0319811663bc197c8160e01b1461223f5760405162461bcd60e51b815260040161062690613025565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061265d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611b455760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906126b29089908990889088908890600401612f79565b602060405180830381600087803b1580156126cc57600080fd5b505af19250505080156126fc575060408051601f3d908101601f191682019092526126f991810190612d9e565b60015b61270857612544613428565b6001600160e01b0319811663f23a6e6160e01b1461223f5760405162461bcd60e51b815260040161062690613025565b8260028101928215612766579160200282015b8281111561276657823582559160200191906001019061274b565b506127729291506127ea565b5090565b82805461278290613360565b90600052602060002090601f0160209004810192826127a45760008555612766565b82601f106127bd57805160ff1916838001178555612766565b82800160010185558215612766579182015b828111156127665782518255916020019190600101906127cf565b5b8082111561277257600081556001016127eb565b60006001600160401b0383111561281857612818613412565b60405161282f601f8501601f191660200182613395565b80915083815284848401111561284457600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461066357600080fd5b600082601f830112612883578081fd5b81356020612890826132a8565b60405161289d8282613395565b8381528281019150858301838502870184018810156128ba578586fd5b855b858110156128d8578135845292840192908401906001016128bc565b5090979650505050505050565b600082601f8301126128f5578081fd5b612479838335602085016127ff565b600060208284031215612915578081fd5b6124798261285c565b60008060408385031215612930578081fd5b6129398361285c565b91506129476020840161285c565b90509250929050565b600080600080600060a08688031215612967578081fd5b6129708661285c565b945061297e6020870161285c565b935060408601356001600160401b0380821115612999578283fd5b6129a589838a01612873565b945060608801359150808211156129ba578283fd5b6129c689838a01612873565b935060808801359150808211156129db578283fd5b506129e8888289016128e5565b9150509295509295909350565b600080600080600060a08688031215612a0c578081fd5b612a158661285c565b9450612a236020870161285c565b9350604086013592506060860135915060808601356001600160401b03811115612a4b578182fd5b6129e8888289016128e5565b600080600060608486031215612a6b578283fd5b612a748461285c565b925060208401356001600160401b0380821115612a8f578384fd5b612a9b87838801612873565b93506040860135915080821115612ab0578283fd5b50612abd86828701612873565b9150509250925092565b60008060008060808587031215612adc578081fd5b612ae58561285c565b935060208501356001600160401b0380821115612b00578283fd5b612b0c88838901612873565b94506040870135915080821115612b21578283fd5b612b2d88838901612873565b93506060870135915080821115612b42578283fd5b50612b4f878288016128e5565b91505092959194509250565b60008060408385031215612b6d578182fd5b612b768361285c565b91506020830135612b86816134d0565b809150509250929050565b60008060408385031215612ba3578182fd5b612bac8361285c565b946020939093013593505050565b600080600060608486031215612bce578081fd5b612bd78461285c565b95602085013595506040909401359392505050565b60008060008060808587031215612c01578182fd5b612c0a8561285c565b9350602085013592506040850135915060608501356001600160401b03811115612c32578182fd5b612b4f878288016128e5565b60008060408385031215612c50578182fd5b82356001600160401b0380821115612c66578384fd5b818501915085601f830112612c79578384fd5b81356020612c86826132a8565b604051612c938282613395565b8381528281019150858301838502870184018b1015612cb0578889fd5b8896505b84871015612cd957612cc58161285c565b835260019690960195918301918301612cb4565b5096505086013592505080821115612cef578283fd5b50612cfc85828601612873565b9150509250929050565b600060408284031215612d17578081fd5b82604083011115612d26578081fd5b50919050565b600060208284031215612d3d578081fd5b8151612479816134d0565b600060208284031215612d59578081fd5b5035919050565b60008060408385031215612d72578182fd5b823591506129476020840161285c565b600060208284031215612d93578081fd5b8135612479816134de565b600060208284031215612daf578081fd5b8151612479816134de565b600060208284031215612dcb578081fd5b81356001600160401b03811115612de0578182fd5b8201601f81018413612df0578182fd5b612dff848235602084016127ff565b949350505050565b600060208284031215612e18578081fd5b5051919050565b60008060408385031215612e31578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612e6f57815187529582019590820190600101612e53565b509495945050505050565b60008151808452612e92816020860160208601613319565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612ede816017850160208801613319565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f0f816028840160208801613319565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612f4790830186612e40565b8281036060840152612f598186612e40565b90508281036080840152612f6d8185612e7a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612fb390830184612e7a565b979650505050505050565b6040818101908383376000815292915050565b6000602082526124796020830184612e40565b600060408252612ff76040830185612e40565b82810360208401526130098185612e40565b95945050505050565b6000602082526124796020830184612e7a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b038211156132c1576132c1613412565b5060209081020190565b600082198211156132de576132de6133fc565b500190565b60008160001904831182151516156132fd576132fd6133fc565b500290565b600082821015613314576133146133fc565b500390565b60005b8381101561333457818101518382015260200161331c565b83811115613343576000848401525b50505050565b600081613358576133586133fc565b506000190190565b60028104600182168061337457607f821691505b60208210811415612d2657634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156133ba576133ba613412565b6040525050565b60006000198214156133d5576133d56133fc565b5060010190565b6000826133f757634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610ded57600481823e5160e01c90565b600060443d101561344f57610ded565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613480575050505050610ded565b828501915081518181111561349a57505050505050610ded565b843d87010160208285010111156134b657505050505050610ded565b6134c560208286010187613395565b509094505050505090565b8015158114610a9157600080fd5b6001600160e01b031981168114610a9157600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220eeaea349f4e2a5c2daaf1f86789604df79f28b5a1e2095ae87a4d139cab753cc64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "dragon mainland bone",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 641,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 647,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 649,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 501,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 586,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9032,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "compoundLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9035,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "compoundAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9038,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "compoundWeight",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9045,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "dmsFees",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 9052,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "dmpFees",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 9058,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "dmsToken",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)2652"
      },
      {
        "astId": 9064,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "dmpToken",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IERC20)2652"
      },
      {
        "astId": 9070,
        "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
        "label": "beneficiary",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2652": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DragonMainlandBone.sol:DragonMainlandBone",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}