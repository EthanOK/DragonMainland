{
  "address": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dmsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dmbToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMax",
          "type": "uint256"
        }
      ],
      "name": "AccountMax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApplyJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMax",
          "type": "uint256"
        }
      ],
      "name": "BoxMax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "DmsAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "EndTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "oldWeight",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "newWeight",
          "type": "uint256[3]"
        }
      ],
      "name": "LevelWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LuckyBlindbox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OpenBlindbox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "OpenTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "StartTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyJoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blindboxAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blindboxList",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "opened",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boxMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmbToken",
      "outputs": [
        {
          "internalType": "contract IDMBToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dmsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApplyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBatchId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlindboxId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isApplyJoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isLuckyBlindbox",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isOpenedBlindbox",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "luckyBlindbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batch",
          "type": "uint256"
        }
      ],
      "name": "openBlindbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setAccountMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setBoxMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDmsAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_weight",
          "type": "uint256[3]"
        }
      ],
      "name": "setLevelWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_boxMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_accountMax",
          "type": "uint256"
        }
      ],
      "name": "setNextBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setOpenTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
  "receipt": {
    "to": null,
    "from": "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716",
    "contractAddress": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
    "transactionIndex": 254,
    "gasUsed": "2571668",
    "logsBloom": "0x
    "blockHash": "0xb1ae43930e446b7e39875a1a72d01c05915554c3422ad8f83e785bf3ff8b1500",
    "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
    "logs": [
      {
        "transactionIndex": 254,
        "blockNumber": 13295087,
        "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
        "address": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 883,
        "blockHash": "0xb1ae43930e446b7e39875a1a72d01c05915554c3422ad8f83e785bf3ff8b1500"
      },
      {
        "transactionIndex": 254,
        "blockNumber": 13295087,
        "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
        "address": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000e0c33cd3296ce1cdb3b102afdbac43d35016954e",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 884,
        "blockHash": "0xb1ae43930e446b7e39875a1a72d01c05915554c3422ad8f83e785bf3ff8b1500"
      },
      {
        "transactionIndex": 254,
        "blockNumber": 13295087,
        "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
        "address": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 885,
        "blockHash": "0xb1ae43930e446b7e39875a1a72d01c05915554c3422ad8f83e785bf3ff8b1500"
      },
      {
        "transactionIndex": 254,
        "blockNumber": 13295087,
        "transactionHash": "0xc1fcfcf92c79b4a88cf41d039ab9626d60ad9701992b78f9114e7b2799e9bb15",
        "address": "0xB559D183b4ab8aED5BAAC9a65DCf9d3a15ec94ab",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716",
          "0x000000000000000000000000a82f9f0abfe82760faccb1233bf9d106c4d00716"
        ],
        "data": "0x",
        "logIndex": 886,
        "blockHash": "0xb1ae43930e446b7e39875a1a72d01c05915554c3422ad8f83e785bf3ff8b1500"
      }
    ],
    "blockNumber": 13295087,
    "cumulativeGasUsed": "34584685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a26e6D24Df036B0b015016D1b55011c19E76C87",
    "0xF1a41450f7DDEce82F3ea389E201f3b1478C9893",
    [
      "0xe0C33CD3296ce1cdb3b102afDbaC43d35016954e",
      "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716"
    ],
    [
      "0xa82F9F0ABfe82760FacCB1233Bf9d106c4D00716"
    ],
    "0x54C3Aaa72632E1CbE6D5eC4e6e4F2D148E438bea"
  ],
  "solcInputHash": "74f5ccf9ff6601654c471cfaca5624f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dmsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dmbToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"AccountMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApplyJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"BoxMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"DmsAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"EndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"oldWeight\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"newWeight\",\"type\":\"uint256[3]\"}],\"name\":\"LevelWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LuckyBlindbox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OpenBlindbox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"OpenTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"StartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blindboxAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blindboxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmbToken\",\"outputs\":[{\"internalType\":\"contract IDMBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApplyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlindboxId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isApplyJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isLuckyBlindbox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOpenedBlindbox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"luckyBlindbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batch\",\"type\":\"uint256\"}],\"name\":\"openBlindbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAccountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBoxMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDmsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_weight\",\"type\":\"uint256[3]\"}],\"name\":\"setLevelWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_boxMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accountMax\",\"type\":\"uint256\"}],\"name\":\"setNextBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setOpenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonBlindbox.sol\":\"DragonBlindbox\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/DragonBlindbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// DMB token abi\\ninterface IDMBToken is IERC1155 {\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n// dragon blindbox base\\nabstract contract DragonBlindboxBase is AccessControl, Pausable {\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    // set event list\\n    event LevelWeight(uint256[3] oldWeight, uint256[3] newWeight);\\n    event DmsAmount(uint256 oldAmount, uint256 newAmount);\\n    event BoxMax(uint256 oldMax, uint256 newMax);\\n    event AccountMax(uint256 oldMax, uint256 newMax);\\n    event StartTime(uint256 oldTime, uint256 newTime);\\n    event EndTime(uint256 oldTime, uint256 newTime);\\n    event OpenTime(uint256 oldTime, uint256 newTime);\\n    event Withdraw(address indexed account, uint256 amount);\\n\\n    // apply join event dms amount\\n    event ApplyJoin(uint256 batch, address account, uint256 amount);\\n    // open blindbox event\\n    event OpenBlindbox(uint256 batch, address account, uint256 tokenId);\\n    // lucky blindbox event\\n    event LuckyBlindbox(uint256 batch, address account, uint256 tokenId);\\n\\n    function pause() external onlyRole(OWNER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(OWNER_ROLE) {\\n        _unpause();\\n    }\\n\\n    struct BlindboxData {\\n        address account;\\n        uint256 batch;\\n        uint256 number;\\n        uint256 amount;\\n        uint256 tokenId;\\n        bool opened;\\n    }\\n\\n    // fee recipient\\n    address public recipient;\\n    // dms token\\n    IERC20 public dmsToken;\\n    // dmb token\\n    IDMBToken public dmbToken;\\n\\n    // batch config\\n    uint256 public dmsAmount = 50 ether;\\n    uint256 public boxMax = 50;\\n    uint256 public accountMax = 1000;\\n\\n    // level weight 2%,18%,80%\\n    uint256[3] public levelWeight = [2, 20, 100];\\n\\n    // batch time\\n    uint256 public startTime = 1638964800;\\n    uint256 public endTime = startTime + 1 days;\\n    uint256 public openTime = endTime + 1 hours;\\n    // total supply opened\\n    uint256 public totalSupply;\\n\\n    // id list\\n    uint256[] internal blindboxId;\\n    // batch => id => account\\n    mapping(uint256 => mapping(uint256 => address)) public blindboxAccount;\\n    // batch => account => BlindboxData\\n    mapping(uint256 => mapping(address => BlindboxData)) public blindboxList;\\n    // account => balance\\n    mapping(address => uint256) public balances;\\n\\n    // set level weight\\n    function setLevelWeight(uint256[3] calldata _weight)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        for (uint256 i = 0; i < _weight.length; i++) {\\n            require(_weight[i] > 0, \\\"invalid weight\\\");\\n        }\\n        emit LevelWeight(levelWeight, _weight);\\n        levelWeight = _weight;\\n    }\\n\\n    // set dms amount\\n    function setDmsAmount(uint256 _amount) public onlyRole(OWNER_ROLE) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        emit DmsAmount(dmsAmount, _amount);\\n        dmsAmount = _amount;\\n    }\\n\\n    // set blindbox max\\n    function setBoxMax(uint256 _max) public onlyRole(OWNER_ROLE) {\\n        require(_max > 0, \\\"invalid max\\\");\\n        emit BoxMax(boxMax, _max);\\n        boxMax = _max;\\n    }\\n\\n    // set account max\\n    function setAccountMax(uint256 _max) public onlyRole(OWNER_ROLE) {\\n        require(_max > 0, \\\"invalid max\\\");\\n        emit AccountMax(accountMax, _max);\\n        accountMax = _max;\\n    }\\n\\n    // set start time\\n    function setStartTime(uint256 _time) public onlyRole(OWNER_ROLE) {\\n        require(_time > 0, \\\"invalid time\\\");\\n        emit StartTime(startTime, _time);\\n        startTime = _time;\\n    }\\n\\n    // set end time\\n    function setEndTime(uint256 _time) public onlyRole(OWNER_ROLE) {\\n        require(_time > 0, \\\"invalid time\\\");\\n        emit EndTime(endTime, _time);\\n        endTime = _time;\\n    }\\n\\n    // set open time\\n    function setOpenTime(uint256 _time) public onlyRole(OWNER_ROLE) {\\n        require(_time > 0, \\\"invalid time\\\");\\n        emit OpenTime(openTime, _time);\\n        openTime = _time;\\n    }\\n}\\n\\n// dragon blindbox\\ncontract DragonBlindbox is DragonBlindboxBase, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _batchId;\\n    Counters.Counter private _id;\\n\\n    constructor(\\n        address _dmsToken,\\n        address _dmbToken,\\n        address[] memory owners,\\n        address[] memory operators,\\n        address _recipient\\n    ) {\\n        require(owners.length > 0, \\\"invalid owners\\\");\\n        require(operators.length > 0, \\\"invalid operators\\\");\\n        require(_dmsToken != address(0), \\\"invalid DMS Token\\\");\\n        require(_dmbToken != address(0), \\\"invalid DMB Token\\\");\\n        require(_recipient != address(0), \\\"invalid recipient\\\");\\n        dmsToken = IERC20(_dmsToken);\\n        dmbToken = IDMBToken(_dmbToken);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            _setupRole(OWNER_ROLE, owners[i]);\\n        }\\n        for (uint256 i = 0; i < operators.length; i++) {\\n            _setupRole(OPERATOR_ROLE, operators[i]);\\n        }\\n        recipient = _recipient;\\n        _batchId.increment();\\n    }\\n\\n    // next batch config\\n    function setNextBatch(\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _openTime,\\n        uint256 _amount,\\n        uint256 _boxMax,\\n        uint256 _accountMax\\n    ) external onlyRole(OWNER_ROLE) {\\n        require(block.timestamp > openTime, \\\"next batch after open time\\\");\\n        _batchId.increment();\\n        delete blindboxId;\\n        require(_startTime > block.timestamp, \\\"invalid start time\\\");\\n        require(_endTime > _startTime, \\\"invalid end time\\\");\\n        require(_openTime > _endTime, \\\"invalid open time\\\");\\n        require(_amount > 0, \\\"invalid dms amount\\\");\\n        require(_boxMax > 0, \\\"invalid box max\\\");\\n        require(_accountMax > 0, \\\"invalid account max\\\");\\n        setStartTime(_startTime);\\n        setEndTime(_endTime);\\n        setOpenTime(_openTime);\\n        setDmsAmount(_amount);\\n        setBoxMax(_boxMax);\\n        setAccountMax(_accountMax);\\n        // id reset\\n        _id.reset();\\n    }\\n\\n    modifier checkBatch(uint256 _batch) {\\n        require(_batch <= _batchId.current(), \\\"invalid batch\\\");\\n        _;\\n    }\\n\\n    // apply to join\\n    // dms transfer\\n    function applyJoin() external returns (bool) {\\n        require(\\n            block.timestamp >= startTime &&\\n                block.timestamp <= endTime &&\\n                startTime > 0 &&\\n                endTime > 0,\\n            \\\"invalid time\\\"\\n        );\\n        uint256 _currBatch = _batchId.current();\\n        require(\\n            !isApplyJoin(_currBatch, msg.sender),\\n            \\\"The current user is already registered\\\"\\n        );\\n        _id.increment();\\n        require(\\n            _id.current() <= accountMax,\\n            \\\"The Blind Box registration is full\\\"\\n        );\\n        require(\\n            dmsToken.balanceOf(msg.sender) >= dmsAmount,\\n            \\\"Your DMS balance is insufficient\\\"\\n        );\\n        require(\\n            dmsToken.transferFrom(msg.sender, recipient, dmsAmount),\\n            \\\"DMS transfer failure\\\"\\n        );\\n        balances[msg.sender] += dmsAmount;\\n\\n        uint256 _newId = _id.current();\\n        blindboxId.push(_newId);\\n        blindboxAccount[_currBatch][_newId] = msg.sender;\\n        blindboxList[_currBatch][msg.sender] = BlindboxData(\\n            msg.sender,\\n            _currBatch,\\n            _id.current(),\\n            dmsAmount,\\n            0,\\n            false\\n        );\\n        emit ApplyJoin(_currBatch, msg.sender, dmsAmount);\\n\\n        return true;\\n    }\\n\\n    // get batch id\\n    function getBatchId() external view returns (uint256) {\\n        return _batchId.current();\\n    }\\n\\n    // get apply count\\n    function getApplyCount() external view returns (uint256) {\\n        return blindboxId.length;\\n    }\\n\\n    // get blindboxId list\\n    function getBlindboxId() external view returns (uint256[] memory) {\\n        return blindboxId;\\n    }\\n\\n    // is apply join succ\\n    function isApplyJoin(uint256 _batch, address _account)\\n        public\\n        view\\n        checkBatch(_batch)\\n        returns (bool)\\n    {\\n        return blindboxList[_batch][_account].number > 0;\\n    }\\n\\n    // is lucky blindbox\\n    function isLuckyBlindbox(uint256 _batch, address _account)\\n        public\\n        view\\n        checkBatch(_batch)\\n        returns (bool)\\n    {\\n        return blindboxList[_batch][_account].tokenId > 0;\\n    }\\n\\n    // is opened blindbox\\n    function isOpenedBlindbox(uint256 _batch, address _account)\\n        public\\n        view\\n        checkBatch(_batch)\\n        returns (bool)\\n    {\\n        return blindboxList[_batch][_account].opened;\\n    }\\n\\n    // withdraw dms token\\n    function withdraw() external {\\n        require(block.timestamp > openTime, \\\"invalid withdraw time\\\");\\n        uint256 _balance = balances[msg.sender];\\n        require(_balance > 0, \\\"DMS balance is zero\\\");\\n        balances[msg.sender] = 0;\\n        // deploy successful recipient manual approve 1e18 * 1e9\\n        dmsToken.transferFrom(recipient, msg.sender, _balance);\\n        emit Withdraw(msg.sender, _balance);\\n    }\\n\\n    // open blindbox\\n    function openBlindbox(uint256 _batch)\\n        external\\n        checkBatch(_batch)\\n        nonReentrant\\n    {\\n        if (_batch == _batchId.current()) {\\n            require(\\n                block.timestamp > openTime && openTime > 0,\\n                \\\"invalid open time\\\"\\n            );\\n        }\\n        BlindboxData memory _box = blindboxList[_batch][msg.sender];\\n        require(!_box.opened, \\\"The blind box has been opened\\\");\\n        require(_box.tokenId > 0, \\\"You did not win a blind box\\\");\\n        blindboxList[_batch][msg.sender].opened = true;\\n        dmbToken.mint(msg.sender, _box.tokenId, 1, \\\"0x\\\");\\n        totalSupply += 1;\\n        emit OpenBlindbox(_batch, msg.sender, _box.tokenId);\\n    }\\n\\n    function _random(uint256 _seed, uint256 _modulus)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 rand = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    _seed,\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number),\\n                    block.coinbase,\\n                    msg.sender\\n                )\\n            )\\n        );\\n        return rand % _modulus;\\n    }\\n\\n    function _levelId(uint256 _level) private view returns (uint256) {\\n        if (_level <= levelWeight[0]) {\\n            return 3;\\n        } else if (_level <= levelWeight[1]) {\\n            return 2;\\n        } else if (_level <= levelWeight[2]) {\\n            return 1;\\n        }\\n        return 1;\\n    }\\n\\n    // lucky blindbox -> tokenId\\n    // Run before OpenTime\\n    function luckyBlindbox(uint256 _start, uint256 _end)\\n        external\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        require(block.timestamp > endTime && endTime > 0, \\\"invalid end time\\\");\\n        require(_start < _end && _end - _start <= 500, \\\"invalid params\\\");\\n        uint256 _currBatch = _batchId.current();\\n        uint256 _len = blindboxId.length <= boxMax ? blindboxId.length : boxMax;\\n        require(_end <= _len, \\\"invalid end\\\");\\n        uint256 _seed = _random(_id.current(), _len);\\n        for (uint256 i = _start; i <= _end; i++) {\\n            uint256 _job = _random(_seed, 5) + 1; // 1 <= job <= 5\\n            uint256 _index = _random(_seed, blindboxId.length);\\n            uint256 _curr = blindboxId[_index];\\n            _seed = _curr;\\n            address _account = blindboxAccount[_currBatch][_curr];\\n            if (blindboxList[_currBatch][_account].tokenId > 0) {\\n                continue;\\n            }\\n            blindboxId[_index] = blindboxId[blindboxId.length - 1];\\n            blindboxId.pop();\\n\\n            uint256 _level = _random(\\n                uint256(uint160(_account)),\\n                levelWeight[2]\\n            ) + 1; // 1 <= level <= 100\\n            uint256 _newTokenId = _job * 10 + _levelId(_level);\\n            BlindboxData storage _data = blindboxList[_currBatch][_account];\\n            _data.tokenId = _newTokenId;\\n            blindboxList[_currBatch][_account] = _data;\\n            balances[_account] -= dmsAmount;\\n            emit LuckyBlindbox(_batchId.current(), _account, _newTokenId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb09cde0426073f88857f610f1d97b83dc25915799cbb4ad6f577f1ac7dc6afea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6802b5e3af16b188000060045560326005556103e860065560e060405260026080908152601460a052606460c0526200003d90600790600362000439565b506361b09e40600a81905562000057906201518062000604565b600b8190556200006a90610e1062000604565b600c553480156200007a57600080fd5b5060405162002c9438038062002c948339810160408190526200009d9162000564565b6001805460ff191681556012558251620000ef5760405162461bcd60e51b815260206004820152600e60248201526d696e76616c6964206f776e65727360901b60448201526064015b60405180910390fd5b6000825111620001365760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206f70657261746f727360781b6044820152606401620000e6565b6001600160a01b038516620001825760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2102226a9902a37b5b2b760791b6044820152606401620000e6565b6001600160a01b038416620001ce5760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2102226a1102a37b5b2b760791b6044820152606401620000e6565b6001600160a01b0381166200021a5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401620000e6565b600280546001600160a01b038088166001600160a01b03199283161790925560038054928716929091169190911790556200025760003362000380565b60005b8351811015620002d357620002be7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e858381518110620002aa57634e487b7160e01b600052603260045260246000fd5b60200260200101516200038060201b60201c565b80620002ca816200061f565b9150506200025a565b5060005b82518110156200033c57620003277f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929848381518110620002aa57634e487b7160e01b600052603260045260246000fd5b8062000333816200061f565b915050620002d7565b5060018054610100600160a81b0319166101006001600160a01b0384160217905562000375601362000390602090811b62001c9317901c565b505050505062000669565b6200038c828262000399565b5050565b80546001019055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200038c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003f53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82600381019282156200046f579160200282015b828111156200046f578251829060ff169055916020019190600101906200044d565b506200047d92915062000481565b5090565b5b808211156200047d576000815560010162000482565b80516001600160a01b0381168114620004b057600080fd5b919050565b600082601f830112620004c6578081fd5b815160206001600160401b0380831115620004e557620004e562000653565b818302604051601f19603f830116810181811084821117156200050c576200050c62000653565b604052848152838101925086840182880185018910156200052b578687fd5b8692505b858310156200055857620005438162000498565b8452928401926001929092019184016200052f565b50979650505050505050565b600080600080600060a086880312156200057c578081fd5b620005878662000498565b9450620005976020870162000498565b60408701519094506001600160401b0380821115620005b4578283fd5b620005c289838a01620004b5565b94506060880151915080821115620005d8578283fd5b50620005e788828901620004b5565b925050620005f86080870162000498565b90509295509295909350565b600082198211156200061a576200061a6200063d565b500190565b60006000198214156200063657620006366200063d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61261b80620006796000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80637b27b9ee11610151578063d1585c8f116100c3578063f5b541a611610087578063f5b541a61461059e578063f60ba338146105c5578063f76c6d3c146105d8578063f9b9c2b5146105eb578063fa84062a146105f4578063fbeb44e61461060757610274565b8063d1585c8f1461053d578063d547741f14610550578063e28d697514610563578063e58378bb14610576578063e87c43311461058b57610274565b806395c590401161011557806395c59040146104eb578063a217fddf146104fe578063a6dc908414610506578063b42568881461050e578063ca43fbca14610517578063ccb98ffc1461052a57610274565b80637b27b9ee146104a05780637e3e7157146104a85780638456cb59146104bd578063903ac655146104c557806391d14854146104d857610274565b80633f4ba83a116101ea57806350fd99fe116101ae57806350fd99fe1461042e5780635c975abb1461043657806366d003ac146104415780636da586f2146104715780637651ecdf1461048457806378e979251461049757610274565b80633f4ba83a146103ee5780634470593e146103f65780634a48647f146103ff5780634f808a9c1461041257806350ee0f6f1461042557610274565b806327e235e31161023c57806327e235e3146103825780632f2ff15d146103a25780633197cbb6146103b757806336568abe146103c05780633ccfd60b146103d35780633e0a322d146103db57610274565b806301ffc9a71461027957806307ccfaa0146102a157806315190dcd1461033557806318160ddd14610348578063248a9ca31461035f575b600080fd5b61028c6102873660046122b3565b61063b565b60405190151581526020015b60405180910390f35b6102fc6102af3660046122f3565b60106020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909160ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c001610298565b61028c6103433660046122f3565b610674565b610351600d5481565b604051908152602001610298565b61035161036d366004612270565b60009081526020819052604090206001015490565b610351610390366004612210565b60116020526000908152604090205481565b6103b56103b0366004612288565b6106d7565b005b610351600b5481565b6103b56103ce366004612288565b610703565b6103b5610781565b6103b56103e9366004612270565b6108fd565b6103b5610978565b61035160045481565b6103b561040d366004612270565b61099c565b610351610420366004612270565b610a38565b61035160055481565b61028c610a4f565b60015460ff1661028c565b6001546104599061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610298565b600354610459906001600160a01b031681565b6103b5610492366004612305565b610ea8565b610351600a5481565b610351611296565b6104b06112a6565b604051610298919061241b565b6103b56112fe565b600254610459906001600160a01b031681565b61028c6104e6366004612288565b61131f565b6103b56104f9366004612270565b611348565b610351600081565b600e54610351565b610351600c5481565b6103b5610525366004612270565b6113e1565b6103b5610538366004612270565b6116eb565b6103b561054b36600461222a565b611766565b6103b561055e366004612288565b61184a565b61028c6105713660046122f3565b611870565b6103516000805160206125c683398151915281565b61028c6105993660046122f3565b6118cb565b6103517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6103b56105d3366004612270565b611925565b6103b56105e6366004612326565b6119a0565b61035160065481565b6103b5610602366004612270565b611bfa565b610459610615366004612305565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061066c57506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b60008261068060135490565b8111156106a85760405162461bcd60e51b815260040161069f90612492565b60405180910390fd5b505060009182526010602090815260408084206001600160a01b03939093168452919052902060020154151590565b6000828152602081905260409020600101546106f481335b611c9c565b6106fe8383611d00565b505050565b6001600160a01b03811633146107735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161069f565b61077d8282611d84565b5050565b600c5442116107ca5760405162461bcd60e51b8152602060048201526015602482015274696e76616c69642077697468647261772074696d6560581b604482015260640161069f565b336000908152601160205260409020548061081d5760405162461bcd60e51b8152602060048201526013602482015272444d532062616c616e6365206973207a65726f60681b604482015260640161069f565b336000818152601160205260408082209190915560025460015491516323b872dd60e01b81526001600160a01b036101009093048316600482015260248101939093526044830184905216906323b872dd90606401602060405180830381600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c49190612250565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250565b6000805160206125c683398151915261091681336106ef565b600082116109365760405162461bcd60e51b815260040161069f906124b9565b600a5460408051918252602082018490527ff8bb759d56dfdf5342f6110a4739280ad8b230227a6c75e3a286c7cb514f7bb6910160405180910390a150600a55565b6000805160206125c683398151915261099181336106ef565b610999611de9565b50565b6000805160206125c68339815191526109b581336106ef565b600082116109f65760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640161069f565b60045460408051918252602082018490527f8e817662c24598381c5011616a28424dd3f962619d56a2c0105044d682cbb59f910160405180910390a150600455565b60078160038110610a4857600080fd5b0154905081565b6000600a544210158015610a655750600b544211155b8015610a7357506000600a54115b8015610a8157506000600b54115b610a9d5760405162461bcd60e51b815260040161069f906124b9565b6000610aa860135490565b9050610ab48133610674565b15610b105760405162461bcd60e51b815260206004820152602660248201527f5468652063757272656e74207573657220697320616c726561647920726567696044820152651cdd195c995960d21b606482015260840161069f565b610b1e601480546001019055565b6006546014541115610b7d5760405162461bcd60e51b815260206004820152602260248201527f54686520426c696e6420426f7820726567697374726174696f6e2069732066756044820152611b1b60f21b606482015260840161069f565b600480546002546040516370a0823160e01b8152339381019390935290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bc857600080fd5b505afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0091906122db565b1015610c4e5760405162461bcd60e51b815260206004820181905260248201527f596f757220444d532062616c616e636520697320696e73756666696369656e74604482015260640161069f565b600254600154600480546040516323b872dd60e01b815233928101929092526001600160a01b036101009093048316602483015260448201529116906323b872dd90606401602060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce59190612250565b610d285760405162461bcd60e51b8152602060048201526014602482015273444d53207472616e73666572206661696c75726560601b604482015260640161069f565b6004543360009081526011602052604081208054909190610d4a9084906124df565b9091555050601454600090600e8054600181019091557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018190556000838152600f6020908152604080832084845282529182902080546001600160a01b03191633908117909155825160c0810184529081529081018590529192508101610dd160145490565b815260048054602080840191909152600060408085018290526060948501829052878252601083528082203380845290845291819020865181546001600160a01b0319166001600160a01b0390911617815586840151600182015586820151600282015586860151600382015560808701518186015560a0909601516005909601805460ff1916961515969096179095559154845187815291820192909252928301527f5271b12878d55f1e02b5dfc75fca1e3a6fb769cfa4af16b39a563043ed3ed62c910160405180910390a160019250505090565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610ed381336106ef565b600b5442118015610ee657506000600b54115b610f255760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420656e642074696d6560801b604482015260640161069f565b8183108015610f3f57506101f4610f3c8484612516565b11155b610f7c5760405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b604482015260640161069f565b6000610f8760135490565b600554600e549192506000911115610fa157600554610fa5565b600e545b905080841115610fe55760405162461bcd60e51b815260206004820152600b60248201526a1a5b9d985b1a5908195b9960aa1b604482015260640161069f565b6000610ff9610ff360145490565b83611e7c565b9050855b85811161128d576000611011836005611e7c565b61101c9060016124df565b9050600061102f84600e80549050611e7c565b90506000600e828154811061105457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154898352600f825260408084208285528352808420548b8552601084528185206001600160a01b0390911680865293529092206004015491965086925090156110ad575050505061127b565b600e80546110bd90600190612516565b815481106110db57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600e848154811061110757634e487b7160e01b600052603260045260246000fd5b600091825260209091200155600e80548061113257634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590556000611180826001600160a01b0316600760026003811061117957634e487b7160e01b600052603260045260246000fd5b0154611e7c565b61118b9060016124df565b9050600061119882611eec565b6111a387600a6124f7565b6111ad91906124df565b60008b81526010602090815260408083206001600160a01b038881168552908352818420600480820187905581546001600160a01b03198116931692909217815560058101805460ff8116151560ff19909116179055905460119093529083208054949550909391929091611223908490612516565b90915550506013547ff9eb5da9fe47db0d29559fd15349bc82e040cd8b7bc345b43f5436c69979838790604080519182526001600160a01b0387166020830152810184905260600160405180910390a1505050505050505b8061128581612574565b915050610ffd565b50505050505050565b60006112a160135490565b905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156112f457602002820191906000526020600020905b8154815260200190600101908083116112e0575b5050505050905090565b6000805160206125c683398151915261131781336106ef565b610999611f2a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206125c683398151915261136181336106ef565b6000821161139f5760405162461bcd60e51b815260206004820152600b60248201526a0d2dcecc2d8d2c840dac2f60ab1b604482015260640161069f565b60065460408051918252602082018490527ffa7edf0ed5464457ccc093c60f885ed0049e542b1b549b263c738da1260ba637910160405180910390a150600655565b806113eb60135490565b81111561140a5760405162461bcd60e51b815260040161069f90612492565b6002601254141561145d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161069f565b60026012556013548214156114bf57600c544211801561147f57506000600c54115b6114bf5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206f70656e2074696d6560781b604482015260640161069f565b6000828152601060209081526040808320338452825291829020825160c08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460ff1615801560a08301526115775760405162461bcd60e51b815260206004820152601d60248201527f54686520626c696e6420626f7820686173206265656e206f70656e6564000000604482015260640161069f565b60008160800151116115cb5760405162461bcd60e51b815260206004820152601b60248201527f596f7520646964206e6f742077696e206120626c696e6420626f780000000000604482015260640161069f565b600083815260106020908152604080832033808552925291829020600501805460ff19166001908117909155600354608085810151945163731133e960e01b815260048101949094526024840194909452604483019190915260648201929092526002608482015261060f60f31b60a48201526001600160a01b039091169063731133e99060c401600060405180830381600087803b15801561166d57600080fd5b505af1158015611681573d6000803e3d6000fd5b505050506001600d600082825461169891906124df565b909155505060808101516040805185815233602082015280820192909252517fb2503d573131e10a6397a3e33ca37ea97e6fad54098a0f3ea9c79363e15565a09181900360600190a15050600160125550565b6000805160206125c683398151915261170481336106ef565b600082116117245760405162461bcd60e51b815260040161069f906124b9565b600b5460408051918252602082018490527f0315baffde07d16a247f35fc7e4f86332a13df11e80b04f403bc92e440192659910160405180910390a150600b55565b6000805160206125c683398151915261177f81336106ef565b60005b60038110156118025760008382600381106117ad57634e487b7160e01b600052603260045260246000fd5b6020020135116117f05760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081dd95a59da1d60921b604482015260640161069f565b806117fa81612574565b915050611782565b507f25dfb3ca2a8de521615a6e2c6d690d5bef848c94607e310b4387ab8df35515bc6007836040516118359291906123dd565b60405180910390a16106fe600783600361218c565b60008281526020819052604090206001015461186681336106ef565b6106fe8383611d84565b60008261187c60135490565b81111561189b5760405162461bcd60e51b815260040161069f90612492565b505060009182526010602090815260408084206001600160a01b0393909316845291905290206005015460ff1690565b6000826118d760135490565b8111156118f65760405162461bcd60e51b815260040161069f90612492565b505060009182526010602090815260408084206001600160a01b03939093168452919052902060040154151590565b6000805160206125c683398151915261193e81336106ef565b6000821161195e5760405162461bcd60e51b815260040161069f906124b9565b600c5460408051918252602082018490527f28a9731ef93aa031cdb7552134a2a51d68704b2f3a95a474f99d3fd8c5b373c1910160405180910390a150600c55565b6000805160206125c68339815191526119b981336106ef565b600c544211611a0a5760405162461bcd60e51b815260206004820152601a60248201527f6e657874206261746368206166746572206f70656e2074696d65000000000000604482015260640161069f565b611a18601380546001019055565b611a24600e60006121ca565b428711611a685760405162461bcd60e51b8152602060048201526012602482015271696e76616c69642073746172742074696d6560701b604482015260640161069f565b868611611aaa5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420656e642074696d6560801b604482015260640161069f565b858511611aed5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206f70656e2074696d6560781b604482015260640161069f565b60008411611b325760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a5908191b5cc8185b5bdd5b9d60721b604482015260640161069f565b60008311611b745760405162461bcd60e51b815260206004820152600f60248201526e0d2dcecc2d8d2c840c4def040dac2f608b1b604482015260640161069f565b60008211611bba5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c840c2c6c6deeadce840dac2f606b1b604482015260640161069f565b611bc3876108fd565b611bcc866116eb565b611bd585611925565b611bde8461099c565b611be783611bfa565b611bf082611348565b600060145561128d565b6000805160206125c6833981519152611c1381336106ef565b60008211611c515760405162461bcd60e51b815260206004820152600b60248201526a0d2dcecc2d8d2c840dac2f60ab1b604482015260640161069f565b60055460408051918252602082018490527fb572f8a859daba046be4663f97b8dc0046a90f7a8cddc538e2bf5c805ed94f98910160405180910390a150600555565b80546001019055565b611ca6828261131f565b61077d57611cbe816001600160a01b03166014611fa3565b611cc9836020611fa3565b604051602001611cda929190612368565b60408051601f198184030181529082905262461bcd60e51b825261069f9160040161245f565b611d0a828261131f565b61077d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d403390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d8e828261131f565b1561077d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611e325760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161069f565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516020808201859052428284015244606080840191909152434060808401526bffffffffffffffffffffffff1941821b811660a08501523390911b1660b4830152825180830360a801815260c89092019092528051910120600090611ee4838261258f565b949350505050565b6007546000908211611f005750600361066f565b6008548211611f115750600261066f565b6009548211611f225750600161066f565b506001919050565b60015460ff1615611f705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161069f565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611e5f565b60606000611fb28360026124f7565b611fbd9060026124df565b67ffffffffffffffff811115611fe357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561200d576020820181803683370190505b509050600360fc1b8160008151811061203657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061207357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006120978460026124f7565b6120a29060016124df565b90505b6001811115612136576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106120e457634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061210857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361212f8161255d565b90506120a5565b5083156121855760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069f565b9392505050565b82600381019282156121ba579160200282015b828111156121ba57823582559160200191906001019061219f565b506121c69291506121e4565b5090565b508054600082559060005260206000209081019061099991905b5b808211156121c657600081556001016121e5565b80356001600160a01b038116811461066f57600080fd5b600060208284031215612221578081fd5b612185826121f9565b60006060828403121561223b578081fd5b8260608301111561224a578081fd5b50919050565b600060208284031215612261578081fd5b81518015158114612185578182fd5b600060208284031215612281578081fd5b5035919050565b6000806040838503121561229a578081fd5b823591506122aa602084016121f9565b90509250929050565b6000602082840312156122c4578081fd5b81356001600160e01b031981168114612185578182fd5b6000602082840312156122ec578081fd5b5051919050565b6000806040838503121561229a578182fd5b60008060408385031215612317578182fd5b50508035926020909101359150565b60008060008060008060c0878903121561233e578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516123a081601785016020880161252d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123d181602884016020880161252d565b01602801949350505050565b60c08101818460005b60038110156124055781548352602090920191600191820191016123e6565b5050506060836060840137600081529392505050565b6020808252825182820181905260009190848201906040850190845b8181101561245357835183529284019291840191600101612437565b50909695505050505050565b600060208252825180602084015261247e81604085016020870161252d565b601f01601f19169190910160400192915050565b6020808252600d908201526c0d2dcecc2d8d2c840c4c2e8c6d609b1b604082015260600190565b6020808252600c908201526b696e76616c69642074696d6560a01b604082015260600190565b600082198211156124f2576124f26125af565b500190565b6000816000190483118215151615612511576125116125af565b500290565b600082821015612528576125286125af565b500390565b60005b83811015612548578181015183820152602001612530565b83811115612557576000848401525b50505050565b60008161256c5761256c6125af565b506000190190565b6000600019821415612588576125886125af565b5060010190565b6000826125aa57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220b55cda4a9ce69d1a683d955d97899dd12bf8730f55e3914217c2a28bbc380bf564736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80637b27b9ee11610151578063d1585c8f116100c3578063f5b541a611610087578063f5b541a61461059e578063f60ba338146105c5578063f76c6d3c146105d8578063f9b9c2b5146105eb578063fa84062a146105f4578063fbeb44e61461060757610274565b8063d1585c8f1461053d578063d547741f14610550578063e28d697514610563578063e58378bb14610576578063e87c43311461058b57610274565b806395c590401161011557806395c59040146104eb578063a217fddf146104fe578063a6dc908414610506578063b42568881461050e578063ca43fbca14610517578063ccb98ffc1461052a57610274565b80637b27b9ee146104a05780637e3e7157146104a85780638456cb59146104bd578063903ac655146104c557806391d14854146104d857610274565b80633f4ba83a116101ea57806350fd99fe116101ae57806350fd99fe1461042e5780635c975abb1461043657806366d003ac146104415780636da586f2146104715780637651ecdf1461048457806378e979251461049757610274565b80633f4ba83a146103ee5780634470593e146103f65780634a48647f146103ff5780634f808a9c1461041257806350ee0f6f1461042557610274565b806327e235e31161023c57806327e235e3146103825780632f2ff15d146103a25780633197cbb6146103b757806336568abe146103c05780633ccfd60b146103d35780633e0a322d146103db57610274565b806301ffc9a71461027957806307ccfaa0146102a157806315190dcd1461033557806318160ddd14610348578063248a9ca31461035f575b600080fd5b61028c6102873660046122b3565b61063b565b60405190151581526020015b60405180910390f35b6102fc6102af3660046122f3565b60106020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909160ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c001610298565b61028c6103433660046122f3565b610674565b610351600d5481565b604051908152602001610298565b61035161036d366004612270565b60009081526020819052604090206001015490565b610351610390366004612210565b60116020526000908152604090205481565b6103b56103b0366004612288565b6106d7565b005b610351600b5481565b6103b56103ce366004612288565b610703565b6103b5610781565b6103b56103e9366004612270565b6108fd565b6103b5610978565b61035160045481565b6103b561040d366004612270565b61099c565b610351610420366004612270565b610a38565b61035160055481565b61028c610a4f565b60015460ff1661028c565b6001546104599061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610298565b600354610459906001600160a01b031681565b6103b5610492366004612305565b610ea8565b610351600a5481565b610351611296565b6104b06112a6565b604051610298919061241b565b6103b56112fe565b600254610459906001600160a01b031681565b61028c6104e6366004612288565b61131f565b6103b56104f9366004612270565b611348565b610351600081565b600e54610351565b610351600c5481565b6103b5610525366004612270565b6113e1565b6103b5610538366004612270565b6116eb565b6103b561054b36600461222a565b611766565b6103b561055e366004612288565b61184a565b61028c6105713660046122f3565b611870565b6103516000805160206125c683398151915281565b61028c6105993660046122f3565b6118cb565b6103517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6103b56105d3366004612270565b611925565b6103b56105e6366004612326565b6119a0565b61035160065481565b6103b5610602366004612270565b611bfa565b610459610615366004612305565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061066c57506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b60008261068060135490565b8111156106a85760405162461bcd60e51b815260040161069f90612492565b60405180910390fd5b505060009182526010602090815260408084206001600160a01b03939093168452919052902060020154151590565b6000828152602081905260409020600101546106f481335b611c9c565b6106fe8383611d00565b505050565b6001600160a01b03811633146107735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161069f565b61077d8282611d84565b5050565b600c5442116107ca5760405162461bcd60e51b8152602060048201526015602482015274696e76616c69642077697468647261772074696d6560581b604482015260640161069f565b336000908152601160205260409020548061081d5760405162461bcd60e51b8152602060048201526013602482015272444d532062616c616e6365206973207a65726f60681b604482015260640161069f565b336000818152601160205260408082209190915560025460015491516323b872dd60e01b81526001600160a01b036101009093048316600482015260248101939093526044830184905216906323b872dd90606401602060405180830381600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c49190612250565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250565b6000805160206125c683398151915261091681336106ef565b600082116109365760405162461bcd60e51b815260040161069f906124b9565b600a5460408051918252602082018490527ff8bb759d56dfdf5342f6110a4739280ad8b230227a6c75e3a286c7cb514f7bb6910160405180910390a150600a55565b6000805160206125c683398151915261099181336106ef565b610999611de9565b50565b6000805160206125c68339815191526109b581336106ef565b600082116109f65760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640161069f565b60045460408051918252602082018490527f8e817662c24598381c5011616a28424dd3f962619d56a2c0105044d682cbb59f910160405180910390a150600455565b60078160038110610a4857600080fd5b0154905081565b6000600a544210158015610a655750600b544211155b8015610a7357506000600a54115b8015610a8157506000600b54115b610a9d5760405162461bcd60e51b815260040161069f906124b9565b6000610aa860135490565b9050610ab48133610674565b15610b105760405162461bcd60e51b815260206004820152602660248201527f5468652063757272656e74207573657220697320616c726561647920726567696044820152651cdd195c995960d21b606482015260840161069f565b610b1e601480546001019055565b6006546014541115610b7d5760405162461bcd60e51b815260206004820152602260248201527f54686520426c696e6420426f7820726567697374726174696f6e2069732066756044820152611b1b60f21b606482015260840161069f565b600480546002546040516370a0823160e01b8152339381019390935290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bc857600080fd5b505afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0091906122db565b1015610c4e5760405162461bcd60e51b815260206004820181905260248201527f596f757220444d532062616c616e636520697320696e73756666696369656e74604482015260640161069f565b600254600154600480546040516323b872dd60e01b815233928101929092526001600160a01b036101009093048316602483015260448201529116906323b872dd90606401602060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce59190612250565b610d285760405162461bcd60e51b8152602060048201526014602482015273444d53207472616e73666572206661696c75726560601b604482015260640161069f565b6004543360009081526011602052604081208054909190610d4a9084906124df565b9091555050601454600090600e8054600181019091557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018190556000838152600f6020908152604080832084845282529182902080546001600160a01b03191633908117909155825160c0810184529081529081018590529192508101610dd160145490565b815260048054602080840191909152600060408085018290526060948501829052878252601083528082203380845290845291819020865181546001600160a01b0319166001600160a01b0390911617815586840151600182015586820151600282015586860151600382015560808701518186015560a0909601516005909601805460ff1916961515969096179095559154845187815291820192909252928301527f5271b12878d55f1e02b5dfc75fca1e3a6fb769cfa4af16b39a563043ed3ed62c910160405180910390a160019250505090565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610ed381336106ef565b600b5442118015610ee657506000600b54115b610f255760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420656e642074696d6560801b604482015260640161069f565b8183108015610f3f57506101f4610f3c8484612516565b11155b610f7c5760405162461bcd60e51b815260206004820152600e60248201526d696e76616c696420706172616d7360901b604482015260640161069f565b6000610f8760135490565b600554600e549192506000911115610fa157600554610fa5565b600e545b905080841115610fe55760405162461bcd60e51b815260206004820152600b60248201526a1a5b9d985b1a5908195b9960aa1b604482015260640161069f565b6000610ff9610ff360145490565b83611e7c565b9050855b85811161128d576000611011836005611e7c565b61101c9060016124df565b9050600061102f84600e80549050611e7c565b90506000600e828154811061105457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154898352600f825260408084208285528352808420548b8552601084528185206001600160a01b0390911680865293529092206004015491965086925090156110ad575050505061127b565b600e80546110bd90600190612516565b815481106110db57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600e848154811061110757634e487b7160e01b600052603260045260246000fd5b600091825260209091200155600e80548061113257634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590556000611180826001600160a01b0316600760026003811061117957634e487b7160e01b600052603260045260246000fd5b0154611e7c565b61118b9060016124df565b9050600061119882611eec565b6111a387600a6124f7565b6111ad91906124df565b60008b81526010602090815260408083206001600160a01b038881168552908352818420600480820187905581546001600160a01b03198116931692909217815560058101805460ff8116151560ff19909116179055905460119093529083208054949550909391929091611223908490612516565b90915550506013547ff9eb5da9fe47db0d29559fd15349bc82e040cd8b7bc345b43f5436c69979838790604080519182526001600160a01b0387166020830152810184905260600160405180910390a1505050505050505b8061128581612574565b915050610ffd565b50505050505050565b60006112a160135490565b905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156112f457602002820191906000526020600020905b8154815260200190600101908083116112e0575b5050505050905090565b6000805160206125c683398151915261131781336106ef565b610999611f2a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206125c683398151915261136181336106ef565b6000821161139f5760405162461bcd60e51b815260206004820152600b60248201526a0d2dcecc2d8d2c840dac2f60ab1b604482015260640161069f565b60065460408051918252602082018490527ffa7edf0ed5464457ccc093c60f885ed0049e542b1b549b263c738da1260ba637910160405180910390a150600655565b806113eb60135490565b81111561140a5760405162461bcd60e51b815260040161069f90612492565b6002601254141561145d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161069f565b60026012556013548214156114bf57600c544211801561147f57506000600c54115b6114bf5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206f70656e2074696d6560781b604482015260640161069f565b6000828152601060209081526040808320338452825291829020825160c08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460ff1615801560a08301526115775760405162461bcd60e51b815260206004820152601d60248201527f54686520626c696e6420626f7820686173206265656e206f70656e6564000000604482015260640161069f565b60008160800151116115cb5760405162461bcd60e51b815260206004820152601b60248201527f596f7520646964206e6f742077696e206120626c696e6420626f780000000000604482015260640161069f565b600083815260106020908152604080832033808552925291829020600501805460ff19166001908117909155600354608085810151945163731133e960e01b815260048101949094526024840194909452604483019190915260648201929092526002608482015261060f60f31b60a48201526001600160a01b039091169063731133e99060c401600060405180830381600087803b15801561166d57600080fd5b505af1158015611681573d6000803e3d6000fd5b505050506001600d600082825461169891906124df565b909155505060808101516040805185815233602082015280820192909252517fb2503d573131e10a6397a3e33ca37ea97e6fad54098a0f3ea9c79363e15565a09181900360600190a15050600160125550565b6000805160206125c683398151915261170481336106ef565b600082116117245760405162461bcd60e51b815260040161069f906124b9565b600b5460408051918252602082018490527f0315baffde07d16a247f35fc7e4f86332a13df11e80b04f403bc92e440192659910160405180910390a150600b55565b6000805160206125c683398151915261177f81336106ef565b60005b60038110156118025760008382600381106117ad57634e487b7160e01b600052603260045260246000fd5b6020020135116117f05760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081dd95a59da1d60921b604482015260640161069f565b806117fa81612574565b915050611782565b507f25dfb3ca2a8de521615a6e2c6d690d5bef848c94607e310b4387ab8df35515bc6007836040516118359291906123dd565b60405180910390a16106fe600783600361218c565b60008281526020819052604090206001015461186681336106ef565b6106fe8383611d84565b60008261187c60135490565b81111561189b5760405162461bcd60e51b815260040161069f90612492565b505060009182526010602090815260408084206001600160a01b0393909316845291905290206005015460ff1690565b6000826118d760135490565b8111156118f65760405162461bcd60e51b815260040161069f90612492565b505060009182526010602090815260408084206001600160a01b03939093168452919052902060040154151590565b6000805160206125c683398151915261193e81336106ef565b6000821161195e5760405162461bcd60e51b815260040161069f906124b9565b600c5460408051918252602082018490527f28a9731ef93aa031cdb7552134a2a51d68704b2f3a95a474f99d3fd8c5b373c1910160405180910390a150600c55565b6000805160206125c68339815191526119b981336106ef565b600c544211611a0a5760405162461bcd60e51b815260206004820152601a60248201527f6e657874206261746368206166746572206f70656e2074696d65000000000000604482015260640161069f565b611a18601380546001019055565b611a24600e60006121ca565b428711611a685760405162461bcd60e51b8152602060048201526012602482015271696e76616c69642073746172742074696d6560701b604482015260640161069f565b868611611aaa5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420656e642074696d6560801b604482015260640161069f565b858511611aed5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206f70656e2074696d6560781b604482015260640161069f565b60008411611b325760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a5908191b5cc8185b5bdd5b9d60721b604482015260640161069f565b60008311611b745760405162461bcd60e51b815260206004820152600f60248201526e0d2dcecc2d8d2c840c4def040dac2f608b1b604482015260640161069f565b60008211611bba5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c840c2c6c6deeadce840dac2f606b1b604482015260640161069f565b611bc3876108fd565b611bcc866116eb565b611bd585611925565b611bde8461099c565b611be783611bfa565b611bf082611348565b600060145561128d565b6000805160206125c6833981519152611c1381336106ef565b60008211611c515760405162461bcd60e51b815260206004820152600b60248201526a0d2dcecc2d8d2c840dac2f60ab1b604482015260640161069f565b60055460408051918252602082018490527fb572f8a859daba046be4663f97b8dc0046a90f7a8cddc538e2bf5c805ed94f98910160405180910390a150600555565b80546001019055565b611ca6828261131f565b61077d57611cbe816001600160a01b03166014611fa3565b611cc9836020611fa3565b604051602001611cda929190612368565b60408051601f198184030181529082905262461bcd60e51b825261069f9160040161245f565b611d0a828261131f565b61077d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d403390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d8e828261131f565b1561077d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611e325760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161069f565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516020808201859052428284015244606080840191909152434060808401526bffffffffffffffffffffffff1941821b811660a08501523390911b1660b4830152825180830360a801815260c89092019092528051910120600090611ee4838261258f565b949350505050565b6007546000908211611f005750600361066f565b6008548211611f115750600261066f565b6009548211611f225750600161066f565b506001919050565b60015460ff1615611f705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161069f565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611e5f565b60606000611fb28360026124f7565b611fbd9060026124df565b67ffffffffffffffff811115611fe357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561200d576020820181803683370190505b509050600360fc1b8160008151811061203657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061207357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006120978460026124f7565b6120a29060016124df565b90505b6001811115612136576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106120e457634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061210857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361212f8161255d565b90506120a5565b5083156121855760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069f565b9392505050565b82600381019282156121ba579160200282015b828111156121ba57823582559160200191906001019061219f565b506121c69291506121e4565b5090565b508054600082559060005260206000209081019061099991905b5b808211156121c657600081556001016121e5565b80356001600160a01b038116811461066f57600080fd5b600060208284031215612221578081fd5b612185826121f9565b60006060828403121561223b578081fd5b8260608301111561224a578081fd5b50919050565b600060208284031215612261578081fd5b81518015158114612185578182fd5b600060208284031215612281578081fd5b5035919050565b6000806040838503121561229a578081fd5b823591506122aa602084016121f9565b90509250929050565b6000602082840312156122c4578081fd5b81356001600160e01b031981168114612185578182fd5b6000602082840312156122ec578081fd5b5051919050565b6000806040838503121561229a578182fd5b60008060408385031215612317578182fd5b50508035926020909101359150565b60008060008060008060c0878903121561233e578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516123a081601785016020880161252d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123d181602884016020880161252d565b01602801949350505050565b60c08101818460005b60038110156124055781548352602090920191600191820191016123e6565b5050506060836060840137600081529392505050565b6020808252825182820181905260009190848201906040850190845b8181101561245357835183529284019291840191600101612437565b50909695505050505050565b600060208252825180602084015261247e81604085016020870161252d565b601f01601f19169190910160400192915050565b6020808252600d908201526c0d2dcecc2d8d2c840c4c2e8c6d609b1b604082015260600190565b6020808252600c908201526b696e76616c69642074696d6560a01b604082015260600190565b600082198211156124f2576124f26125af565b500190565b6000816000190483118215151615612511576125116125af565b500290565b600082821015612528576125286125af565b500390565b60005b83811015612548578181015183820152602001612530565b83811115612557576000848401525b50505050565b60008161256c5761256c6125af565b506000190190565b6000600019821415612588576125886125af565b5060010190565b6000826125aa57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220b55cda4a9ce69d1a683d955d97899dd12bf8730f55e3914217c2a28bbc380bf564736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 501,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6050,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "recipient",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6053,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "dmsToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2652"
      },
      {
        "astId": 6056,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "dmbToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IDMBToken)5925"
      },
      {
        "astId": 6059,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "dmsAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6062,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "boxMax",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6065,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "accountMax",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6073,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "levelWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 6076,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "startTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6081,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "endTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6086,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "openTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6088,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6091,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "blindboxId",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6097,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "blindboxAccount",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 6104,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "blindboxList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BlindboxData)6048_storage))"
      },
      {
        "astId": 6108,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "balances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "_status",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6312,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "_batchId",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Counter)4226_storage"
      },
      {
        "astId": 6315,
        "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
        "label": "_id",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Counter)4226_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDMBToken)5925": {
        "encoding": "inplace",
        "label": "contract IDMBToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2652": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BlindboxData)6048_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DragonBlindboxBase.BlindboxData)",
        "numberOfBytes": "32",
        "value": "t_struct(BlindboxData)6048_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(BlindboxData)6048_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DragonBlindboxBase.BlindboxData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(BlindboxData)6048_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_struct(BlindboxData)6048_storage": {
        "encoding": "inplace",
        "label": "struct DragonBlindboxBase.BlindboxData",
        "members": [
          {
            "astId": 6037,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6039,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "batch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6041,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "number",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6043,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6045,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6047,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "opened",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Counter)4226_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4225,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DragonBlindbox.sol:DragonBlindbox",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}