{
  "address": "0x3a70F8292F0053C97c4B394e2fC98389BdE765fb",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "jobId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "birthTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "cooldownTime",
          "type": "uint64"
        }
      ],
      "name": "Birth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attrId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "DragonAttributeLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attack",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defense",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lifeForce",
          "type": "uint256"
        }
      ],
      "name": "DragonAttributesLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "DragonBreed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "geneDomi",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "geneRece",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "matronId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sireId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stage",
          "type": "uint16"
        }
      ],
      "name": "DragonMetaLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "skillId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLevel",
          "type": "uint256"
        }
      ],
      "name": "DragonSkillLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "horn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hornLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ear",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wing",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wingLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tailLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "talent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "talentLevel",
          "type": "uint256"
        }
      ],
      "name": "DragonSkillsLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "addDragonBreedCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boneCountMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "breedCountMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cooldowns",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_job",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "createDragonEggs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragonAttributes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defense",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lifeForce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragonBoneCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragonBreedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "dragonChildren",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragonSkills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "horn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hornLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wing",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wingLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tailLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "talent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "talentLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragons",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "job",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "birthTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "cooldownTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "geneDomi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "geneRece",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "matronId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sireId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "stage",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expirationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attrId",
          "type": "uint256"
        }
      ],
      "name": "getDragonAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDragonJob",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "job",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "getDragonSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "skill",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_geneDomi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_geneRece",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_matronId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sireId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_stage",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "attack",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defense",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifeForce",
              "type": "uint256"
            }
          ],
          "internalType": "struct DragonMetadata.Attribute",
          "name": "_attr",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "horn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wing",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tail",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "talent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DragonMetadata.Skill",
          "name": "_skill",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "hatchDragonEggs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "setBoneCountMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "setBreedCountMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[2]",
          "name": "_times",
          "type": "uint64[2]"
        }
      ],
      "name": "setCooldowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attrId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "setDragonAttribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "setDragonSkill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setExpirationTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "setMaxLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "verifyAdmin",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67fb11227b30d1300dd5e3b302e9e82d45e8865deab107b415c15ff2e976aad7",
  "receipt": {
    "to": null,
    "from": "0x01f6b08CAD9ACeB1c2D945863f66336dA8009518",
    "contractAddress": "0x3a70F8292F0053C97c4B394e2fC98389BdE765fb",
    "transactionIndex": 211,
    "gasUsed": "4807387",
    "logsBloom": "0x
    "blockHash": "0xcd407e01e731b826720e27a847a11d6880ae9ab331c0135577b56c22116fde8e",
    "transactionHash": "0x67fb11227b30d1300dd5e3b302e9e82d45e8865deab107b415c15ff2e976aad7",
    "logs": [
      {
        "transactionIndex": 211,
        "blockNumber": 11791984,
        "transactionHash": "0x67fb11227b30d1300dd5e3b302e9e82d45e8865deab107b415c15ff2e976aad7",
        "address": "0x3a70F8292F0053C97c4B394e2fC98389BdE765fb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001f6b08cad9aceb1c2d945863f66336da8009518"
        ],
        "data": "0x",
        "logIndex": 472,
        "blockHash": "0xcd407e01e731b826720e27a847a11d6880ae9ab331c0135577b56c22116fde8e"
      },
      {
        "transactionIndex": 211,
        "blockNumber": 11791984,
        "transactionHash": "0x67fb11227b30d1300dd5e3b302e9e82d45e8865deab107b415c15ff2e976aad7",
        "address": "0x3a70F8292F0053C97c4B394e2fC98389BdE765fb",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001f6b08cad9aceb1c2d945863f66336da8009518"
        ],
        "data": "0x",
        "logIndex": 473,
        "blockHash": "0xcd407e01e731b826720e27a847a11d6880ae9ab331c0135577b56c22116fde8e"
      }
    ],
    "blockNumber": 11791984,
    "cumulativeGasUsed": "29266535",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "afe0ad14aa47fc91e2347f17b7e6b2cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"jobId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"birthTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"cooldownTime\",\"type\":\"uint64\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attrId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DragonAttributeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lifeForce\",\"type\":\"uint256\"}],\"name\":\"DragonAttributesLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DragonBreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"geneDomi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"geneRece\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stage\",\"type\":\"uint16\"}],\"name\":\"DragonMetaLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"DragonSkillLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"horn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hornLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ear\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wingLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tailLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"talent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"talentLevel\",\"type\":\"uint256\"}],\"name\":\"DragonSkillsLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"addDragonBreedCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boneCountMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedCountMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_job\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"createDragonEggs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonAttributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifeForce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonBoneCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonBreedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"dragonChildren\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonSkills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"horn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hornLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wingLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tailLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"talent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"talentLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragons\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"birthTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cooldownTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"geneDomi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"geneRece\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"stage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attrId\",\"type\":\"uint256\"}],\"name\":\"getDragonAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDragonJob\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"getDragonSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"skill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_geneDomi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_geneRece\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_stage\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifeForce\",\"type\":\"uint256\"}],\"internalType\":\"struct DragonMetadata.Attribute\",\"name\":\"_attr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"horn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"talent\",\"type\":\"uint256\"}],\"internalType\":\"struct DragonMetadata.Skill\",\"name\":\"_skill\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"hatchDragonEggs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setBoneCountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setBreedCountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[2]\",\"name\":\"_times\",\"type\":\"uint64[2]\"}],\"name\":\"setCooldowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attrId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"setDragonAttribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"setDragonSkill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"verifyAdmin\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonMainlandToken.sol\":\"DragonMainlandToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract Adminable is Context {\\n    address private _admin;\\n\\n    event AdminTransferred(\\n        address indexed previousAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Adminable: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function renounceAdmin() public virtual onlyAdmin {\\n        _setAdmin(address(0));\\n    }\\n\\n    function transferAdmin(address newAdmin) public virtual onlyAdmin {\\n        require(\\n            newAdmin != address(0),\\n            \\\"Adminable: new admin is the zero address\\\"\\n        );\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x006ba997b61eddcd4bac7114fa7e3755d0a1d49be74c92bae9e7f7caf685dcd0\",\"license\":\"MIT\"},\"contracts/DragonMainlandToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./Adminable.sol\\\";\\nimport \\\"./DragonMetadata.sol\\\";\\n\\n/**\\n * dragon mainland token contract\\n * NFT ERC721\\n */\\n\\n// dragon base\\ncontract DragonBase is DragonMetadata, Ownable {\\n    event Birth(\\n        address indexed owner,\\n        uint256 tokenId,\\n        uint8 jobId,\\n        uint64 birthTime,\\n        uint64 cooldownTime\\n    );\\n\\n    event DragonMetaLog(\\n        uint256 indexed tokenId,\\n        uint256 geneDomi,\\n        uint256 geneRece,\\n        uint256 matronId,\\n        uint256 sireId,\\n        uint16 stage\\n    );\\n\\n    event DragonAttributesLog(\\n        uint256 indexed tokenId,\\n        uint256 health,\\n        uint256 attack,\\n        uint256 defense,\\n        uint256 speed,\\n        uint256 lifeForce\\n    );\\n\\n    event DragonAttributeLog(\\n        uint256 indexed tokenId,\\n        uint256 attrId,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event DragonSkillsLog(\\n        uint256 indexed tokenId,\\n        uint256 horn,\\n        uint256 hornLevel,\\n        uint256 ear,\\n        uint256 earLevel,\\n        uint256 wing,\\n        uint256 wingLevel,\\n        uint256 tail,\\n        uint256 tailLevel,\\n        uint256 talent,\\n        uint256 talentLevel\\n    );\\n\\n    event DragonSkillLog(\\n        uint256 indexed tokenId,\\n        uint256 skillId,\\n        uint256 oldLevel,\\n        uint256 newLevel\\n    );\\n\\n    event DragonBreed(uint256 indexed tokenId, uint256 count);\\n\\n    struct Metadata {\\n        uint8 job;\\n        uint64 birthTime;\\n        uint64 cooldownTime;\\n        uint256 geneDomi;\\n        uint256 geneRece;\\n        uint256 matronId;\\n        uint256 sireId;\\n        uint16 stage;\\n    }\\n\\n    // cooldown time\\n    uint64[2] public cooldowns = [uint64(3 days), uint64(7 days)];\\n    // skill max level\\n    uint256 public maxLevel = 4;\\n    // sign expiration time\\n    uint256 public expirationTime = 600;\\n    // dragon breed count max\\n    uint256 public breedCountMax = 7;\\n    // dragon bone count max\\n    uint256 public boneCountMax = 3;\\n\\n    // dragon.tokenId => dragon metadata\\n    mapping(uint256 => Metadata) public dragons;\\n    // dragon.tokenId => children.tokenId\\n    mapping(uint256 => uint256[]) internal dragonChildrens;\\n    // dragon.tokenId => dragon attribute\\n    mapping(uint256 => Attribute) public dragonAttributes;\\n    // dragon.tokenId => dragon skill\\n    mapping(uint256 => Skills) public dragonSkills;\\n    // dragon.breedCount => count\\n    mapping(uint256 => uint256) public dragonBreedCount;\\n    // dragon.boneCount => count\\n    mapping(uint256 => uint256) public dragonBoneCount;\\n\\n    function setCooldowns(uint64[2] memory _times) external onlyOwner {\\n        cooldowns = _times;\\n    }\\n\\n    function setMaxLevel(uint256 _level) external onlyOwner {\\n        maxLevel = _level;\\n    }\\n\\n    function setExpirationTime(uint256 _time) external onlyOwner {\\n        expirationTime = _time;\\n    }\\n\\n    function setBreedCountMax(uint256 _count) external onlyOwner {\\n        breedCountMax = _count;\\n    }\\n\\n    function setBoneCountMax(uint256 _count) external onlyOwner {\\n        boneCountMax = _count;\\n    }\\n\\n    // get dragon Children list\\n    function dragonChildren(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return dragonChildrens[_tokenId];\\n    }\\n}\\n\\n// dragon mainland token ERC721\\ncontract DragonMainlandToken is\\n    ERC721,\\n    ERC721URIStorage,\\n    Pausable,\\n    Ownable,\\n    ERC721Burnable,\\n    ReentrancyGuard,\\n    Adminable,\\n    DragonBase\\n{\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    constructor() ERC721(\\\"Dragon Mainland Token\\\", \\\"DMT\\\") {}\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://ipfs.io/ipfs/\\\";\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    modifier hasTokenId(uint256 _tokenId) {\\n        require(_exists(_tokenId) == true, \\\"tokenId is not existent\\\");\\n        _;\\n    }\\n\\n    modifier isExpirationTime(uint256 _timestamp) {\\n        require(\\n            _timestamp + expirationTime >= block.timestamp,\\n            \\\"expiration time\\\"\\n        );\\n        _;\\n    }\\n\\n    function verifyAdmin(string memory data, bytes memory _sign) public view {\\n        bytes32 message = keccak256(abi.encodePacked(data));\\n        bytes32 ethSignedHash = message.toEthSignedMessageHash();\\n        require(ethSignedHash.recover(_sign) == admin(), \\\"sign message fault\\\");\\n    }\\n\\n    function getDragonJob(uint256 _tokenId) external view returns (uint8 job) {\\n        Metadata memory _meta = dragons[_tokenId];\\n        job = _meta.job;\\n    }\\n\\n    // create dragon eggs\\n    function createDragonEggs(\\n        uint8 _job,\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 _timestamp,\\n        bytes memory _sign\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        isExpirationTime(_timestamp)\\n        returns (bool)\\n    {\\n        require(_exists(_tokenId) == false, \\\"tokenId is exist\\\");\\n        require(_job >= 1 && _job <= 5, \\\"invalid job\\\");\\n        string memory message = string(\\n            abi.encodePacked(\\n                _tokenId.toString(),\\n                uint256(_job).toString(),\\n                _timestamp.toString()\\n            )\\n        );\\n        verifyAdmin(message, _sign);\\n\\n        uint64 cooldown = _tokenId <= 10000 ? cooldowns[1] : cooldowns[0];\\n        dragons[_tokenId] = Metadata({\\n            job: _job,\\n            birthTime: uint64(block.timestamp),\\n            cooldownTime: uint64(block.timestamp) + cooldown,\\n            geneDomi: 0,\\n            geneRece: 0,\\n            matronId: 0,\\n            sireId: 0,\\n            stage: 0\\n        });\\n        emit Birth(\\n            _owner,\\n            _tokenId,\\n            _job,\\n            uint64(block.timestamp),\\n            uint64(block.timestamp) + cooldown\\n        );\\n        _safeMint(_owner, _tokenId);\\n        return true;\\n    }\\n\\n    function _hatchMessage(\\n        uint256 _tokenId,\\n        uint256 _geneDomi,\\n        uint256 _geneRece,\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint16 _stage,\\n        Attribute memory _attr,\\n        Skill memory _skill,\\n        uint256 _timestamp\\n    ) private pure returns (string memory) {\\n        string memory message = string(\\n            abi.encodePacked(\\n                _tokenId.toString(),\\n                _geneDomi.toString(),\\n                _geneRece.toString(),\\n                _matronId.toString(),\\n                _sireId.toString(),\\n                uint256(_stage).toString()\\n            )\\n        );\\n        message = string(\\n            abi.encodePacked(\\n                message,\\n                _attr.health.toString(),\\n                _attr.attack.toString(),\\n                _attr.defense.toString(),\\n                _attr.speed.toString(),\\n                _attr.lifeForce.toString()\\n            )\\n        );\\n        message = string(\\n            abi.encodePacked(\\n                message,\\n                _skill.horn.toString(),\\n                _skill.ear.toString(),\\n                _skill.wing.toString(),\\n                _skill.tail.toString(),\\n                _skill.talent.toString(),\\n                _timestamp.toString()\\n            )\\n        );\\n        return message;\\n    }\\n\\n    // hatch dragon eggs\\n    function hatchDragonEggs(\\n        uint256 _tokenId,\\n        uint256 _geneDomi,\\n        uint256 _geneRece,\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint16 _stage,\\n        Attribute memory _attr,\\n        Skill memory _skill,\\n        string memory _uri,\\n        uint256 _timestamp,\\n        bytes memory _sign\\n    ) external whenNotPaused nonReentrant returns (bool) {\\n        require(_exists(_tokenId) == true, \\\"tokenId is not existent\\\");\\n        require(\\n            _timestamp + expirationTime >= block.timestamp,\\n            \\\"expiration time\\\"\\n        );\\n        Metadata storage _dragon = dragons[_tokenId];\\n        require(\\n            _dragon.stage == 0 && _stage > _dragon.stage,\\n            \\\"invalid dragon stage\\\"\\n        );\\n        require(block.timestamp >= _dragon.cooldownTime, \\\"dragon is cooldown\\\");\\n        if (_tokenId > 10000) {\\n            require(\\n                _matronId > 0 && _sireId > 0 && _matronId != _sireId,\\n                \\\"invalid matronId or sireId\\\"\\n            );\\n        } else {\\n            require(\\n                _matronId == 0 && _sireId == 0,\\n                \\\"invalid matronId or sireId\\\"\\n            );\\n        }\\n\\n        verifyAdmin(\\n            _hatchMessage(\\n                _tokenId,\\n                _geneDomi,\\n                _geneRece,\\n                _matronId,\\n                _sireId,\\n                _stage,\\n                _attr,\\n                _skill,\\n                _timestamp\\n            ),\\n            _sign\\n        );\\n\\n        _setDragonMeta(\\n            _dragon,\\n            _tokenId,\\n            _geneDomi,\\n            _geneRece,\\n            _matronId,\\n            _sireId,\\n            _stage\\n        );\\n        dragonAttributes[_tokenId] = _attr;\\n        emit DragonAttributesLog(\\n            _tokenId,\\n            _attr.health,\\n            _attr.attack,\\n            _attr.defense,\\n            _attr.speed,\\n            _attr.lifeForce\\n        );\\n\\n        dragonSkills[_tokenId] = Skills(\\n            _skill.horn,\\n            1,\\n            _skill.ear,\\n            1,\\n            _skill.wing,\\n            1,\\n            _skill.tail,\\n            1,\\n            _skill.talent,\\n            1\\n        );\\n        emit DragonSkillsLog(\\n            _tokenId,\\n            _skill.horn,\\n            1,\\n            _skill.ear,\\n            1,\\n            _skill.wing,\\n            1,\\n            _skill.tail,\\n            1,\\n            _skill.talent,\\n            1\\n        );\\n\\n        _setTokenURI(_tokenId, _uri);\\n        if (_matronId > 0) {\\n            dragonChildrens[_matronId].push(_tokenId);\\n        }\\n        if (_sireId > 0) {\\n            dragonChildrens[_sireId].push(_tokenId);\\n        }\\n        return true;\\n    }\\n\\n    // dragon set metadata\\n    function _setDragonMeta(\\n        Metadata storage _dragon,\\n        uint256 _tokenId,\\n        uint256 _geneDomi,\\n        uint256 _geneRece,\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint16 _stage\\n    ) private {\\n        _dragon.geneDomi = _geneDomi;\\n        _dragon.geneRece = _geneRece;\\n        _dragon.matronId = _matronId;\\n        _dragon.sireId = _sireId;\\n        _dragon.stage = _tokenId <= 10000 ? 1 : _stage;\\n        _dragon.cooldownTime = 0;\\n        emit DragonMetaLog(\\n            _tokenId,\\n            _geneDomi,\\n            _geneRece,\\n            _matronId,\\n            _sireId,\\n            _stage\\n        );\\n    }\\n\\n    function getDragonAttribute(uint256 _tokenId, uint256 _attrId)\\n        public\\n        view\\n        returns (uint256 attr)\\n    {\\n        Attribute memory _attr = dragonAttributes[_tokenId];\\n        AttrType attr_id = AttrType(_attrId);\\n        require(uint256(attr_id) > 0, \\\"invalid attrId\\\");\\n        if (attr_id == AttrType.Health) {\\n            attr = _attr.health;\\n        } else if (attr_id == AttrType.Attack) {\\n            attr = _attr.attack;\\n        } else if (attr_id == AttrType.Defense) {\\n            attr = _attr.defense;\\n        } else if (attr_id == AttrType.Speed) {\\n            attr = _attr.speed;\\n        } else if (attr_id == AttrType.LifeForce) {\\n            attr = _attr.lifeForce;\\n        }\\n    }\\n\\n    function getDragonSkill(uint256 _tokenId, uint256 _skillId)\\n        public\\n        view\\n        returns (uint256 skill, uint256 level)\\n    {\\n        Skills memory _skill = dragonSkills[_tokenId];\\n        SkillType skill_id = SkillType(_skillId);\\n        require(uint256(skill_id) > 0, \\\"invalid skillId\\\");\\n        if (skill_id == SkillType.Horn) {\\n            skill = _skill.horn;\\n            level = _skill.hornLevel;\\n        } else if (skill_id == SkillType.Ear) {\\n            skill = _skill.ear;\\n            level = _skill.earLevel;\\n        } else if (skill_id == SkillType.Wing) {\\n            skill = _skill.wing;\\n            level = _skill.wingLevel;\\n        } else if (skill_id == SkillType.Tail) {\\n            skill = _skill.tail;\\n            level = _skill.tailLevel;\\n        } else if (skill_id == SkillType.Talent) {\\n            skill = _skill.talent;\\n            level = _skill.talentLevel;\\n        }\\n    }\\n\\n    // dragon attribute update\\n    function setDragonAttribute(\\n        uint256 _tokenId,\\n        uint256 _attrId,\\n        uint256 _value,\\n        uint256 _timestamp,\\n        bytes memory _sign\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        hasTokenId(_tokenId)\\n        isExpirationTime(_timestamp)\\n        returns (bool)\\n    {\\n        AttrType attr_id = AttrType(_attrId);\\n        require(uint256(attr_id) > 0, \\\"invalid attrId\\\");\\n        uint256 curr = getDragonAttribute(_tokenId, _attrId);\\n        require(_value > curr, \\\"invalid value\\\");\\n        require(\\n            dragonBoneCount[_tokenId] < boneCountMax,\\n            \\\"invalid boneCountMax\\\"\\n        );\\n\\n        string memory message = string(\\n            abi.encodePacked(\\n                _tokenId.toString(),\\n                _attrId.toString(),\\n                _value.toString(),\\n                _timestamp.toString()\\n            )\\n        );\\n        verifyAdmin(message, _sign);\\n\\n        Attribute storage _attr = dragonAttributes[_tokenId];\\n        if (attr_id == AttrType.Health) {\\n            _attr.health = _value;\\n        } else if (attr_id == AttrType.Attack) {\\n            _attr.attack = _value;\\n        } else if (attr_id == AttrType.Defense) {\\n            _attr.defense = _value;\\n        } else if (attr_id == AttrType.Speed) {\\n            _attr.speed = _value;\\n        } else if (attr_id == AttrType.LifeForce) {\\n            _attr.lifeForce = _value;\\n        }\\n        dragonBoneCount[_tokenId] += 1;\\n        emit DragonAttributeLog(_tokenId, _attrId, curr, _value);\\n        return true;\\n    }\\n\\n    // dragon skill update\\n    function setDragonSkill(\\n        uint256 _tokenId,\\n        uint256 _skillId,\\n        uint256 _level,\\n        uint256 _timestamp,\\n        bytes memory _sign\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        hasTokenId(_tokenId)\\n        isExpirationTime(_timestamp)\\n        returns (bool)\\n    {\\n        SkillType skill_id = SkillType(_skillId);\\n        require(uint256(skill_id) > 0, \\\"invalid skillId\\\");\\n        if (skill_id == SkillType.Talent) {\\n            require(_level > 0 && _level <= maxLevel + 1, \\\"invalid value\\\");\\n        } else {\\n            require(_level > 0 && _level <= maxLevel, \\\"invalid value\\\");\\n        }\\n\\n        string memory message = string(\\n            abi.encodePacked(\\n                _tokenId.toString(),\\n                _skillId.toString(),\\n                _level.toString(),\\n                _timestamp.toString()\\n            )\\n        );\\n        verifyAdmin(message, _sign);\\n\\n        uint256 _oldSkill;\\n        uint256 _oldLevel;\\n        (_oldSkill, _oldLevel) = getDragonSkill(_tokenId, _skillId);\\n        require(_oldLevel < _level, \\\"invalid level\\\");\\n\\n        Skills storage _skill = dragonSkills[_tokenId];\\n        if (skill_id == SkillType.Horn) {\\n            _skill.hornLevel = _level;\\n        } else if (skill_id == SkillType.Ear) {\\n            _skill.earLevel = _level;\\n        } else if (skill_id == SkillType.Wing) {\\n            _skill.wingLevel = _level;\\n        } else if (skill_id == SkillType.Tail) {\\n            _skill.tailLevel = _level;\\n        } else if (skill_id == SkillType.Talent) {\\n            _skill.talentLevel = _level;\\n        }\\n\\n        emit DragonSkillLog(_tokenId, _skillId, _oldLevel, _level);\\n        return true;\\n    }\\n\\n    // add dragon breed count\\n    function addDragonBreedCount(\\n        uint256 _tokenId,\\n        uint256 _timestamp,\\n        bytes memory _sign\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        hasTokenId(_tokenId)\\n        isExpirationTime(_timestamp)\\n        returns (bool)\\n    {\\n        string memory message = string(\\n            abi.encodePacked(_tokenId.toString(), _timestamp.toString())\\n        );\\n        verifyAdmin(message, _sign);\\n\\n        uint256 _count = dragonBreedCount[_tokenId] + 1;\\n        require(_count <= breedCountMax, \\\"invalid breed count\\\");\\n        dragonBreedCount[_tokenId] = _count;\\n        emit DragonBreed(_tokenId, _count);\\n        return true;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        external\\n        onlyAdmin\\n        nonReentrant\\n    {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n}\\n\",\"keccak256\":\"0xb4611db5158c071a808814d2bf87fddd4c30d5082ecad985c91872b491751ab0\",\"license\":\"MIT\"},\"contracts/DragonMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// dragon metadata\\ncontract DragonMetadata {\\n    // dragon job\\n    enum JobType {\\n        None,\\n        Water,\\n        Fire,\\n        Rock,\\n        Storm,\\n        Thunder\\n    }\\n\\n    // dragon attributes\\n    enum AttrType {\\n        None,\\n        Health,\\n        Attack,\\n        Defense,\\n        Speed,\\n        LifeForce\\n    }\\n\\n    // dragon skill\\n    enum SkillType {\\n        None,\\n        Horn,\\n        Ear,\\n        Wing,\\n        Tail,\\n        Talent\\n    }\\n\\n    // dragon attribute 5\\n    struct Attribute {\\n        uint256 health;\\n        uint256 attack;\\n        uint256 defense;\\n        uint256 speed;\\n        uint256 lifeForce;\\n    }\\n\\n    // dragon skill 5\\n    struct Skill {\\n        uint256 horn;\\n        uint256 ear;\\n        uint256 wing;\\n        uint256 tail;\\n        uint256 talent;\\n    }\\n\\n    // dragon skills level 5\\n    struct Skills {\\n        uint256 horn;\\n        uint256 hornLevel;\\n        uint256 ear;\\n        uint256 earLevel;\\n        uint256 wing;\\n        uint256 wingLevel;\\n        uint256 tail;\\n        uint256 tailLevel;\\n        uint256 talent;\\n        uint256 talentLevel;\\n    }\\n}\\n\",\"keccak256\":\"0x0b30600586bde640a1d6f9ebe91b89d8a8ee894c0a17b389a0a4aa4767f84044\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526203f480608090815262093a8060a0526200002490600a90600262000198565b506004600b55610258600c556007600d556003600e553480156200004757600080fd5b50604080518082018252601581527f447261676f6e204d61696e6c616e6420546f6b656e000000000000000000000060208083019182528351808501909452600384526211135560ea1b908401528151919291620000a89160009162000244565b508051620000be90600190602084019062000244565b50506007805460ff1916905550620000d633620000ec565b6001600855620000e63362000146565b62000315565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b600183019183908215620002325791602002820160005b83821115620001fb57835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302620001af565b8015620002305782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620001fb565b505b5062000240929150620002c1565b5090565b8280546200025290620002d8565b90600052602060002090601f01602090048101928262000276576000855562000232565b82601f106200029157805160ff191683800117855562000232565b8280016001018555821562000232579182015b8281111562000232578251825591602001919060010190620002a4565b5b80821115620002405760008155600101620002c2565b600281046001821680620002ed57607f821691505b602082108114156200030f57634e487b7160e01b600052602260045260246000fd5b50919050565b61520480620003256000396000f3fe608060405234801561001057600080fd5b506004361061032b5760003560e01c80638456cb59116101b2578063c87b56dd116100f9578063e8fa5b9b116100a2578063f2fde38b1161007c578063f2fde38b14610913578063f851a44014610926578063f98f537014610937578063fe123c161461094a5761032b565b8063e8fa5b9b146108b1578063e985e9c5146108c4578063ed88d4b0146109005761032b565b8063d7e3285d116100d3578063d7e3285d1461088c578063da284dcc14610895578063e4d5998c1461089e5761032b565b8063c87b56dd146107b8578063cc06c359146107cb578063d2a59d69146107d45761032b565b80639adf40d91161015b578063a22cb46511610135578063a22cb4651461077f578063b88d4fde14610792578063c0cc365d146107a55761032b565b80639adf40d9146106425780639bde96d0146106ee5780639d6fac6f146107535761032b565b80638dd775ce1161018c5780638dd775ce1461057c5780638ee772e81461058f57806395d89b411461063a5761032b565b80638456cb59146105555780638bad0c0a1461055d5780638da5cb5b146105655761032b565b806342966c681161027657806367bd7c4b1161021f57806375829def116101f957806375829def1461050f5780637e94bdf21461052257806383016207146105425761032b565b806367bd7c4b146104e157806370a08231146104f4578063715018a6146105075761032b565b80635c975abb116102505780635c975abb146104a35780636352211e146104ae57806366fd3d8a146104c15761032b565b806342966c681461044f5780634493c9571461046257806344af0c97146104905761032b565b8063162094c4116102d8578063344f1ba5116102b2578063344f1ba5146104215780633f4ba83a1461043457806342842e0e1461043c5761032b565b8063162094c4146103d357806323b872dd146103e65780632464b930146103f95761032b565b806308a4772d1161030957806308a4772d14610398578063095ea7b3146103ab5780630d37cce9146103c05761032b565b806301ffc9a71461033057806306fdde0314610358578063081812fc1461036d575b600080fd5b61034361033e366004614aa1565b610953565b60405190151581526020015b60405180910390f35b6103606109f2565b60405161034f9190615036565b61038061037b366004614b3a565b610a84565b6040516001600160a01b03909116815260200161034f565b6103436103a6366004614d36565b610b1e565b6103be6103b93660046149fc565b610f02565b005b6103be6103ce366004614ad9565b611034565b6103be6103e1366004614b52565b61113b565b6103be6103f4366004614921565b61120b565b61040c610407366004614b8d565b611293565b6040805192835260208301919091520161034f565b6103be61042f366004614b3a565b6114dc565b6103be611541565b6103be61044a366004614921565b6115ab565b6103be61045d366004614b3a565b6115c6565b610482610470366004614b3a565b60136020526000908152604090205481565b60405190815260200161034f565b6103be61049e366004614b3a565b61164d565b60075460ff16610343565b6103806104bc366004614b3a565b6116b2565b6104d46104cf366004614b3a565b61173d565b60405161034f9190614ff2565b6103436104ef366004614bfc565b61179f565b6104826105023660046148d5565b611c8e565b6103be611d28565b6103be61051d3660046148d5565b611d92565b610482610530366004614b3a565b60146020526000908152604090205481565b610343610550366004614c5e565b611e7c565b6103be61246a565b6103be6124d2565b61038060075461010090046001600160a01b031690565b61034361058a366004614bae565b612541565b61062861059d366004614b3a565b6000908152600f602090815260409182902082516101008082018552825460ff811680845267ffffffffffffffff9282048316958401959095526901000000000000000000900416938101939093526001810154606084015260028101546080840152600381015460a0840152600481015460c08401526005015461ffff1660e09092019190915290565b60405160ff909116815260200161034f565b6103606127b9565b6106a4610650366004614b3a565b6012602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400161034f565b61072b6106fc366004614b3a565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161034f565b610766610761366004614b3a565b6127c8565b60405167ffffffffffffffff909116815260200161034f565b6103be61078d3660046149c2565b6127fc565b6103be6107a036600461495c565b6128ce565b6103be6107b3366004614b3a565b612956565b6103606107c6366004614b3a565b6129bb565b610482600b5481565b61083b6107e2366004614b3a565b600f6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff85169567ffffffffffffffff610100870481169669010000000000000000009004169493929161ffff1688565b6040805160ff99909916895267ffffffffffffffff97881660208a015295909616948701949094526060860192909252608085015260a084015260c083015261ffff1660e08201526101000161034f565b610482600e5481565b610482600c5481565b6104826108ac366004614b8d565b6129c6565b6103436108bf366004614bfc565b612ba5565b6103436108d23660046148ef565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103be61090e366004614b3a565b61302a565b6103be6109213660046148d5565b61308f565b6009546001600160a01b0316610380565b6103be610945366004614a25565b613174565b610482600d5481565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806109b657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b606060008054610a019061510c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2d9061510c565b8015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b025760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610b2c60075460ff1690565b15610b6c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415610bbf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b6002600855600c5483904290610bd5908361507a565b1015610c155760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b6000868152600260205260409020546001600160a01b031615610c7a5760405162461bcd60e51b815260206004820152601060248201527f746f6b656e4964206973206578697374000000000000000000000000000000006044820152606401610af9565b60018760ff1610158015610c92575060058760ff1611155b610cde5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206a6f620000000000000000000000000000000000000000006044820152606401610af9565b6000610ce9876131e5565b610cf58960ff166131e5565b610cfe876131e5565b604051602001610d1093929190614e0b565b6040516020818303038152906040529050610d2b8185611034565b6000612710881115610d4957600a5467ffffffffffffffff16610d63565b600a5468010000000000000000900467ffffffffffffffff165b90506040518061010001604052808a60ff1681526020014267ffffffffffffffff1681526020018242610d969190615092565b67ffffffffffffffff90811682526000602080840182905260408085018390526060808601849052608080870185905260a09687018590528f8552600f84529382902087518154948901519389015160ff1990951660ff9091161768ffffffffffffffff001916610100938716939093029290921770ffffffffffffffff0000000000000000001916690100000000000000000093909516929092029390931783558401516001830155830151600282015590820151600382015560c0820151600482015560e0909101516005909101805461ffff191661ffff9092169190911790556001600160a01b0387167ff5b0ebef7c903462e7d748e902b3c855dcbf00967b71593a464617b722b0fc89898b42610eb18682615092565b6040805194855260ff93909316602085015267ffffffffffffffff91821684840152166060830152519081900360800190a2610eed878961333c565b60019350505050600160085595945050505050565b6000610f0d826116b2565b9050806001600160a01b0316836001600160a01b03161415610f975760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610af9565b336001600160a01b0382161480610fb35750610fb381336108d2565b6110255760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610af9565b61102f8383613356565b505050565b6000826040516020016110479190614dc0565b60405160208183030381529060405280519060200120905060006110b8826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506110cc6009546001600160a01b031690565b6001600160a01b03166110df82856133c4565b6001600160a01b0316146111355760405162461bcd60e51b815260206004820152601260248201527f7369676e206d657373616765206661756c7400000000000000000000000000006044820152606401610af9565b50505050565b6009546001600160a01b031633146111a05760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b600260085414156111f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085561120282826133e8565b50506001600855565b611216335b82613491565b6112885760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610af9565b61102f838383613584565b600080600060126000868152602001908152602001600020604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050600084600581111561133f57634e487b7160e01b600052602160045260246000fd5b9050600081600581111561136357634e487b7160e01b600052602160045260246000fd5b116113b05760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420736b696c6c496400000000000000000000000000000000006044820152606401610af9565b60018160058111156113d257634e487b7160e01b600052602160045260246000fd5b14156113e9578151602083015190945092506114d3565b600281600581111561140b57634e487b7160e01b600052602160045260246000fd5b14156114245781604001519350816060015192506114d3565b600381600581111561144657634e487b7160e01b600052602160045260246000fd5b141561145f57816080015193508160a0015192506114d3565b600481600581111561148157634e487b7160e01b600052602160045260246000fd5b141561149a578160c0015193508160e0015192506114d3565b60058160058111156114bc57634e487b7160e01b600052602160045260246000fd5b14156114d357816101000151935081610120015192505b50509250929050565b6007546001600160a01b0361010090910416331461153c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600b55565b6007546001600160a01b036101009091041633146115a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a961375c565b565b61102f838383604051806020016040528060008152506128ce565b6115cf33611210565b6116415760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f766564000000000000000000000000000000006064820152608401610af9565b61164a816137f8565b50565b6007546001600160a01b036101009091041633146116ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600d55565b6000818152600260205260408120546001600160a01b0316806109ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610af9565b60008181526010602090815260409182902080548351818402810184019094528084526060939283018282801561179357602002820191906000526020600020905b81548152602001906001019080831161177f575b50505050509050919050565b60006117ad60075460ff1690565b156117ed5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b600260085414156118405760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085585611867816000908152600260205260409020546001600160a01b0316151590565b15156001146118b85760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c54826118c8919061507a565b10156119085760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b600087600581111561192a57634e487b7160e01b600052602160045260246000fd5b9050600081600581111561194e57634e487b7160e01b600052602160045260246000fd5b1161199b5760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420736b696c6c496400000000000000000000000000000000006044820152606401610af9565b60058160058111156119bd57634e487b7160e01b600052602160045260246000fd5b1415611a21576000871180156119e05750600b546119dc90600161507a565b8711155b611a1c5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b611a6f565b600087118015611a335750600b548711155b611a6f5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b6000611a7a8a6131e5565b611a838a6131e5565b611a8c8a6131e5565b611a958a6131e5565b604051602001611aa89493929190614e4e565b6040516020818303038152906040529050611ac38187611034565b600080611ad08c8c611293565b9092509050898110611b245760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206c6576656c000000000000000000000000000000000000006044820152606401610af9565b60008c81526012602052604090206001856005811115611b5457634e487b7160e01b600052602160045260246000fd5b1415611b6657600181018b9055611c32565b6002856005811115611b8857634e487b7160e01b600052602160045260246000fd5b1415611b9a57600381018b9055611c32565b6003856005811115611bbc57634e487b7160e01b600052602160045260246000fd5b1415611bce57600581018b9055611c32565b6004856005811115611bf057634e487b7160e01b600052602160045260246000fd5b1415611c0257600781018b9055611c32565b6005856005811115611c2457634e487b7160e01b600052602160045260246000fd5b1415611c3257600981018b90555b604080518d8152602081018490529081018c90528d907fdc94a3a746ac126f3efad3c0eff1cbeab15ead419197ceb55cec68ccd9ff59829060600160405180910390a26001975050505050505050600160085595945050505050565b60006001600160a01b038216611d0c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610af9565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03610100909104163314611d885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a96000613801565b6009546001600160a01b03163314611df75760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b6001600160a01b038116611e735760405162461bcd60e51b815260206004820152602860248201527f41646d696e61626c653a206e65772061646d696e20697320746865207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152608401610af9565b61164a81613872565b6000611e8a60075460ff1690565b15611eca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415611f1d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b6002600855611f438c6000908152600260205260409020546001600160a01b0316151590565b1515600114611f945760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b42600c5484611fa3919061507a565b1015611fe35760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b60008c8152600f60205260409020600581015461ffff161580156120125750600581015461ffff908116908916115b61205e5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420647261676f6e2073746167650000000000000000000000006044820152606401610af9565b80546901000000000000000000900467ffffffffffffffff164210156120c65760405162461bcd60e51b815260206004820152601260248201527f647261676f6e20697320636f6f6c646f776e00000000000000000000000000006044820152606401610af9565b6127108d111561213d5760008a1180156120e05750600089115b80156120ec5750888a14155b6121385760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206d6174726f6e4964206f72207369726549640000000000006044820152606401610af9565b612195565b89158015612149575088155b6121955760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206d6174726f6e4964206f72207369726549640000000000006044820152606401610af9565b6121af6121a98e8e8e8e8e8e8e8e8d6138c4565b84611034565b6121be818e8e8e8e8e8e613a10565b86601160008f815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050508c7f7145214870487feee5d42f7f234a55bee0acbbd46345a1a0ebed3021f1bc0dfa886000015189602001518a604001518b606001518c60800151604051612271959493929190948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a26040518061014001604052808760000151815260200160018152602001876020015181526020016001815260200187604001518152602001600181526020018760600151815260200160018152602001876080015181526020016001815250601260008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050508c7ffc0dbf1e52cd3999a8cd8133edb5e4924efd257057272766cb826b042b955ed687600001516001896020015160018b6040015160018d6060015160018f6080015160016040516123ef9a99989796959493929190998a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400190565b60405180910390a26124018d866133e8565b89156124295760008a8152601060209081526040822080546001810182559083529120018d90555b8815612451576000898152601060209081526040822080546001810182559083529120018d90555b600191505060016008559b9a5050505050505050505050565b6007546001600160a01b036101009091041633146124ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a9613ac6565b6009546001600160a01b031633146125375760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b6115a96000613872565b600061254f60075460ff1690565b1561258f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b600260085414156125e25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085583612609816000908152600260205260409020546001600160a01b0316151590565b151560011461265a5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c548261266a919061507a565b10156126aa5760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b60006126b5876131e5565b6126be876131e5565b6040516020016126cf929190614ddc565b60405160208183030381529060405290506126ea8186611034565b60008781526013602052604081205461270490600161507a565b9050600d548111156127585760405162461bcd60e51b815260206004820152601360248201527f696e76616c696420627265656420636f756e74000000000000000000000000006044820152606401610af9565b600088815260136020526040908190208290555188907f109627c65b80ea268c2c63d9506dec29b7737258355a4a85544750218526f5c19061279d9084815260200190565b60405180910390a2600194505050505060016008559392505050565b606060018054610a019061510c565b600a81600281106127d857600080fd5b60049182820401919006600802915054906101000a900467ffffffffffffffff1681565b6001600160a01b0382163314156128555760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af9565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128c2911515815260200190565b60405180910390a35050565b6128d83383613491565b61294a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610af9565b61113584848484613b41565b6007546001600160a01b036101009091041633146129b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600c55565b60606109ea82613bbf565b6000828152601160209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015281836005811115612a2f57634e487b7160e01b600052602160045260246000fd5b90506000816005811115612a5357634e487b7160e01b600052602160045260246000fd5b11612aa05760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206174747249640000000000000000000000000000000000006044820152606401610af9565b6001816005811115612ac257634e487b7160e01b600052602160045260246000fd5b1415612ad15781519250612b9d565b6002816005811115612af357634e487b7160e01b600052602160045260246000fd5b1415612b055781602001519250612b9d565b6003816005811115612b2757634e487b7160e01b600052602160045260246000fd5b1415612b395781604001519250612b9d565b6004816005811115612b5b57634e487b7160e01b600052602160045260246000fd5b1415612b6d5781606001519250612b9d565b6005816005811115612b8f57634e487b7160e01b600052602160045260246000fd5b1415612b9d57816080015192505b505092915050565b6000612bb360075460ff1690565b15612bf35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415612c465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085585612c6d816000908152600260205260409020546001600160a01b0316151590565b1515600114612cbe5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c5482612cce919061507a565b1015612d0e5760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b6000876005811115612d3057634e487b7160e01b600052602160045260246000fd5b90506000816005811115612d5457634e487b7160e01b600052602160045260246000fd5b11612da15760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206174747249640000000000000000000000000000000000006044820152606401610af9565b6000612dad8a8a6129c6565b9050808811612dee5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b600e5460008b81526014602052604090205410612e4d5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420626f6e65436f756e744d61780000000000000000000000006044820152606401610af9565b6000612e588b6131e5565b612e618b6131e5565b612e6a8b6131e5565b612e738b6131e5565b604051602001612e869493929190614e4e565b6040516020818303038152906040529050612ea18188611034565b60008b81526011602052604090206001846005811115612ed157634e487b7160e01b600052602160045260246000fd5b1415612edf57898155612fab565b6002846005811115612f0157634e487b7160e01b600052602160045260246000fd5b1415612f1357600181018a9055612fab565b6003846005811115612f3557634e487b7160e01b600052602160045260246000fd5b1415612f4757600281018a9055612fab565b6004846005811115612f6957634e487b7160e01b600052602160045260246000fd5b1415612f7b57600381018a9055612fab565b6005846005811115612f9d57634e487b7160e01b600052602160045260246000fd5b1415612fab57600481018a90555b60008c8152601460205260408120805460019290612fca90849061507a565b9091555050604080518c8152602081018590529081018b90528c907fc690c2447daef882113519e6628b8bb864b336462b2a97acc7720df33a3954209060600160405180910390a260019650505050505050600160085595945050505050565b6007546001600160a01b0361010090910416331461308a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600e55565b6007546001600160a01b036101009091041633146130ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6001600160a01b03811661316b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610af9565b61164a81613801565b6007546001600160a01b036101009091041633146131d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6131e1600a826002614689565b5050565b606081613226575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526109ed565b8160005b8115613250578061323a81615147565b91506132499050600a836150b5565b915061322a565b60008167ffffffffffffffff81111561327957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156132a3576020820181803683370190505b5090505b8415613334576132b86001836150c9565b91506132c5600a86615162565b6132d090603061507a565b60f81b8183815181106132f357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061332d600a866150b5565b94506132a7565b949350505050565b6131e1828260405180602001604052806000815250613d70565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061338b826116b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008060006133d38585613dee565b915091506133e081613e5e565b509392505050565b6000828152600260205260409020546001600160a01b03166134725760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608401610af9565b6000828152600660209081526040909120825161102f92840190614731565b6000818152600260205260408120546001600160a01b031661350a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b6000613515836116b2565b9050806001600160a01b0316846001600160a01b031614806135505750836001600160a01b031661354584610a84565b6001600160a01b0316145b8061333457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16613334565b826001600160a01b0316613597826116b2565b6001600160a01b0316146136135760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610af9565b6001600160a01b03821661368e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610af9565b613699838383614061565b6136a4600082613356565b6001600160a01b03831660009081526003602052604081208054600192906136cd9084906150c9565b90915550506001600160a01b03821660009081526003602052604081208054600192906136fb90849061507a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60075460ff166137ae5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610af9565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61164a816140ac565b600780546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b606060006138d18b6131e5565b6138da8b6131e5565b6138e38b6131e5565b6138ec8b6131e5565b6138f58b6131e5565b6139028b61ffff166131e5565b60405160200161391796959493929190614ea5565b60405160208183030381529060405290508061393686600001516131e5565b61394387602001516131e5565b61395088604001516131e5565b61395d89606001516131e5565b61396a8a608001516131e5565b60405160200161397f96959493929190614ea5565b60405160208183030381529060405290508061399e85600001516131e5565b6139ab86602001516131e5565b6139b887604001516131e5565b6139c588606001516131e5565b6139d289608001516131e5565b6139db896131e5565b6040516020016139f19796959493929190614f24565b60408051808303601f190181529190529b9a5050505050505050505050565b60018701859055600287018490556003870183905560048701829055612710861115613a3c5780613a3f565b60015b60058801805461ffff191661ffff928316179055875470ffffffffffffffff00000000000000000019168855604080518781526020810187905290810185905260608101849052908216608082015286907fc8fa700d992abc0b2054e0b6a429ec1958d72e9b21f55150f4dcf21f812e89769060a00160405180910390a250505050505050565b60075460ff1615613b0c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586137db3390565b613b4c848484613584565b613b58848484846140ec565b6111355760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b6000818152600260205260409020546060906001600160a01b0316613c4c5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608401610af9565b60008281526006602052604081208054613c659061510c565b80601f0160208091040260200160405190810160405280929190818152602001828054613c919061510c565b8015613cde5780601f10613cb357610100808354040283529160200191613cde565b820191906000526020600020905b815481529060010190602001808311613cc157829003601f168201915b505050505090506000613d2160408051808201909152601581527f68747470733a2f2f697066732e696f2f697066732f0000000000000000000000602082015290565b9050805160001415613d35575090506109ed565b815115613d67578082604051602001613d4f929190614ddc565b604051602081830303815290604052925050506109ed565b61333484614244565b613d7a838361435f565b613d8760008484846140ec565b61102f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b600080825160411415613e255760208301516040840151606085015160001a613e19878285856144ad565b94509450505050613e57565b825160401415613e4f5760208301516040840151613e4486838361459a565b935093505050613e57565b506000905060025b9250929050565b6000816004811115613e8057634e487b7160e01b600052602160045260246000fd5b1415613e8b5761164a565b6001816004811115613ead57634e487b7160e01b600052602160045260246000fd5b1415613efb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610af9565b6002816004811115613f1d57634e487b7160e01b600052602160045260246000fd5b1415613f6b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610af9565b6003816004811115613f8d57634e487b7160e01b600052602160045260246000fd5b1415613fe65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610af9565b600481600481111561400857634e487b7160e01b600052602160045260246000fd5b141561164a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610af9565b60075460ff16156140a75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b61102f565b6140b5816145e2565b600081815260066020526040902080546140ce9061510c565b15905061164a57600081815260066020526040812061164a916147a5565b60006001600160a01b0384163b1561423957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614130903390899088908890600401614fb6565b602060405180830381600087803b15801561414a57600080fd5b505af192505050801561417a575060408051601f3d908101601f1916820190925261417791810190614abd565b60015b61421f573d8080156141a8576040519150601f19603f3d011682016040523d82523d6000602084013e6141ad565b606091505b5080516142175760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613334565b506001949350505050565b6000818152600260205260409020546060906001600160a01b03166142d15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610af9565b600061430d60408051808201909152601581527f68747470733a2f2f697066732e696f2f697066732f0000000000000000000000602082015290565b9050600081511161432d5760405180602001604052806000815250614358565b80614337846131e5565b604051602001614348929190614ddc565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166143b55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af9565b6000818152600260205260409020546001600160a01b03161561441a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af9565b61442660008383614061565b6001600160a01b038216600090815260036020526040812080546001929061444f90849061507a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156144e45750600090506003614591565b8460ff16601b141580156144fc57508460ff16601c14155b1561450d5750600090506004614591565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614561573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661458a57600060019250925050614591565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016145d4878288856144ad565b935093505050935093915050565b60006145ed826116b2565b90506145fb81600084614061565b614606600083613356565b6001600160a01b038116600090815260036020526040812080546001929061462f9084906150c9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001830191839082156147215791602002820160005b838211156146eb57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550926020019260080160208160070104928301926001030261469f565b801561471f5782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026146eb565b505b5061472d9291506147dd565b5090565b82805461473d9061510c565b90600052602060002090601f01602090048101928261475f5760008555614721565b82601f1061477857805160ff1916838001178555614721565b82800160010185558215614721579182015b8281111561472157825182559160200191906001019061478a565b5080546147b19061510c565b6000825580601f106147c3575061164a565b601f01602090049060005260206000209081019061164a91905b5b8082111561472d57600081556001016147de565b80356001600160a01b03811681146109ed57600080fd5b600082601f830112614819578081fd5b813567ffffffffffffffff811115614833576148336151a2565b614846601f8201601f1916602001615049565b81815284602083860101111561485a578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215614885578081fd5b61488f60a0615049565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015292915050565b803561ffff811681146109ed57600080fd5b6000602082840312156148e6578081fd5b614358826147f2565b60008060408385031215614901578081fd5b61490a836147f2565b9150614918602084016147f2565b90509250929050565b600080600060608486031215614935578081fd5b61493e846147f2565b925061494c602085016147f2565b9150604084013590509250925092565b60008060008060808587031215614971578081fd5b61497a856147f2565b9350614988602086016147f2565b925060408501359150606085013567ffffffffffffffff8111156149aa578182fd5b6149b687828801614809565b91505092959194509250565b600080604083850312156149d4578182fd5b6149dd836147f2565b9150602083013580151581146149f1578182fd5b809150509250929050565b60008060408385031215614a0e578182fd5b614a17836147f2565b946020939093013593505050565b600060408284031215614a36578081fd5b82601f830112614a44578081fd5b614a4e6040615049565b808385604086011115614a5f578384fd5b835b6002811015614a9657813567ffffffffffffffff81168114614a81578586fd5b84526020938401939190910190600101614a61565b509095945050505050565b600060208284031215614ab2578081fd5b8135614358816151b8565b600060208284031215614ace578081fd5b8151614358816151b8565b60008060408385031215614aeb578182fd5b823567ffffffffffffffff80821115614b02578384fd5b614b0e86838701614809565b93506020850135915080821115614b23578283fd5b50614b3085828601614809565b9150509250929050565b600060208284031215614b4b578081fd5b5035919050565b60008060408385031215614b64578182fd5b82359150602083013567ffffffffffffffff811115614b81578182fd5b614b3085828601614809565b60008060408385031215614b9f578182fd5b50508035926020909101359150565b600080600060608486031215614bc2578081fd5b8335925060208401359150604084013567ffffffffffffffff811115614be6578182fd5b614bf286828701614809565b9150509250925092565b600080600080600060a08688031215614c13578283fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614c45578182fd5b614c5188828901614809565b9150509295509295909350565b60008060008060008060008060008060006102608c8e031215614c7f578889fd5b8b359a5060208c0135995060408c0135985060608c0135975060808c01359650614cab60a08d016148c3565b9550614cba8d60c08e01614874565b9450614cca8d6101608e01614874565b935067ffffffffffffffff806102008e01351115614ce6578384fd5b614cf78e6102008f01358f01614809565b93506102208d01359250806102408e01351115614d12578182fd5b50614d248d6102408e01358e01614809565b90509295989b509295989b9093969950565b600080600080600060a08688031215614d4d578283fd5b853560ff81168114614d5d578384fd5b945060208601359350614d72604087016147f2565b925060608601359150608086013567ffffffffffffffff811115614c45578182fd5b60008151808452614dac8160208601602086016150e0565b601f01601f19169290920160200192915050565b60008251614dd28184602087016150e0565b9190910192915050565b60008351614dee8184602088016150e0565b835190830190614e028183602088016150e0565b01949350505050565b60008451614e1d8184602089016150e0565b845190830190614e318183602089016150e0565b8451910190614e448183602088016150e0565b0195945050505050565b60008551614e60818460208a016150e0565b855190830190614e74818360208a016150e0565b8551910190614e878183602089016150e0565b8451910190614e9a8183602088016150e0565b019695505050505050565b600087516020614eb88285838d016150e0565b885191840191614ecb8184848d016150e0565b8851920191614edd8184848c016150e0565b8751920191614eef8184848b016150e0565b8651920191614f018184848a016150e0565b8551920191614f1381848489016150e0565b919091019998505050505050505050565b600088516020614f378285838e016150e0565b895191840191614f4a8184848e016150e0565b8951920191614f5c8184848d016150e0565b8851920191614f6e8184848c016150e0565b8751920191614f808184848b016150e0565b8651920191614f928184848a016150e0565b8551920191614fa481848489016150e0565b919091019a9950505050505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614fe86080830184614d94565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561502a5783518352928401929184019160010161500e565b50909695505050505050565b6000602082526143586020830184614d94565b604051601f8201601f1916810167ffffffffffffffff81118282101715615072576150726151a2565b604052919050565b6000821982111561508d5761508d615176565b500190565b600067ffffffffffffffff808316818516808303821115614e0257614e02615176565b6000826150c4576150c461518c565b500490565b6000828210156150db576150db615176565b500390565b60005b838110156150fb5781810151838201526020016150e3565b838111156111355750506000910152565b60028104600182168061512057607f821691505b6020821081141561514157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561515b5761515b615176565b5060010190565b6000826151715761517161518c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461164a57600080fdfea264697066735822122060936cf9c7035166ebf239fc2b1c5b2ae6d469d9351f9c11a9b4c96cd3ad43c664736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061032b5760003560e01c80638456cb59116101b2578063c87b56dd116100f9578063e8fa5b9b116100a2578063f2fde38b1161007c578063f2fde38b14610913578063f851a44014610926578063f98f537014610937578063fe123c161461094a5761032b565b8063e8fa5b9b146108b1578063e985e9c5146108c4578063ed88d4b0146109005761032b565b8063d7e3285d116100d3578063d7e3285d1461088c578063da284dcc14610895578063e4d5998c1461089e5761032b565b8063c87b56dd146107b8578063cc06c359146107cb578063d2a59d69146107d45761032b565b80639adf40d91161015b578063a22cb46511610135578063a22cb4651461077f578063b88d4fde14610792578063c0cc365d146107a55761032b565b80639adf40d9146106425780639bde96d0146106ee5780639d6fac6f146107535761032b565b80638dd775ce1161018c5780638dd775ce1461057c5780638ee772e81461058f57806395d89b411461063a5761032b565b80638456cb59146105555780638bad0c0a1461055d5780638da5cb5b146105655761032b565b806342966c681161027657806367bd7c4b1161021f57806375829def116101f957806375829def1461050f5780637e94bdf21461052257806383016207146105425761032b565b806367bd7c4b146104e157806370a08231146104f4578063715018a6146105075761032b565b80635c975abb116102505780635c975abb146104a35780636352211e146104ae57806366fd3d8a146104c15761032b565b806342966c681461044f5780634493c9571461046257806344af0c97146104905761032b565b8063162094c4116102d8578063344f1ba5116102b2578063344f1ba5146104215780633f4ba83a1461043457806342842e0e1461043c5761032b565b8063162094c4146103d357806323b872dd146103e65780632464b930146103f95761032b565b806308a4772d1161030957806308a4772d14610398578063095ea7b3146103ab5780630d37cce9146103c05761032b565b806301ffc9a71461033057806306fdde0314610358578063081812fc1461036d575b600080fd5b61034361033e366004614aa1565b610953565b60405190151581526020015b60405180910390f35b6103606109f2565b60405161034f9190615036565b61038061037b366004614b3a565b610a84565b6040516001600160a01b03909116815260200161034f565b6103436103a6366004614d36565b610b1e565b6103be6103b93660046149fc565b610f02565b005b6103be6103ce366004614ad9565b611034565b6103be6103e1366004614b52565b61113b565b6103be6103f4366004614921565b61120b565b61040c610407366004614b8d565b611293565b6040805192835260208301919091520161034f565b6103be61042f366004614b3a565b6114dc565b6103be611541565b6103be61044a366004614921565b6115ab565b6103be61045d366004614b3a565b6115c6565b610482610470366004614b3a565b60136020526000908152604090205481565b60405190815260200161034f565b6103be61049e366004614b3a565b61164d565b60075460ff16610343565b6103806104bc366004614b3a565b6116b2565b6104d46104cf366004614b3a565b61173d565b60405161034f9190614ff2565b6103436104ef366004614bfc565b61179f565b6104826105023660046148d5565b611c8e565b6103be611d28565b6103be61051d3660046148d5565b611d92565b610482610530366004614b3a565b60146020526000908152604090205481565b610343610550366004614c5e565b611e7c565b6103be61246a565b6103be6124d2565b61038060075461010090046001600160a01b031690565b61034361058a366004614bae565b612541565b61062861059d366004614b3a565b6000908152600f602090815260409182902082516101008082018552825460ff811680845267ffffffffffffffff9282048316958401959095526901000000000000000000900416938101939093526001810154606084015260028101546080840152600381015460a0840152600481015460c08401526005015461ffff1660e09092019190915290565b60405160ff909116815260200161034f565b6103606127b9565b6106a4610650366004614b3a565b6012602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400161034f565b61072b6106fc366004614b3a565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161034f565b610766610761366004614b3a565b6127c8565b60405167ffffffffffffffff909116815260200161034f565b6103be61078d3660046149c2565b6127fc565b6103be6107a036600461495c565b6128ce565b6103be6107b3366004614b3a565b612956565b6103606107c6366004614b3a565b6129bb565b610482600b5481565b61083b6107e2366004614b3a565b600f6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff85169567ffffffffffffffff610100870481169669010000000000000000009004169493929161ffff1688565b6040805160ff99909916895267ffffffffffffffff97881660208a015295909616948701949094526060860192909252608085015260a084015260c083015261ffff1660e08201526101000161034f565b610482600e5481565b610482600c5481565b6104826108ac366004614b8d565b6129c6565b6103436108bf366004614bfc565b612ba5565b6103436108d23660046148ef565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103be61090e366004614b3a565b61302a565b6103be6109213660046148d5565b61308f565b6009546001600160a01b0316610380565b6103be610945366004614a25565b613174565b610482600d5481565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806109b657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109ea57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b606060008054610a019061510c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2d9061510c565b8015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b025760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610b2c60075460ff1690565b15610b6c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415610bbf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b6002600855600c5483904290610bd5908361507a565b1015610c155760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b6000868152600260205260409020546001600160a01b031615610c7a5760405162461bcd60e51b815260206004820152601060248201527f746f6b656e4964206973206578697374000000000000000000000000000000006044820152606401610af9565b60018760ff1610158015610c92575060058760ff1611155b610cde5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206a6f620000000000000000000000000000000000000000006044820152606401610af9565b6000610ce9876131e5565b610cf58960ff166131e5565b610cfe876131e5565b604051602001610d1093929190614e0b565b6040516020818303038152906040529050610d2b8185611034565b6000612710881115610d4957600a5467ffffffffffffffff16610d63565b600a5468010000000000000000900467ffffffffffffffff165b90506040518061010001604052808a60ff1681526020014267ffffffffffffffff1681526020018242610d969190615092565b67ffffffffffffffff90811682526000602080840182905260408085018390526060808601849052608080870185905260a09687018590528f8552600f84529382902087518154948901519389015160ff1990951660ff9091161768ffffffffffffffff001916610100938716939093029290921770ffffffffffffffff0000000000000000001916690100000000000000000093909516929092029390931783558401516001830155830151600282015590820151600382015560c0820151600482015560e0909101516005909101805461ffff191661ffff9092169190911790556001600160a01b0387167ff5b0ebef7c903462e7d748e902b3c855dcbf00967b71593a464617b722b0fc89898b42610eb18682615092565b6040805194855260ff93909316602085015267ffffffffffffffff91821684840152166060830152519081900360800190a2610eed878961333c565b60019350505050600160085595945050505050565b6000610f0d826116b2565b9050806001600160a01b0316836001600160a01b03161415610f975760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610af9565b336001600160a01b0382161480610fb35750610fb381336108d2565b6110255760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610af9565b61102f8383613356565b505050565b6000826040516020016110479190614dc0565b60405160208183030381529060405280519060200120905060006110b8826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506110cc6009546001600160a01b031690565b6001600160a01b03166110df82856133c4565b6001600160a01b0316146111355760405162461bcd60e51b815260206004820152601260248201527f7369676e206d657373616765206661756c7400000000000000000000000000006044820152606401610af9565b50505050565b6009546001600160a01b031633146111a05760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b600260085414156111f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085561120282826133e8565b50506001600855565b611216335b82613491565b6112885760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610af9565b61102f838383613584565b600080600060126000868152602001908152602001600020604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050600084600581111561133f57634e487b7160e01b600052602160045260246000fd5b9050600081600581111561136357634e487b7160e01b600052602160045260246000fd5b116113b05760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420736b696c6c496400000000000000000000000000000000006044820152606401610af9565b60018160058111156113d257634e487b7160e01b600052602160045260246000fd5b14156113e9578151602083015190945092506114d3565b600281600581111561140b57634e487b7160e01b600052602160045260246000fd5b14156114245781604001519350816060015192506114d3565b600381600581111561144657634e487b7160e01b600052602160045260246000fd5b141561145f57816080015193508160a0015192506114d3565b600481600581111561148157634e487b7160e01b600052602160045260246000fd5b141561149a578160c0015193508160e0015192506114d3565b60058160058111156114bc57634e487b7160e01b600052602160045260246000fd5b14156114d357816101000151935081610120015192505b50509250929050565b6007546001600160a01b0361010090910416331461153c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600b55565b6007546001600160a01b036101009091041633146115a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a961375c565b565b61102f838383604051806020016040528060008152506128ce565b6115cf33611210565b6116415760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f766564000000000000000000000000000000006064820152608401610af9565b61164a816137f8565b50565b6007546001600160a01b036101009091041633146116ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600d55565b6000818152600260205260408120546001600160a01b0316806109ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610af9565b60008181526010602090815260409182902080548351818402810184019094528084526060939283018282801561179357602002820191906000526020600020905b81548152602001906001019080831161177f575b50505050509050919050565b60006117ad60075460ff1690565b156117ed5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b600260085414156118405760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085585611867816000908152600260205260409020546001600160a01b0316151590565b15156001146118b85760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c54826118c8919061507a565b10156119085760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b600087600581111561192a57634e487b7160e01b600052602160045260246000fd5b9050600081600581111561194e57634e487b7160e01b600052602160045260246000fd5b1161199b5760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420736b696c6c496400000000000000000000000000000000006044820152606401610af9565b60058160058111156119bd57634e487b7160e01b600052602160045260246000fd5b1415611a21576000871180156119e05750600b546119dc90600161507a565b8711155b611a1c5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b611a6f565b600087118015611a335750600b548711155b611a6f5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b6000611a7a8a6131e5565b611a838a6131e5565b611a8c8a6131e5565b611a958a6131e5565b604051602001611aa89493929190614e4e565b6040516020818303038152906040529050611ac38187611034565b600080611ad08c8c611293565b9092509050898110611b245760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206c6576656c000000000000000000000000000000000000006044820152606401610af9565b60008c81526012602052604090206001856005811115611b5457634e487b7160e01b600052602160045260246000fd5b1415611b6657600181018b9055611c32565b6002856005811115611b8857634e487b7160e01b600052602160045260246000fd5b1415611b9a57600381018b9055611c32565b6003856005811115611bbc57634e487b7160e01b600052602160045260246000fd5b1415611bce57600581018b9055611c32565b6004856005811115611bf057634e487b7160e01b600052602160045260246000fd5b1415611c0257600781018b9055611c32565b6005856005811115611c2457634e487b7160e01b600052602160045260246000fd5b1415611c3257600981018b90555b604080518d8152602081018490529081018c90528d907fdc94a3a746ac126f3efad3c0eff1cbeab15ead419197ceb55cec68ccd9ff59829060600160405180910390a26001975050505050505050600160085595945050505050565b60006001600160a01b038216611d0c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610af9565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03610100909104163314611d885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a96000613801565b6009546001600160a01b03163314611df75760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b6001600160a01b038116611e735760405162461bcd60e51b815260206004820152602860248201527f41646d696e61626c653a206e65772061646d696e20697320746865207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152608401610af9565b61164a81613872565b6000611e8a60075460ff1690565b15611eca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415611f1d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b6002600855611f438c6000908152600260205260409020546001600160a01b0316151590565b1515600114611f945760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b42600c5484611fa3919061507a565b1015611fe35760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b60008c8152600f60205260409020600581015461ffff161580156120125750600581015461ffff908116908916115b61205e5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420647261676f6e2073746167650000000000000000000000006044820152606401610af9565b80546901000000000000000000900467ffffffffffffffff164210156120c65760405162461bcd60e51b815260206004820152601260248201527f647261676f6e20697320636f6f6c646f776e00000000000000000000000000006044820152606401610af9565b6127108d111561213d5760008a1180156120e05750600089115b80156120ec5750888a14155b6121385760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206d6174726f6e4964206f72207369726549640000000000006044820152606401610af9565b612195565b89158015612149575088155b6121955760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206d6174726f6e4964206f72207369726549640000000000006044820152606401610af9565b6121af6121a98e8e8e8e8e8e8e8e8d6138c4565b84611034565b6121be818e8e8e8e8e8e613a10565b86601160008f815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050508c7f7145214870487feee5d42f7f234a55bee0acbbd46345a1a0ebed3021f1bc0dfa886000015189602001518a604001518b606001518c60800151604051612271959493929190948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a26040518061014001604052808760000151815260200160018152602001876020015181526020016001815260200187604001518152602001600181526020018760600151815260200160018152602001876080015181526020016001815250601260008f8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050508c7ffc0dbf1e52cd3999a8cd8133edb5e4924efd257057272766cb826b042b955ed687600001516001896020015160018b6040015160018d6060015160018f6080015160016040516123ef9a99989796959493929190998a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400190565b60405180910390a26124018d866133e8565b89156124295760008a8152601060209081526040822080546001810182559083529120018d90555b8815612451576000898152601060209081526040822080546001810182559083529120018d90555b600191505060016008559b9a5050505050505050505050565b6007546001600160a01b036101009091041633146124ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6115a9613ac6565b6009546001600160a01b031633146125375760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610af9565b6115a96000613872565b600061254f60075460ff1690565b1561258f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b600260085414156125e25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085583612609816000908152600260205260409020546001600160a01b0316151590565b151560011461265a5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c548261266a919061507a565b10156126aa5760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b60006126b5876131e5565b6126be876131e5565b6040516020016126cf929190614ddc565b60405160208183030381529060405290506126ea8186611034565b60008781526013602052604081205461270490600161507a565b9050600d548111156127585760405162461bcd60e51b815260206004820152601360248201527f696e76616c696420627265656420636f756e74000000000000000000000000006044820152606401610af9565b600088815260136020526040908190208290555188907f109627c65b80ea268c2c63d9506dec29b7737258355a4a85544750218526f5c19061279d9084815260200190565b60405180910390a2600194505050505060016008559392505050565b606060018054610a019061510c565b600a81600281106127d857600080fd5b60049182820401919006600802915054906101000a900467ffffffffffffffff1681565b6001600160a01b0382163314156128555760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af9565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128c2911515815260200190565b60405180910390a35050565b6128d83383613491565b61294a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610af9565b61113584848484613b41565b6007546001600160a01b036101009091041633146129b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600c55565b60606109ea82613bbf565b6000828152601160209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015281836005811115612a2f57634e487b7160e01b600052602160045260246000fd5b90506000816005811115612a5357634e487b7160e01b600052602160045260246000fd5b11612aa05760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206174747249640000000000000000000000000000000000006044820152606401610af9565b6001816005811115612ac257634e487b7160e01b600052602160045260246000fd5b1415612ad15781519250612b9d565b6002816005811115612af357634e487b7160e01b600052602160045260246000fd5b1415612b055781602001519250612b9d565b6003816005811115612b2757634e487b7160e01b600052602160045260246000fd5b1415612b395781604001519250612b9d565b6004816005811115612b5b57634e487b7160e01b600052602160045260246000fd5b1415612b6d5781606001519250612b9d565b6005816005811115612b8f57634e487b7160e01b600052602160045260246000fd5b1415612b9d57816080015192505b505092915050565b6000612bb360075460ff1690565b15612bf35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b60026008541415612c465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610af9565b600260085585612c6d816000908152600260205260409020546001600160a01b0316151590565b1515600114612cbe5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e4964206973206e6f74206578697374656e740000000000000000006044820152606401610af9565b8342600c5482612cce919061507a565b1015612d0e5760405162461bcd60e51b815260206004820152600f60248201526e65787069726174696f6e2074696d6560881b6044820152606401610af9565b6000876005811115612d3057634e487b7160e01b600052602160045260246000fd5b90506000816005811115612d5457634e487b7160e01b600052602160045260246000fd5b11612da15760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206174747249640000000000000000000000000000000000006044820152606401610af9565b6000612dad8a8a6129c6565b9050808811612dee5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610af9565b600e5460008b81526014602052604090205410612e4d5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420626f6e65436f756e744d61780000000000000000000000006044820152606401610af9565b6000612e588b6131e5565b612e618b6131e5565b612e6a8b6131e5565b612e738b6131e5565b604051602001612e869493929190614e4e565b6040516020818303038152906040529050612ea18188611034565b60008b81526011602052604090206001846005811115612ed157634e487b7160e01b600052602160045260246000fd5b1415612edf57898155612fab565b6002846005811115612f0157634e487b7160e01b600052602160045260246000fd5b1415612f1357600181018a9055612fab565b6003846005811115612f3557634e487b7160e01b600052602160045260246000fd5b1415612f4757600281018a9055612fab565b6004846005811115612f6957634e487b7160e01b600052602160045260246000fd5b1415612f7b57600381018a9055612fab565b6005846005811115612f9d57634e487b7160e01b600052602160045260246000fd5b1415612fab57600481018a90555b60008c8152601460205260408120805460019290612fca90849061507a565b9091555050604080518c8152602081018590529081018b90528c907fc690c2447daef882113519e6628b8bb864b336462b2a97acc7720df33a3954209060600160405180910390a260019650505050505050600160085595945050505050565b6007546001600160a01b0361010090910416331461308a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b600e55565b6007546001600160a01b036101009091041633146130ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6001600160a01b03811661316b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610af9565b61164a81613801565b6007546001600160a01b036101009091041633146131d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610af9565b6131e1600a826002614689565b5050565b606081613226575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526109ed565b8160005b8115613250578061323a81615147565b91506132499050600a836150b5565b915061322a565b60008167ffffffffffffffff81111561327957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156132a3576020820181803683370190505b5090505b8415613334576132b86001836150c9565b91506132c5600a86615162565b6132d090603061507a565b60f81b8183815181106132f357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061332d600a866150b5565b94506132a7565b949350505050565b6131e1828260405180602001604052806000815250613d70565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061338b826116b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008060006133d38585613dee565b915091506133e081613e5e565b509392505050565b6000828152600260205260409020546001600160a01b03166134725760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608401610af9565b6000828152600660209081526040909120825161102f92840190614731565b6000818152600260205260408120546001600160a01b031661350a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b6000613515836116b2565b9050806001600160a01b0316846001600160a01b031614806135505750836001600160a01b031661354584610a84565b6001600160a01b0316145b8061333457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16613334565b826001600160a01b0316613597826116b2565b6001600160a01b0316146136135760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610af9565b6001600160a01b03821661368e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610af9565b613699838383614061565b6136a4600082613356565b6001600160a01b03831660009081526003602052604081208054600192906136cd9084906150c9565b90915550506001600160a01b03821660009081526003602052604081208054600192906136fb90849061507a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60075460ff166137ae5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610af9565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61164a816140ac565b600780546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b606060006138d18b6131e5565b6138da8b6131e5565b6138e38b6131e5565b6138ec8b6131e5565b6138f58b6131e5565b6139028b61ffff166131e5565b60405160200161391796959493929190614ea5565b60405160208183030381529060405290508061393686600001516131e5565b61394387602001516131e5565b61395088604001516131e5565b61395d89606001516131e5565b61396a8a608001516131e5565b60405160200161397f96959493929190614ea5565b60405160208183030381529060405290508061399e85600001516131e5565b6139ab86602001516131e5565b6139b887604001516131e5565b6139c588606001516131e5565b6139d289608001516131e5565b6139db896131e5565b6040516020016139f19796959493929190614f24565b60408051808303601f190181529190529b9a5050505050505050505050565b60018701859055600287018490556003870183905560048701829055612710861115613a3c5780613a3f565b60015b60058801805461ffff191661ffff928316179055875470ffffffffffffffff00000000000000000019168855604080518781526020810187905290810185905260608101849052908216608082015286907fc8fa700d992abc0b2054e0b6a429ec1958d72e9b21f55150f4dcf21f812e89769060a00160405180910390a250505050505050565b60075460ff1615613b0c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586137db3390565b613b4c848484613584565b613b58848484846140ec565b6111355760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b6000818152600260205260409020546060906001600160a01b0316613c4c5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608401610af9565b60008281526006602052604081208054613c659061510c565b80601f0160208091040260200160405190810160405280929190818152602001828054613c919061510c565b8015613cde5780601f10613cb357610100808354040283529160200191613cde565b820191906000526020600020905b815481529060010190602001808311613cc157829003601f168201915b505050505090506000613d2160408051808201909152601581527f68747470733a2f2f697066732e696f2f697066732f0000000000000000000000602082015290565b9050805160001415613d35575090506109ed565b815115613d67578082604051602001613d4f929190614ddc565b604051602081830303815290604052925050506109ed565b61333484614244565b613d7a838361435f565b613d8760008484846140ec565b61102f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b600080825160411415613e255760208301516040840151606085015160001a613e19878285856144ad565b94509450505050613e57565b825160401415613e4f5760208301516040840151613e4486838361459a565b935093505050613e57565b506000905060025b9250929050565b6000816004811115613e8057634e487b7160e01b600052602160045260246000fd5b1415613e8b5761164a565b6001816004811115613ead57634e487b7160e01b600052602160045260246000fd5b1415613efb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610af9565b6002816004811115613f1d57634e487b7160e01b600052602160045260246000fd5b1415613f6b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610af9565b6003816004811115613f8d57634e487b7160e01b600052602160045260246000fd5b1415613fe65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610af9565b600481600481111561400857634e487b7160e01b600052602160045260246000fd5b141561164a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610af9565b60075460ff16156140a75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610af9565b61102f565b6140b5816145e2565b600081815260066020526040902080546140ce9061510c565b15905061164a57600081815260066020526040812061164a916147a5565b60006001600160a01b0384163b1561423957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614130903390899088908890600401614fb6565b602060405180830381600087803b15801561414a57600080fd5b505af192505050801561417a575060408051601f3d908101601f1916820190925261417791810190614abd565b60015b61421f573d8080156141a8576040519150601f19603f3d011682016040523d82523d6000602084013e6141ad565b606091505b5080516142175760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610af9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613334565b506001949350505050565b6000818152600260205260409020546060906001600160a01b03166142d15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610af9565b600061430d60408051808201909152601581527f68747470733a2f2f697066732e696f2f697066732f0000000000000000000000602082015290565b9050600081511161432d5760405180602001604052806000815250614358565b80614337846131e5565b604051602001614348929190614ddc565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166143b55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af9565b6000818152600260205260409020546001600160a01b03161561441a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af9565b61442660008383614061565b6001600160a01b038216600090815260036020526040812080546001929061444f90849061507a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156144e45750600090506003614591565b8460ff16601b141580156144fc57508460ff16601c14155b1561450d5750600090506004614591565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614561573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661458a57600060019250925050614591565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016145d4878288856144ad565b935093505050935093915050565b60006145ed826116b2565b90506145fb81600084614061565b614606600083613356565b6001600160a01b038116600090815260036020526040812080546001929061462f9084906150c9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001830191839082156147215791602002820160005b838211156146eb57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550926020019260080160208160070104928301926001030261469f565b801561471f5782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026146eb565b505b5061472d9291506147dd565b5090565b82805461473d9061510c565b90600052602060002090601f01602090048101928261475f5760008555614721565b82601f1061477857805160ff1916838001178555614721565b82800160010185558215614721579182015b8281111561472157825182559160200191906001019061478a565b5080546147b19061510c565b6000825580601f106147c3575061164a565b601f01602090049060005260206000209081019061164a91905b5b8082111561472d57600081556001016147de565b80356001600160a01b03811681146109ed57600080fd5b600082601f830112614819578081fd5b813567ffffffffffffffff811115614833576148336151a2565b614846601f8201601f1916602001615049565b81815284602083860101111561485a578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215614885578081fd5b61488f60a0615049565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015292915050565b803561ffff811681146109ed57600080fd5b6000602082840312156148e6578081fd5b614358826147f2565b60008060408385031215614901578081fd5b61490a836147f2565b9150614918602084016147f2565b90509250929050565b600080600060608486031215614935578081fd5b61493e846147f2565b925061494c602085016147f2565b9150604084013590509250925092565b60008060008060808587031215614971578081fd5b61497a856147f2565b9350614988602086016147f2565b925060408501359150606085013567ffffffffffffffff8111156149aa578182fd5b6149b687828801614809565b91505092959194509250565b600080604083850312156149d4578182fd5b6149dd836147f2565b9150602083013580151581146149f1578182fd5b809150509250929050565b60008060408385031215614a0e578182fd5b614a17836147f2565b946020939093013593505050565b600060408284031215614a36578081fd5b82601f830112614a44578081fd5b614a4e6040615049565b808385604086011115614a5f578384fd5b835b6002811015614a9657813567ffffffffffffffff81168114614a81578586fd5b84526020938401939190910190600101614a61565b509095945050505050565b600060208284031215614ab2578081fd5b8135614358816151b8565b600060208284031215614ace578081fd5b8151614358816151b8565b60008060408385031215614aeb578182fd5b823567ffffffffffffffff80821115614b02578384fd5b614b0e86838701614809565b93506020850135915080821115614b23578283fd5b50614b3085828601614809565b9150509250929050565b600060208284031215614b4b578081fd5b5035919050565b60008060408385031215614b64578182fd5b82359150602083013567ffffffffffffffff811115614b81578182fd5b614b3085828601614809565b60008060408385031215614b9f578182fd5b50508035926020909101359150565b600080600060608486031215614bc2578081fd5b8335925060208401359150604084013567ffffffffffffffff811115614be6578182fd5b614bf286828701614809565b9150509250925092565b600080600080600060a08688031215614c13578283fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614c45578182fd5b614c5188828901614809565b9150509295509295909350565b60008060008060008060008060008060006102608c8e031215614c7f578889fd5b8b359a5060208c0135995060408c0135985060608c0135975060808c01359650614cab60a08d016148c3565b9550614cba8d60c08e01614874565b9450614cca8d6101608e01614874565b935067ffffffffffffffff806102008e01351115614ce6578384fd5b614cf78e6102008f01358f01614809565b93506102208d01359250806102408e01351115614d12578182fd5b50614d248d6102408e01358e01614809565b90509295989b509295989b9093969950565b600080600080600060a08688031215614d4d578283fd5b853560ff81168114614d5d578384fd5b945060208601359350614d72604087016147f2565b925060608601359150608086013567ffffffffffffffff811115614c45578182fd5b60008151808452614dac8160208601602086016150e0565b601f01601f19169290920160200192915050565b60008251614dd28184602087016150e0565b9190910192915050565b60008351614dee8184602088016150e0565b835190830190614e028183602088016150e0565b01949350505050565b60008451614e1d8184602089016150e0565b845190830190614e318183602089016150e0565b8451910190614e448183602088016150e0565b0195945050505050565b60008551614e60818460208a016150e0565b855190830190614e74818360208a016150e0565b8551910190614e878183602089016150e0565b8451910190614e9a8183602088016150e0565b019695505050505050565b600087516020614eb88285838d016150e0565b885191840191614ecb8184848d016150e0565b8851920191614edd8184848c016150e0565b8751920191614eef8184848b016150e0565b8651920191614f018184848a016150e0565b8551920191614f1381848489016150e0565b919091019998505050505050505050565b600088516020614f378285838e016150e0565b895191840191614f4a8184848e016150e0565b8951920191614f5c8184848d016150e0565b8851920191614f6e8184848c016150e0565b8751920191614f808184848b016150e0565b8651920191614f928184848a016150e0565b8551920191614fa481848489016150e0565b919091019a9950505050505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614fe86080830184614d94565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561502a5783518352928401929184019160010161500e565b50909695505050505050565b6000602082526143586020830184614d94565b604051601f8201601f1916810167ffffffffffffffff81118282101715615072576150726151a2565b604052919050565b6000821982111561508d5761508d615176565b500190565b600067ffffffffffffffff808316818516808303821115614e0257614e02615176565b6000826150c4576150c461518c565b500490565b6000828210156150db576150db615176565b500390565b60005b838110156150fb5781810151838201526020016150e3565b838111156111355750506000910152565b60028104600182168061512057607f821691505b6020821081141561514157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561515b5761515b615176565b5060010190565b6000826151715761517161518c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461164a57600080fdfea264697066735822122060936cf9c7035166ebf239fc2b1c5b2ae6d469d9351f9c11a9b4c96cd3ad43c664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2300,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2302,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2306,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2310,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2314,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2320,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3267,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 121,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_owner",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4368,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "_admin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5792,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "cooldowns",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint64)2_storage"
      },
      {
        "astId": 5795,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "maxLevel",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5798,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "expirationTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5801,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "breedCountMax",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5804,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "boneCountMax",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5809,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragons",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Metadata)5779_storage)"
      },
      {
        "astId": 5814,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragonChildrens",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5819,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragonAttributes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Attribute)7354_storage)"
      },
      {
        "astId": 5824,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragonSkills",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(Skills)7386_storage)"
      },
      {
        "astId": 5828,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragonBreedCount",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5832,
        "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
        "label": "dragonBoneCount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)2_storage": {
        "base": "t_uint64",
        "encoding": "inplace",
        "label": "uint64[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Attribute)7354_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonMetadata.Attribute)",
        "numberOfBytes": "32",
        "value": "t_struct(Attribute)7354_storage"
      },
      "t_mapping(t_uint256,t_struct(Metadata)5779_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonBase.Metadata)",
        "numberOfBytes": "32",
        "value": "t_struct(Metadata)5779_storage"
      },
      "t_mapping(t_uint256,t_struct(Skills)7386_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonMetadata.Skills)",
        "numberOfBytes": "32",
        "value": "t_struct(Skills)7386_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attribute)7354_storage": {
        "encoding": "inplace",
        "label": "struct DragonMetadata.Attribute",
        "members": [
          {
            "astId": 7345,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7347,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "attack",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7349,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "defense",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7351,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "speed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7353,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "lifeForce",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Metadata)5779_storage": {
        "encoding": "inplace",
        "label": "struct DragonBase.Metadata",
        "members": [
          {
            "astId": 5764,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "job",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5766,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "birthTime",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5768,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "cooldownTime",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5770,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "geneDomi",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5772,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "geneRece",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5774,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "matronId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5776,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "sireId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5778,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "stage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Skills)7386_storage": {
        "encoding": "inplace",
        "label": "struct DragonMetadata.Skills",
        "members": [
          {
            "astId": 7367,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "horn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7369,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "hornLevel",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7371,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "ear",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7373,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "earLevel",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7375,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "wing",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7377,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "wingLevel",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7379,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "tail",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7381,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "tailLevel",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7383,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "talent",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7385,
            "contract": "contracts/DragonMainlandToken.sol:DragonMainlandToken",
            "label": "talentLevel",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}