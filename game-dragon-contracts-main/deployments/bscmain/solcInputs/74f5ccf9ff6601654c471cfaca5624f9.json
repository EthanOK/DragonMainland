{
  "language": "Solidity",
  "sources": {
    "contracts/Adminable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract Adminable is Context {\n    address internal _admin;\n\n    event AdminTransferred(\n        address indexed previousAdmin,\n        address indexed newAdmin\n    );\n\n    constructor() {\n        _setAdmin(_msgSender());\n    }\n\n    function admin() public view virtual returns (address) {\n        return _admin;\n    }\n\n    modifier onlyAdmin() {\n        require(admin() == _msgSender(), \"Adminable: caller is not the admin\");\n        _;\n    }\n\n    function renounceAdmin() external virtual onlyAdmin {\n        _setAdmin(address(0));\n    }\n\n    function transferAdmin(address newAdmin) external virtual onlyAdmin {\n        require(\n            newAdmin != address(0),\n            \"Adminable: new admin is the zero address\"\n        );\n        _setAdmin(newAdmin);\n    }\n\n    function _setAdmin(address newAdmin) private {\n        address oldAdmin = _admin;\n        _admin = newAdmin;\n        emit AdminTransferred(oldAdmin, newAdmin);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DragonStakingV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./Adminable.sol\";\n\n/**\n * dragon contract staking V1\n * earn DMP token\n * DMP token transfer or withdraw not in this contract\n */\n\n// dragon mainland token interface\ninterface IDragonToken {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}\n\nabstract contract DragonStakingV1Base is Pausable, Ownable {\n    // per block event\n    event PerBlock(uint256 block);\n    // per cycle event\n    event PerCycle(uint256 cycle);\n    // staking data event\n    event StakeData(\n        address indexed account,\n        uint256 power,\n        uint256 hashRate,\n        uint256 tokenId,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 amount\n    );\n    // stake earn event\n    event StakedEarn(\n        address indexed account,\n        uint256 indexed tokenId,\n        uint256 power,\n        uint256 amount\n    );\n\n    // staking data\n    struct StakingData {\n        address account;\n        uint256 power;\n        uint256 hashRate;\n        uint256 tokenId;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 amount;\n    }\n\n    // per block 9 DMP token\n    uint256 public perBlock = 9 ether;\n\n    // base hashrate\n    uint256 public baseHashRate = 331;\n\n    // per cycle 3 hours\n    uint256 public perCycle = 3 hours;\n\n    // sign expiration time\n    uint64 internal _expirationTime = 180;\n\n    // dragon tokenId staking data\n    mapping(uint256 => StakingData) public stakingDatas;\n\n    // dragon tokenId staked state\n    mapping(uint256 => bool) public stakedState;\n\n    // dragon tokenId staked DMP earn total\n    mapping(uint256 => uint256) public stakedDatas;\n\n    // account staking tokenId list\n    mapping(address => uint256[]) internal stakingTokenIds;\n\n    // stake total\n    // dragonTotal => 0x647261676f6e546f74616c\n    // accountTotal => 0x6163636f756e74546f74616c\n    // dmpTotal => 0x646d70546f74616c\n    mapping(bytes => uint256) public stakeTotals;\n\n    // set pre block\n    function setPerBlock(uint256 _block) external onlyOwner {\n        require(_block > 0, \"invalid perblock\");\n        perBlock = _block;\n        emit PerBlock(_block);\n    }\n\n    // set pre cycle\n    function setPerCycle(uint256 _cycle) external onlyOwner {\n        require(_cycle > 0, \"invalid perCycle\");\n        perCycle = _cycle;\n        emit PerCycle(_cycle);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n\n/// dragon mainland token ERC721 staking V1\ncontract DragonStakingV1 is\n    Pausable,\n    ERC721Holder,\n    DragonStakingV1Base,\n    Adminable\n{\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    // dragon token\n    IDragonToken public dragonToken;\n\n    constructor(address _dragon, address admin_) {\n        require(_dragon != address(0), \"dragon address is zero\");\n        require(admin_ != address(0), \"admin address is zero\");\n        dragonToken = IDragonToken(_dragon);\n        _admin = admin_;\n    }\n\n    // hashRate calc\n    function _hashRateCalc(uint256 _hashRate) private view returns (uint256) {\n        return (perBlock * _hashRate) / baseHashRate;\n    }\n\n    // stake calc\n    // returns (dmsAmt, power)\n    function _stakeCalc(uint256 _tokenId, uint256 _hashRate)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 _value = _hashRateCalc(_hashRate);\n        StakingData memory _data = stakingDatas[_tokenId];\n        uint256 endTime = block.timestamp > _data.endTime\n            ? _data.endTime\n            : block.timestamp;\n        // floor cycle value (math.floor)\n        uint256 _cycle = (endTime - _data.startTime) / perCycle;\n        // ceil power value (math.ceil)\n        uint256 _power = (endTime - _data.startTime + perCycle - 1) / perCycle;\n        if (_cycle < 1) {\n            return (0, 0, _cycle);\n        }\n        return (_cycle * _value, _data.power - _power, _cycle);\n    }\n\n    // stake dragon token\n    // earn DMP token\n    function stake(\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _hashRates,\n        uint256 _powers,\n        uint64 _timestamp,\n        bytes memory _sign\n    ) external whenNotPaused returns (bool) {\n        require(\n            _tokenIds.length > 0 && _tokenIds.length == _hashRates.length,\n            \"invalid tokenIds or hashRates\"\n        );\n        require(\n            _timestamp + _expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        require(\n            _powers > 0 && _powers % _tokenIds.length == 0,\n            \"invalid power\"\n        );\n\n        uint256 _powerOne = _powers / _tokenIds.length;\n        require(_powerOne <= 8, \"invalid powerOne\");\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(_tokenIds[i] > 0, \"invalid tokenId\");\n            require(_hashRates[i] > 0, \"invalid hashRate\");\n            require(!stakedState[_tokenIds[i]], \"invalid stake state\");\n            require(\n                dragonToken.ownerOf(_tokenIds[i]) == msg.sender,\n                \"invalid owner\"\n            );\n        }\n\n        // verify sign message\n        string memory _message = _signStake(\n            _tokenIds,\n            _hashRates,\n            _powers,\n            _timestamp\n        );\n        _verifyAdmin(_message, _sign);\n\n        if (stakingTokenIds[msg.sender].length == 0) {\n            stakeTotals[bytes(\"accountTotal\")] += 1;\n        }\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            dragonToken.safeTransferFrom(msg.sender, address(this), _tokenId);\n\n            StakingData memory _data = StakingData({\n                account: msg.sender,\n                power: _powerOne,\n                hashRate: _hashRates[i],\n                tokenId: _tokenId,\n                startTime: block.timestamp,\n                endTime: block.timestamp + perCycle * _powerOne,\n                amount: 0\n            });\n            stakingDatas[_tokenId] = _data;\n            emit StakeData(\n                _data.account,\n                _data.power,\n                _data.hashRate,\n                _data.tokenId,\n                _data.startTime,\n                _data.endTime,\n                _data.amount\n            );\n\n            if (stakingTokenIds[msg.sender].length == 0) {\n                stakingTokenIds[msg.sender] = [_tokenId];\n            } else {\n                stakingTokenIds[msg.sender].push(_tokenId);\n            }\n            if (!stakedState[_tokenId]) {\n                stakeTotals[bytes(\"dragonTotal\")] += 1;\n                stakedState[_tokenId] = true;\n            }\n        }\n\n        return true;\n    }\n\n    // cancel stake dragon\n    function unStake(uint256[] calldata _tokenIds)\n        external\n        whenNotPaused\n        returns (bool)\n    {\n        require(_tokenIds.length > 0, \"invalid tokenIds\");\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            require(_tokenId > 0, \"invalid tokenId\");\n            StakingData storage _data = stakingDatas[_tokenId];\n            require(_data.account == msg.sender, \"invalid account\");\n            require(stakedState[_tokenId], \"invalid stake state\");\n            uint256 _currHashRate = _data.hashRate;\n\n            // dragon to account\n            dragonToken.safeTransferFrom(\n                address(this),\n                _data.account,\n                _tokenId\n            );\n\n            // earn log\n            uint256 _dmpAmt;\n            uint256 _power;\n            uint256 _cycle;\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\n            stakeTotals[bytes(\"dmpTotal\")] += _dmpAmt;\n            stakedDatas[_tokenId] += _dmpAmt;\n            _data.amount += _dmpAmt;\n            _data.power = _power;\n            emit StakedEarn(msg.sender, _tokenId, _power, _dmpAmt);\n\n            // delete tokenId\n            uint256 _len = stakingTokenIds[msg.sender].length;\n            for (uint256 j = 0; j < _len; j++) {\n                if (stakingTokenIds[msg.sender][j] == _tokenId) {\n                    stakingTokenIds[msg.sender][j] = stakingTokenIds[\n                        msg.sender\n                    ][_len - 1];\n                    stakingTokenIds[msg.sender].pop();\n                    break;\n                }\n            }\n\n            // account total\n            if (stakingTokenIds[msg.sender].length == 0) {\n                stakeTotals[bytes(\"accountTotal\")] -= 1;\n            }\n\n            // staked state\n            if (stakedState[_tokenId]) {\n                stakeTotals[bytes(\"dragonTotal\")] -= 1;\n                stakedState[_tokenId] = false;\n            }\n\n            // dragon data reset\n            _data.startTime = 0;\n            _data.endTime = 0;\n        }\n\n        return true;\n    }\n\n    // dragon stake earn DMP token\n    function stakeEarn(uint256[] calldata _tokenIds)\n        external\n        whenNotPaused\n        returns (bool)\n    {\n        require(_tokenIds.length > 0, \"invalid tokenIds\");\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            require(_tokenId > 0, \"invalid tokenId\");\n            StakingData storage _data = stakingDatas[_tokenId];\n            require(_data.account == msg.sender, \"invalid account\");\n            require(stakedState[_tokenId], \"invalid stake state\");\n            uint256 _currHashRate = _data.hashRate;\n\n            // earn log\n            uint256 _dmpAmt;\n            uint256 _power;\n            uint256 _cycle;\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\n            require(_cycle > 0, \"time is too short\");\n            stakeTotals[bytes(\"dmpTotal\")] += _dmpAmt;\n            stakedDatas[_tokenId] += _dmpAmt;\n            _data.startTime += perCycle * _cycle;\n            _data.amount += _dmpAmt;\n            _data.power -= _cycle;\n            emit StakedEarn(msg.sender, _tokenId, 0, _dmpAmt);\n        }\n\n        return true;\n    }\n\n    // dragon stake power earn DMP token\n    function stakePower(\n        uint256[] calldata _tokenIds,\n        uint256 _powers,\n        uint64 _timestamp,\n        bytes memory _sign\n    ) external whenNotPaused returns (bool) {\n        require(\n            _timestamp + _expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        require(_tokenIds.length > 0, \"invalid tokenIds\");\n        require(\n            _powers > 0 && _powers % _tokenIds.length == 0,\n            \"invalid power\"\n        );\n        uint256 _powerOne = _powers / _tokenIds.length;\n        require(_powerOne <= 8, \"invalid powerOne\");\n\n        uint256[] memory _hashRates = new uint256[](_tokenIds.length);\n\n        // verify sign message\n        string memory _message = _signStake(\n            _tokenIds,\n            _hashRates,\n            _powers,\n            _timestamp\n        );\n        _verifyAdmin(_message, _sign);\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            require(_tokenId > 0, \"invalid tokenId\");\n            StakingData storage _data = stakingDatas[_tokenId];\n            require(_data.account == msg.sender, \"invalid account\");\n            require(stakedState[_tokenId], \"invalid stake state\");\n            require(\n                block.timestamp >= _data.endTime,\n                \"stake was not completed\"\n            );\n            uint256 _currHashRate = _data.hashRate;\n\n            // earn log\n            uint256 _dmpAmt;\n            uint256 _power;\n            uint256 _cycle;\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\n            stakeTotals[bytes(\"dmpTotal\")] += _dmpAmt;\n            stakedDatas[_tokenId] += _dmpAmt;\n            _data.startTime = block.timestamp;\n            _data.amount += _dmpAmt;\n            _data.power = _power;\n            emit StakedEarn(msg.sender, _tokenId, 0, _dmpAmt);\n\n            // add power & endTime\n            _data.endTime = block.timestamp + perCycle * _powerOne;\n            _data.power += _powerOne;\n        }\n\n        return true;\n    }\n\n    // account earn DMP token total\n    function accountTotal(address _account) external view returns (uint256) {\n        require(_account != address(0), \"invalid account address\");\n        uint256[] memory _tokenIds = stakingTokenIds[_account];\n        uint256 _total;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            _total += stakedDatas[_tokenId];\n        }\n        return _total;\n    }\n\n    // account staking tokenIds\n    function getStakingTokenIds(address _account)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory _tokenIds = stakingTokenIds[_account];\n        return _tokenIds;\n    }\n\n    // verify admin\n    function _verifyAdmin(string memory data, bytes memory _sign) private view {\n        bytes32 message = keccak256(abi.encodePacked(data));\n        bytes32 ethSignedHash = message.toEthSignedMessageHash();\n        require(ethSignedHash.recover(_sign) == admin(), \"sign message fault\");\n    }\n\n    // sign stake data\n    function _signStake(\n        uint256[] calldata _tokenIds,\n        uint256[] memory _hashRates,\n        uint256 _powers,\n        uint64 _timestamp\n    ) private pure returns (string memory) {\n        bytes memory message = bytes(_powers.toString());\n        message = abi.encodePacked(message, uint256(_timestamp).toString());\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            message = abi.encodePacked(\n                message,\n                _tokenIds[i].toString(),\n                _hashRates[i].toString()\n            );\n        }\n        return string(message);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/DragonMiraclePotionOld.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// dragon miracle potion base contract\nabstract contract DragonMiraclePotionBase is Pausable, AccessControl {\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(OWNER_ROLE, msg.sender);\n    }\n\n    // mint max amount event\n    event MintMaxAmount(uint256 newAmt, uint256 oldAmt);\n\n    // set platform account event\n    event PlatformAccount(address newAcct, address oldAcct);\n\n    // mint withdraw data\n    event MintWithdraw(\n        address indexed to,\n        uint256 amount,\n        uint256 fee,\n        uint64 _timestamp\n    );\n\n    // 10w eth\n    uint256 public mintMaxAmount = 100000 ether;\n\n    // totalSupplys\n    uint256 public totalSupplys;\n\n    // platform account\n    address public platformAccount;\n\n    // minted sign\n    mapping(address => bytes) public mintedSign;\n    // minted last timestamp\n    mapping(address => uint64) public mintedTime;\n    // minted withdraw\n    mapping(address => uint256) public mintedWithdraw;\n    // minted withdraw total\n    mapping(address => uint256) public mintedTotal;\n    mapping(address => uint256) public mintedTotalFee;\n\n    // sign expiration time\n    uint64 internal _expirationTime = 180;\n\n    function pause() external onlyRole(OWNER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(OWNER_ROLE) {\n        _unpause();\n    }\n\n    // set mint max amount\n    function setMintMaxAmount(uint256 _amount) external onlyRole(OWNER_ROLE) {\n        require(_amount > 0, \"invalid amount\");\n        uint256 _old = mintMaxAmount;\n        mintMaxAmount = _amount;\n        emit MintMaxAmount(_amount, _old);\n    }\n\n    // set platform account\n    function setPlatformAccount(address _account)\n        external\n        onlyRole(OWNER_ROLE)\n    {\n        require(_account != address(0), \"invalid account\");\n        emit PlatformAccount(_account, platformAccount);\n        platformAccount = _account;\n    }\n}\n\n/**\n * Dragon Miracle Potion ERC20 Token\n */\ncontract DragonMiraclePotionTokenOld is\n    ERC20,\n    ERC20Burnable,\n    Pausable,\n    DragonMiraclePotionBase\n{\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    constructor(address _account, address _minter)\n        ERC20(\"Dragon Miracle Potion\", \"DMP\")\n    {\n        require(_account != address(0), \"invalid platform account\");\n        require(_minter != address(0), \"invalid minter\");\n\n        platformAccount = _account;\n        _setupRole(MINTER_ROLE, _minter);\n    }\n\n    // verify minter\n    function _verifyMint(string memory data, bytes memory _sign) private view {\n        bytes32 message = keccak256(abi.encodePacked(data));\n        bytes32 ethSignedHash = message.toEthSignedMessageHash();\n        address _minter = ethSignedHash.recover(_sign);\n        require(hasRole(MINTER_ROLE, _minter), \"sign message fault\");\n    }\n\n    // sign mint data\n    function _signMint(\n        address to,\n        uint256 amount,\n        uint256 _feeAmt,\n        uint64 _timestamp\n    ) private pure returns (string memory) {\n        bytes memory message = abi.encodePacked(\n            uint256(uint160(to)).toString(),\n            uint256(amount).toString(),\n            uint256(_feeAmt).toString(),\n            uint256(_timestamp).toString()\n        );\n        return string(message);\n    }\n\n    function isSameday(uint256 _timestamp) public view returns (bool) {\n        uint256 _days = block.timestamp / 86400;\n        return _timestamp >= _days * 86400 && _timestamp < (_days + 1) * 86400;\n    }\n\n    // mint\n    // _feeAmt >= 0\n    // one day mint let maxAmount\n    function mint(\n        address to,\n        uint256 amount,\n        uint256 _feeAmt,\n        uint64 _timestamp,\n        bytes memory _sign\n    ) external whenNotPaused returns (bool) {\n        require(amount > 0 && amount <= mintMaxAmount, \"invalid mintMaxAmount\");\n        require(\n            _timestamp + _expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        require(_sign.length > 0, \"invalid sign\");\n        bytes memory prevSign = mintedSign[to];\n        require(keccak256(prevSign) != keccak256(_sign), \"sign is used\");\n        require(mintedTime[to] < _timestamp, \"invalid minted time\");\n\n        // verify sign message\n        string memory _message = _signMint(to, amount, _feeAmt, _timestamp);\n        _verifyMint(_message, _sign);\n\n        bool sameDay = isSameday(_timestamp);\n        if (!sameDay) {\n            mintedWithdraw[to] = amount;\n        } else {\n            mintedWithdraw[to] += amount;\n        }\n        require(\n            mintedWithdraw[to] <= mintMaxAmount,\n            \"mintedWithdraw gt mintMaxAmount\"\n        );\n\n        totalSupplys += amount;\n        _mint(to, amount);\n        mintedTotal[to] += amount;\n        if (_feeAmt > 0) {\n            _mint(platformAccount, _feeAmt);\n            mintedTotalFee[to] += _feeAmt;\n        }\n        mintedSign[to] = _sign;\n        mintedTime[to] = _timestamp;\n        emit MintWithdraw(to, amount, _feeAmt, _timestamp);\n        return true;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/DragonMiraclePotion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// dragon miracle potion base contract\nabstract contract DragonMiraclePotionBase is Pausable, AccessControl {\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(OWNER_ROLE, msg.sender);\n        _setupRole(\n            OWNER_ROLE,\n            address(0xe0C33CD3296ce1cdb3b102afDbaC43d35016954e)\n        );\n        _setupRole(\n            OWNER_ROLE,\n            address(0x1443E0447037903a02eD45050C7b4B49a81fB6Be)\n        );\n    }\n\n    // mint max amount event\n    event MintMaxAmount(uint256 newAmt, uint256 oldAmt);\n\n    // set platform account event\n    event PlatformAccount(address newAcct, address oldAcct);\n\n    // mint withdraw data\n    event MintWithdraw(\n        address indexed to,\n        uint256 amount,\n        uint256 fee,\n        uint64 _timestamp\n    );\n\n    // 10w eth\n    uint256 public mintMaxAmount = 100000 ether;\n\n    // totalSupplys\n    uint256 public totalSupplys;\n\n    // platform account\n    address public platformAccount;\n\n    // minted sign\n    mapping(address => bytes) public mintedSign;\n    // minted last timestamp\n    mapping(address => uint64) public mintedTime;\n    // minted withdraw\n    mapping(address => uint256) public mintedWithdraw;\n    // minted withdraw total\n    mapping(address => uint256) public mintedTotal;\n    mapping(address => uint256) public mintedTotalFee;\n\n    // sign expiration time\n    uint64 internal _expirationTime = 180;\n\n    function pause() external onlyRole(OWNER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(OWNER_ROLE) {\n        _unpause();\n    }\n\n    // set mint max amount\n    function setMintMaxAmount(uint256 _amount) external onlyRole(OWNER_ROLE) {\n        require(_amount > 0, \"invalid amount\");\n        uint256 _old = mintMaxAmount;\n        mintMaxAmount = _amount;\n        emit MintMaxAmount(_amount, _old);\n    }\n\n    // set platform account\n    function setPlatformAccount(address _account)\n        external\n        onlyRole(OWNER_ROLE)\n    {\n        require(_account != address(0), \"invalid account\");\n        emit PlatformAccount(_account, platformAccount);\n        platformAccount = _account;\n    }\n}\n\n/**\n * Dragon Miracle Potion ERC20 Token\n */\ncontract DragonMiraclePotionToken is\n    ERC20,\n    ERC20Burnable,\n    Pausable,\n    DragonMiraclePotionBase\n{\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    constructor(address _account, address[] memory _minters)\n        ERC20(\"Dragon Miracle Potion\", \"DMP\")\n    {\n        require(_account != address(0), \"invalid platform account\");\n        require(_minters.length > 0, \"invalid minter\");\n\n        platformAccount = _account;\n        for (uint256 i = 0; i < _minters.length; i++) {\n            _setupRole(MINTER_ROLE, _minters[i]);\n        }\n    }\n\n    function isSameday(uint256 _timestamp) public view returns (bool) {\n        uint256 _days = block.timestamp / 86400;\n        return _timestamp >= _days * 86400 && _timestamp < (_days + 1) * 86400;\n    }\n\n    // mint\n    // _feeAmt >= 0\n    // one day mint let maxAmount\n    function mint(\n        address to,\n        uint256 amount,\n        uint256 _feeAmt,\n        uint64 _timestamp\n    ) external whenNotPaused onlyRole(MINTER_ROLE) returns (bool) {\n        require(amount > 0 && amount <= mintMaxAmount, \"invalid mintMaxAmount\");\n        require(\n            _timestamp + _expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        require(mintedTime[to] < _timestamp, \"invalid minted time\");\n\n        bool sameDay = isSameday(_timestamp);\n        if (!sameDay) {\n            mintedWithdraw[to] = amount;\n        } else {\n            mintedWithdraw[to] += amount;\n        }\n        require(\n            mintedWithdraw[to] <= mintMaxAmount,\n            \"mintedWithdraw gt mintMaxAmount\"\n        );\n\n        totalSupplys += amount;\n        _mint(to, amount);\n        mintedTotal[to] += amount;\n        if (_feeAmt > 0) {\n            _mint(platformAccount, _feeAmt);\n            mintedTotalFee[to] += _feeAmt;\n        }\n        mintedTime[to] = _timestamp;\n        emit MintWithdraw(to, amount, _feeAmt, _timestamp);\n        return true;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/DragonMainlandBone.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// dragon mainland bone\n// WATER 11 12 13\n// FIRE 21 22 23\n// ROCK 31 32 33\n// STORM 41 42 43\n// THUNDER 51 52 53\ncontract DragonMainlandBone is\n    ERC1155,\n    AccessControl,\n    Pausable,\n    ERC1155Burnable,\n    ReentrancyGuard\n{\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    // change dmsToken event\n    event ChangeDmsToken(address newAddress);\n    // change dmpToken event\n    event ChangeDmpToken(address newAddress);\n    // beneficiary event\n    event Beneficiary(address newAddr, address oldAddr);\n    event ChangeDmsFees(uint256[2] newDmsFees);\n    event ChangeDmpFees(uint256[2] newDmpFees);\n    // compound event\n    event Compound(\n        address indexed account,\n        uint256 id,\n        uint256 amount,\n        uint256 newid\n    );\n    // compound limit\n    event CompoundLimit(uint256 newLimit, uint256 oldLimit);\n    // compound amount\n    event CompoundAmount(uint256 newAmount, uint256 oldAmount);\n    // compound weight\n    event CompoundWeight(uint256 newWeight, uint256 oldWeight);\n\n    uint256 public compoundLimit = 3;\n    uint256 public compoundAmount = 5;\n    uint256 public compoundWeight = 50;\n    // dms fees\n    uint256[2] public dmsFees = [0.1 ether, 0.2 ether];\n    // dmp fees\n    uint256[2] public dmpFees = [50 ether, 100 ether];\n    // token\n    IERC20 public dmsToken = IERC20(0x9a26e6D24Df036B0b015016D1b55011c19E76C87);\n    // DMP token\n    IERC20 public dmpToken = IERC20(0x599107669322B0E72be939331f35A693ba71EBE2);\n    // beneficiary address\n    address public beneficiary = address(0x54C3Aaa72632E1CbE6D5eC4e6e4F2D148E438bea);\n\n    constructor(address[] memory owners, address[] memory minters)\n        ERC1155(\"https://dragonmainland.io/storage/item/{id}.json\")\n    {\n        require(owners.length > 0, \"invalid owners\");\n        require(minters.length > 0, \"invalid minters\");\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        for (uint256 i = 0; i < owners.length; i++) {\n            _setupRole(OWNER_ROLE, owners[i]);\n        }\n        for (uint256 i = 0; i < minters.length; i++) {\n            _setupRole(MINTER_ROLE, minters[i]);\n        }\n    }\n\n    modifier checkAddr(address _address) {\n        require(_address != address(0), \"address is zero\");\n        _;\n    }\n\n    function setURI(string memory newuri) external onlyRole(OWNER_ROLE) {\n        _setURI(newuri);\n    }\n\n    // set DMS token address\n    function setDmsToken(address _address)\n        external\n        onlyRole(OWNER_ROLE)\n        checkAddr(_address)\n    {\n        emit ChangeDmsToken(_address);\n        dmsToken = IERC20(_address);\n    }\n\n    // set DMP token address\n    function setDmpToken(address _address)\n        external\n        onlyRole(OWNER_ROLE)\n        checkAddr(_address)\n    {\n        emit ChangeDmpToken(_address);\n        dmpToken = IERC20(_address);\n    }\n\n    // set beneficiary address\n    function setBeneficiary(address _address)\n        external\n        onlyRole(OWNER_ROLE)\n        checkAddr(_address)\n    {\n        emit Beneficiary(_address, beneficiary);\n        beneficiary = _address;\n    }\n\n    // set DMS amount\n    function setDmsFees(uint256[2] calldata _dmsFees)\n        external\n        onlyRole(OWNER_ROLE)\n    {\n        dmsFees = _dmsFees;\n        emit ChangeDmsFees(_dmsFees);\n    }\n\n    // set DMP amount\n    function setDmpFees(uint256[2] calldata _dmpFees)\n        external\n        onlyRole(OWNER_ROLE)\n    {\n        dmpFees = _dmpFees;\n        emit ChangeDmpFees(_dmpFees);\n    }\n\n    function pause() external onlyRole(OWNER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(OWNER_ROLE) {\n        _unpause();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC1155, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external whenNotPaused onlyRole(MINTER_ROLE) nonReentrant {\n        _mint(account, id, amount, data);\n    }\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external whenNotPaused onlyRole(MINTER_ROLE) nonReentrant {\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    // set compound limit\n    function setCompoundLimit(uint256 _limit) external onlyRole(OWNER_ROLE) {\n        require(_limit > 0, \"invalid compound limit\");\n        emit CompoundLimit(_limit, compoundLimit);\n        compoundLimit = _limit;\n    }\n\n    // set compound amount\n    function setCompoundAmount(uint256 _amount) external onlyRole(OWNER_ROLE) {\n        require(_amount > 0, \"invalid compound amount\");\n        emit CompoundAmount(_amount, compoundAmount);\n        compoundAmount = _amount;\n    }\n\n    // set compound weight\n    function setCompoundWeight(uint256 _weight) external onlyRole(OWNER_ROLE) {\n        require(_weight > 0, \"invalid compound weight\");\n        emit CompoundWeight(_weight, compoundWeight);\n        compoundWeight = _weight;\n    }\n\n    function _random() internal view returns (uint256) {\n        uint256 rand = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp,\n                    block.difficulty,\n                    blockhash(block.number),\n                    block.coinbase,\n                    msg.sender\n                )\n            )\n        );\n        return rand % 100 < compoundWeight ? 0 : 1;\n    }\n\n    // compound dragon bone\n    // 50%=0 50%=1\n    function compound(uint256 _id, uint256 _amount)\n        external\n        whenNotPaused\n        returns (uint256)\n    {\n        require(_amount == compoundAmount, \"invalid compound amount\");\n        uint256 _currLevel = _id % 10;\n        require(_currLevel < compoundLimit, \"invalid compound limit\");\n        require(balanceOf(msg.sender, _id) >= _amount, \"balance is not enough\");\n        // dms dmp transfer\n        uint256 _dmsFee = dmsFees[_currLevel - 1];\n        uint256 _dmpFee = dmpFees[_currLevel - 1];\n        require(\n            dmsToken.balanceOf(msg.sender) >= _dmsFee,\n            \"DMS balance not enough\"\n        );\n        require(\n            dmpToken.balanceOf(msg.sender) >= _dmpFee,\n            \"DMP balance not enough\"\n        );\n        require(\n            dmsToken.transferFrom(msg.sender, beneficiary, _dmsFee),\n            \"dms transfer failure\"\n        );\n        require(\n            dmpToken.transferFrom(msg.sender, beneficiary, _dmpFee),\n            \"dmp transfer failure\"\n        );\n        _burn(msg.sender, _id, _amount);\n        uint256 newid = _id + _random();\n        _mint(msg.sender, newid, 1, \"\");\n        emit Compound(msg.sender, _id, _amount, newid);\n        return newid;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/DragonMainlandToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./Adminable.sol\";\nimport \"./DragonMetadata.sol\";\n\n/**\n * dragon mainland token contract\n * NFT ERC721\n */\n\n// dragon base\ncontract DragonBase is DragonMetadata, Ownable {\n    event Birth(\n        address indexed owner,\n        uint256 tokenId,\n        uint8 jobId,\n        uint64 birthTime,\n        uint64 cooldownTime\n    );\n\n    event DragonMetaLog(\n        uint256 indexed tokenId,\n        uint256 geneDomi,\n        uint256 geneRece,\n        uint256 matronId,\n        uint256 sireId,\n        uint16 stage\n    );\n\n    event DragonAttributesLog(\n        uint256 indexed tokenId,\n        uint256 health,\n        uint256 attack,\n        uint256 defense,\n        uint256 speed,\n        uint256 lifeForce\n    );\n\n    event DragonAttributeLog(\n        uint256 indexed tokenId,\n        uint256 attrId,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event DragonSkillsLog(\n        uint256 indexed tokenId,\n        uint256 horn,\n        uint256 hornLevel,\n        uint256 ear,\n        uint256 earLevel,\n        uint256 wing,\n        uint256 wingLevel,\n        uint256 tail,\n        uint256 tailLevel,\n        uint256 talent,\n        uint256 talentLevel\n    );\n\n    event DragonSkillLog(\n        uint256 indexed tokenId,\n        uint256 skillId,\n        uint256 oldLevel,\n        uint256 newLevel\n    );\n\n    event DragonBreed(uint256 indexed tokenId, uint256 count);\n\n    event Cooldowns(uint64[2] oldTimes, uint64[2] newTimes);\n\n    event MaxLevel(uint256 oldLevel, uint256 newLevel);\n\n    event ExpirationTime(uint256 oldTime, uint256 newTime);\n\n    event BreedCountMax(uint256 oldCount, uint256 newCount);\n\n    event BoneCountMax(uint256 oldCount, uint256 newCount);\n\n    struct Metadata {\n        uint8 job;\n        uint64 birthTime;\n        uint64 cooldownTime;\n        uint256 geneDomi;\n        uint256 geneRece;\n        uint256 matronId;\n        uint256 sireId;\n        uint16 stage;\n    }\n\n    // cooldown time\n    uint64[2] public cooldowns = [uint64(3 days), uint64(7 days)];\n    // skill max level\n    uint256 public maxLevel = 4;\n    // sign expiration time\n    uint256 public expirationTime = 600;\n    // dragon breed count max\n    uint256 public breedCountMax = 7;\n    // dragon bone count max\n    uint256 public boneCountMax = 3;\n\n    // dragon.tokenId => dragon metadata\n    mapping(uint256 => Metadata) public dragons;\n    // dragon.tokenId => children.tokenId\n    mapping(uint256 => uint256[]) internal dragonChildrens;\n    // dragon.tokenId => dragon attribute\n    mapping(uint256 => Attribute) public dragonAttributes;\n    // dragon.tokenId => dragon skill\n    mapping(uint256 => Skills) public dragonSkills;\n    // dragon.breedCount => count\n    mapping(uint256 => uint256) public dragonBreedCount;\n    // dragon.boneCount => count\n    mapping(uint256 => uint256) public dragonBoneCount;\n\n    function setCooldowns(uint64[2] memory _times) external onlyOwner {\n        emit Cooldowns(cooldowns, _times);\n        cooldowns = _times;\n    }\n\n    function setMaxLevel(uint256 _level) external onlyOwner {\n        emit MaxLevel(maxLevel, _level);\n        maxLevel = _level;\n    }\n\n    function setExpirationTime(uint256 _time) external onlyOwner {\n        emit ExpirationTime(expirationTime, _time);\n        expirationTime = _time;\n    }\n\n    function setBreedCountMax(uint256 _count) external onlyOwner {\n        emit BreedCountMax(breedCountMax, _count);\n        breedCountMax = _count;\n    }\n\n    function setBoneCountMax(uint256 _count) external onlyOwner {\n        emit BoneCountMax(boneCountMax, _count);\n        boneCountMax = _count;\n    }\n\n    // get dragon Children list\n    function dragonChildren(uint256 _tokenId)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return dragonChildrens[_tokenId];\n    }\n}\n\n// dragon mainland token ERC721\ncontract DragonMainlandToken is\n    ERC721,\n    ERC721URIStorage,\n    Pausable,\n    Ownable,\n    ERC721Burnable,\n    ReentrancyGuard,\n    Adminable,\n    DragonBase\n{\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    constructor() ERC721(\"Dragon Mainland Token\", \"DMT\") {}\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://ipfs.io/ipfs/\";\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        override(ERC721, ERC721URIStorage)\n    {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    modifier hasTokenId(uint256 _tokenId) {\n        require(_exists(_tokenId) == true, \"tokenId is not existent\");\n        _;\n    }\n\n    modifier isExpirationTime(uint256 _timestamp) {\n        require(\n            _timestamp + expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        _;\n    }\n\n    function verifyAdmin(string memory data, bytes memory _sign) public view {\n        bytes32 message = keccak256(abi.encodePacked(data));\n        bytes32 ethSignedHash = message.toEthSignedMessageHash();\n        require(ethSignedHash.recover(_sign) == admin(), \"sign message fault\");\n    }\n\n    function getDragonJob(uint256 _tokenId) external view returns (uint8 job) {\n        Metadata memory _meta = dragons[_tokenId];\n        job = _meta.job;\n    }\n\n    // create dragon eggs\n    function createDragonEggs(\n        uint8 _job,\n        uint256 _tokenId,\n        address _owner,\n        uint256 _timestamp,\n        bytes memory _sign\n    )\n        external\n        whenNotPaused\n        nonReentrant\n        isExpirationTime(_timestamp)\n        returns (bool)\n    {\n        require(_exists(_tokenId) == false, \"tokenId is exist\");\n        require(_job >= 1 && _job <= 5, \"invalid job\");\n        string memory message = string(\n            abi.encodePacked(\n                _tokenId.toString(),\n                uint256(_job).toString(),\n                _timestamp.toString()\n            )\n        );\n        verifyAdmin(message, _sign);\n\n        uint64 cooldown = _tokenId <= 10000 ? cooldowns[1] : cooldowns[0];\n        dragons[_tokenId] = Metadata({\n            job: _job,\n            birthTime: uint64(block.timestamp),\n            cooldownTime: uint64(block.timestamp) + cooldown,\n            geneDomi: 0,\n            geneRece: 0,\n            matronId: 0,\n            sireId: 0,\n            stage: 0\n        });\n        emit Birth(\n            _owner,\n            _tokenId,\n            _job,\n            uint64(block.timestamp),\n            uint64(block.timestamp) + cooldown\n        );\n        _safeMint(_owner, _tokenId);\n        return true;\n    }\n\n    function _hatchMessage(\n        uint256 _tokenId,\n        uint256 _geneDomi,\n        uint256 _geneRece,\n        uint256 _matronId,\n        uint256 _sireId,\n        uint16 _stage,\n        Attribute memory _attr,\n        Skill memory _skill,\n        uint256 _timestamp\n    ) private pure returns (string memory) {\n        string memory message = string(\n            abi.encodePacked(\n                _tokenId.toString(),\n                _geneDomi.toString(),\n                _geneRece.toString(),\n                _matronId.toString(),\n                _sireId.toString(),\n                uint256(_stage).toString()\n            )\n        );\n        message = string(\n            abi.encodePacked(\n                message,\n                _attr.health.toString(),\n                _attr.attack.toString(),\n                _attr.defense.toString(),\n                _attr.speed.toString(),\n                _attr.lifeForce.toString()\n            )\n        );\n        message = string(\n            abi.encodePacked(\n                message,\n                _skill.horn.toString(),\n                _skill.ear.toString(),\n                _skill.wing.toString(),\n                _skill.tail.toString(),\n                _skill.talent.toString(),\n                _timestamp.toString()\n            )\n        );\n        return message;\n    }\n\n    // hatch dragon eggs\n    function hatchDragonEggs(\n        uint256 _tokenId,\n        uint256 _geneDomi,\n        uint256 _geneRece,\n        uint256 _matronId,\n        uint256 _sireId,\n        uint16 _stage,\n        Attribute memory _attr,\n        Skill memory _skill,\n        string memory _uri,\n        uint256 _timestamp,\n        bytes memory _sign\n    ) external whenNotPaused nonReentrant returns (bool) {\n        require(_exists(_tokenId) == true, \"tokenId is not existent\");\n        require(\n            _timestamp + expirationTime >= block.timestamp,\n            \"expiration time\"\n        );\n        Metadata storage _dragon = dragons[_tokenId];\n        require(\n            _dragon.stage == 0 && _stage > _dragon.stage,\n            \"invalid dragon stage\"\n        );\n        require(block.timestamp >= _dragon.cooldownTime, \"dragon is cooldown\");\n        if (_tokenId > 10000) {\n            require(\n                _matronId > 0 && _sireId > 0 && _matronId != _sireId,\n                \"invalid matronId or sireId\"\n            );\n            require(ownerOf(_matronId) != address(0), \"invalid matronId owner\");\n            require(ownerOf(_sireId) != address(0), \"invalid sireId owner\");\n        } else {\n            require(\n                _matronId == 0 && _sireId == 0,\n                \"invalid matronId or sireId\"\n            );\n        }\n\n        verifyAdmin(\n            _hatchMessage(\n                _tokenId,\n                _geneDomi,\n                _geneRece,\n                _matronId,\n                _sireId,\n                _stage,\n                _attr,\n                _skill,\n                _timestamp\n            ),\n            _sign\n        );\n\n        _setDragonMeta(\n            _dragon,\n            _tokenId,\n            _geneDomi,\n            _geneRece,\n            _matronId,\n            _sireId,\n            _stage\n        );\n        dragonAttributes[_tokenId] = _attr;\n        emit DragonAttributesLog(\n            _tokenId,\n            _attr.health,\n            _attr.attack,\n            _attr.defense,\n            _attr.speed,\n            _attr.lifeForce\n        );\n\n        dragonSkills[_tokenId] = Skills(\n            _skill.horn,\n            1,\n            _skill.ear,\n            1,\n            _skill.wing,\n            1,\n            _skill.tail,\n            1,\n            _skill.talent,\n            1\n        );\n        emit DragonSkillsLog(\n            _tokenId,\n            _skill.horn,\n            1,\n            _skill.ear,\n            1,\n            _skill.wing,\n            1,\n            _skill.tail,\n            1,\n            _skill.talent,\n            1\n        );\n\n        _setTokenURI(_tokenId, _uri);\n        if (_matronId > 0) {\n            dragonChildrens[_matronId].push(_tokenId);\n        }\n        if (_sireId > 0) {\n            dragonChildrens[_sireId].push(_tokenId);\n        }\n        return true;\n    }\n\n    // dragon set metadata\n    function _setDragonMeta(\n        Metadata storage _dragon,\n        uint256 _tokenId,\n        uint256 _geneDomi,\n        uint256 _geneRece,\n        uint256 _matronId,\n        uint256 _sireId,\n        uint16 _stage\n    ) private {\n        _dragon.geneDomi = _geneDomi;\n        _dragon.geneRece = _geneRece;\n        _dragon.matronId = _matronId;\n        _dragon.sireId = _sireId;\n        _dragon.stage = _tokenId <= 10000 ? 1 : _stage;\n        _dragon.cooldownTime = 0;\n        emit DragonMetaLog(\n            _tokenId,\n            _geneDomi,\n            _geneRece,\n            _matronId,\n            _sireId,\n            _stage\n        );\n    }\n\n    function getDragonAttribute(uint256 _tokenId, uint256 _attrId)\n        public\n        view\n        returns (uint256 attr)\n    {\n        Attribute memory _attr = dragonAttributes[_tokenId];\n        AttrType attr_id = AttrType(_attrId);\n        require(uint256(attr_id) > 0, \"invalid attrId\");\n        if (attr_id == AttrType.Health) {\n            attr = _attr.health;\n        } else if (attr_id == AttrType.Attack) {\n            attr = _attr.attack;\n        } else if (attr_id == AttrType.Defense) {\n            attr = _attr.defense;\n        } else if (attr_id == AttrType.Speed) {\n            attr = _attr.speed;\n        } else if (attr_id == AttrType.LifeForce) {\n            attr = _attr.lifeForce;\n        }\n    }\n\n    function getDragonSkill(uint256 _tokenId, uint256 _skillId)\n        public\n        view\n        returns (uint256 skill, uint256 level)\n    {\n        Skills memory _skill = dragonSkills[_tokenId];\n        SkillType skill_id = SkillType(_skillId);\n        require(uint256(skill_id) > 0, \"invalid skillId\");\n        if (skill_id == SkillType.Horn) {\n            skill = _skill.horn;\n            level = _skill.hornLevel;\n        } else if (skill_id == SkillType.Ear) {\n            skill = _skill.ear;\n            level = _skill.earLevel;\n        } else if (skill_id == SkillType.Wing) {\n            skill = _skill.wing;\n            level = _skill.wingLevel;\n        } else if (skill_id == SkillType.Tail) {\n            skill = _skill.tail;\n            level = _skill.tailLevel;\n        } else if (skill_id == SkillType.Talent) {\n            skill = _skill.talent;\n            level = _skill.talentLevel;\n        }\n    }\n\n    // dragon attribute update\n    function setDragonAttribute(\n        uint256 _tokenId,\n        uint256 _attrId,\n        uint256 _value,\n        uint256 _timestamp,\n        bytes memory _sign\n    )\n        external\n        whenNotPaused\n        nonReentrant\n        hasTokenId(_tokenId)\n        isExpirationTime(_timestamp)\n        returns (bool)\n    {\n        AttrType attr_id = AttrType(_attrId);\n        require(uint256(attr_id) > 0, \"invalid attrId\");\n        uint256 curr = getDragonAttribute(_tokenId, _attrId);\n        require(_value > curr, \"invalid value\");\n        require(\n            dragonBoneCount[_tokenId] < boneCountMax,\n            \"invalid boneCountMax\"\n        );\n\n        string memory message = string(\n            abi.encodePacked(\n                _tokenId.toString(),\n                _attrId.toString(),\n                _value.toString(),\n                _timestamp.toString()\n            )\n        );\n        verifyAdmin(message, _sign);\n\n        Attribute storage _attr = dragonAttributes[_tokenId];\n        if (attr_id == AttrType.Health) {\n            _attr.health = _value;\n        } else if (attr_id == AttrType.Attack) {\n            _attr.attack = _value;\n        } else if (attr_id == AttrType.Defense) {\n            _attr.defense = _value;\n        } else if (attr_id == AttrType.Speed) {\n            _attr.speed = _value;\n        } else if (attr_id == AttrType.LifeForce) {\n            _attr.lifeForce = _value;\n        }\n        dragonBoneCount[_tokenId] += 1;\n        emit DragonAttributeLog(_tokenId, _attrId, curr, _value);\n        return true;\n    }\n\n    // dragon skill update\n    function setDragonSkill(\n        uint256 _tokenId,\n        uint256 _skillId,\n        uint256 _level,\n        uint256 _timestamp,\n        bytes memory _sign\n    )\n        external\n        whenNotPaused\n        nonReentrant\n        hasTokenId(_tokenId)\n        isExpirationTime(_timestamp)\n        returns (bool)\n    {\n        SkillType skill_id = SkillType(_skillId);\n        require(uint256(skill_id) > 0, \"invalid skillId\");\n        if (skill_id == SkillType.Talent) {\n            require(_level > 0 && _level <= maxLevel + 1, \"invalid value\");\n        } else {\n            require(_level > 0 && _level <= maxLevel, \"invalid value\");\n        }\n\n        string memory message = string(\n            abi.encodePacked(\n                _tokenId.toString(),\n                _skillId.toString(),\n                _level.toString(),\n                _timestamp.toString()\n            )\n        );\n        verifyAdmin(message, _sign);\n\n        uint256 _oldSkill;\n        uint256 _oldLevel;\n        (_oldSkill, _oldLevel) = getDragonSkill(_tokenId, _skillId);\n        require(_oldLevel < _level, \"invalid level\");\n\n        Skills storage _skill = dragonSkills[_tokenId];\n        if (skill_id == SkillType.Horn) {\n            _skill.hornLevel = _level;\n        } else if (skill_id == SkillType.Ear) {\n            _skill.earLevel = _level;\n        } else if (skill_id == SkillType.Wing) {\n            _skill.wingLevel = _level;\n        } else if (skill_id == SkillType.Tail) {\n            _skill.tailLevel = _level;\n        } else if (skill_id == SkillType.Talent) {\n            _skill.talentLevel = _level;\n        }\n\n        emit DragonSkillLog(_tokenId, _skillId, _oldLevel, _level);\n        return true;\n    }\n\n    // add dragon breed count\n    function addDragonBreedCount(\n        uint256 _tokenId,\n        uint256 _timestamp,\n        bytes memory _sign\n    )\n        external\n        whenNotPaused\n        nonReentrant\n        hasTokenId(_tokenId)\n        isExpirationTime(_timestamp)\n        returns (bool)\n    {\n        string memory message = string(\n            abi.encodePacked(_tokenId.toString(), _timestamp.toString())\n        );\n        verifyAdmin(message, _sign);\n\n        uint256 _count = dragonBreedCount[_tokenId] + 1;\n        require(_count <= breedCountMax, \"invalid breed count\");\n        dragonBreedCount[_tokenId] = _count;\n        emit DragonBreed(_tokenId, _count);\n        return true;\n    }\n\n    function setTokenURI(uint256 tokenId, string memory _tokenURI)\n        external\n        onlyAdmin\n        nonReentrant\n    {\n        _setTokenURI(tokenId, _tokenURI);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "contracts/DragonMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\n// dragon metadata\ncontract DragonMetadata {\n    // dragon job\n    enum JobType {\n        None,\n        Water,\n        Fire,\n        Rock,\n        Storm,\n        Thunder\n    }\n\n    // dragon attributes\n    enum AttrType {\n        None,\n        Health,\n        Attack,\n        Defense,\n        Speed,\n        LifeForce\n    }\n\n    // dragon skill\n    enum SkillType {\n        None,\n        Horn,\n        Ear,\n        Wing,\n        Tail,\n        Talent\n    }\n\n    // dragon attribute 5\n    struct Attribute {\n        uint256 health;\n        uint256 attack;\n        uint256 defense;\n        uint256 speed;\n        uint256 lifeForce;\n    }\n\n    // dragon skill 5\n    struct Skill {\n        uint256 horn;\n        uint256 ear;\n        uint256 wing;\n        uint256 tail;\n        uint256 talent;\n    }\n\n    // dragon skills level 5\n    struct Skills {\n        uint256 horn;\n        uint256 hornLevel;\n        uint256 ear;\n        uint256 earLevel;\n        uint256 wing;\n        uint256 wingLevel;\n        uint256 tail;\n        uint256 tailLevel;\n        uint256 talent;\n        uint256 talentLevel;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/DragonBlindbox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// DMB token abi\ninterface IDMBToken is IERC1155 {\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n}\n\n// dragon blindbox base\nabstract contract DragonBlindboxBase is AccessControl, Pausable {\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n    // set event list\n    event LevelWeight(uint256[3] oldWeight, uint256[3] newWeight);\n    event DmsAmount(uint256 oldAmount, uint256 newAmount);\n    event BoxMax(uint256 oldMax, uint256 newMax);\n    event AccountMax(uint256 oldMax, uint256 newMax);\n    event StartTime(uint256 oldTime, uint256 newTime);\n    event EndTime(uint256 oldTime, uint256 newTime);\n    event OpenTime(uint256 oldTime, uint256 newTime);\n    event Withdraw(address indexed account, uint256 amount);\n\n    // apply join event dms amount\n    event ApplyJoin(uint256 batch, address account, uint256 amount);\n    // open blindbox event\n    event OpenBlindbox(uint256 batch, address account, uint256 tokenId);\n    // lucky blindbox event\n    event LuckyBlindbox(uint256 batch, address account, uint256 tokenId);\n\n    function pause() external onlyRole(OWNER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(OWNER_ROLE) {\n        _unpause();\n    }\n\n    struct BlindboxData {\n        address account;\n        uint256 batch;\n        uint256 number;\n        uint256 amount;\n        uint256 tokenId;\n        bool opened;\n    }\n\n    // fee recipient\n    address public recipient;\n    // dms token\n    IERC20 public dmsToken;\n    // dmb token\n    IDMBToken public dmbToken;\n\n    // batch config\n    uint256 public dmsAmount = 50 ether;\n    uint256 public boxMax = 50;\n    uint256 public accountMax = 1000;\n\n    // level weight 2%,18%,80%\n    uint256[3] public levelWeight = [2, 20, 100];\n\n    // batch time\n    uint256 public startTime = 1638964800;\n    uint256 public endTime = startTime + 1 days;\n    uint256 public openTime = endTime + 1 hours;\n    // total supply opened\n    uint256 public totalSupply;\n\n    // id list\n    uint256[] internal blindboxId;\n    // batch => id => account\n    mapping(uint256 => mapping(uint256 => address)) public blindboxAccount;\n    // batch => account => BlindboxData\n    mapping(uint256 => mapping(address => BlindboxData)) public blindboxList;\n    // account => balance\n    mapping(address => uint256) public balances;\n\n    // set level weight\n    function setLevelWeight(uint256[3] calldata _weight)\n        external\n        onlyRole(OWNER_ROLE)\n    {\n        for (uint256 i = 0; i < _weight.length; i++) {\n            require(_weight[i] > 0, \"invalid weight\");\n        }\n        emit LevelWeight(levelWeight, _weight);\n        levelWeight = _weight;\n    }\n\n    // set dms amount\n    function setDmsAmount(uint256 _amount) public onlyRole(OWNER_ROLE) {\n        require(_amount > 0, \"invalid amount\");\n        emit DmsAmount(dmsAmount, _amount);\n        dmsAmount = _amount;\n    }\n\n    // set blindbox max\n    function setBoxMax(uint256 _max) public onlyRole(OWNER_ROLE) {\n        require(_max > 0, \"invalid max\");\n        emit BoxMax(boxMax, _max);\n        boxMax = _max;\n    }\n\n    // set account max\n    function setAccountMax(uint256 _max) public onlyRole(OWNER_ROLE) {\n        require(_max > 0, \"invalid max\");\n        emit AccountMax(accountMax, _max);\n        accountMax = _max;\n    }\n\n    // set start time\n    function setStartTime(uint256 _time) public onlyRole(OWNER_ROLE) {\n        require(_time > 0, \"invalid time\");\n        emit StartTime(startTime, _time);\n        startTime = _time;\n    }\n\n    // set end time\n    function setEndTime(uint256 _time) public onlyRole(OWNER_ROLE) {\n        require(_time > 0, \"invalid time\");\n        emit EndTime(endTime, _time);\n        endTime = _time;\n    }\n\n    // set open time\n    function setOpenTime(uint256 _time) public onlyRole(OWNER_ROLE) {\n        require(_time > 0, \"invalid time\");\n        emit OpenTime(openTime, _time);\n        openTime = _time;\n    }\n}\n\n// dragon blindbox\ncontract DragonBlindbox is DragonBlindboxBase, ReentrancyGuard {\n    using Counters for Counters.Counter;\n    Counters.Counter private _batchId;\n    Counters.Counter private _id;\n\n    constructor(\n        address _dmsToken,\n        address _dmbToken,\n        address[] memory owners,\n        address[] memory operators,\n        address _recipient\n    ) {\n        require(owners.length > 0, \"invalid owners\");\n        require(operators.length > 0, \"invalid operators\");\n        require(_dmsToken != address(0), \"invalid DMS Token\");\n        require(_dmbToken != address(0), \"invalid DMB Token\");\n        require(_recipient != address(0), \"invalid recipient\");\n        dmsToken = IERC20(_dmsToken);\n        dmbToken = IDMBToken(_dmbToken);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        for (uint256 i = 0; i < owners.length; i++) {\n            _setupRole(OWNER_ROLE, owners[i]);\n        }\n        for (uint256 i = 0; i < operators.length; i++) {\n            _setupRole(OPERATOR_ROLE, operators[i]);\n        }\n        recipient = _recipient;\n        _batchId.increment();\n    }\n\n    // next batch config\n    function setNextBatch(\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _openTime,\n        uint256 _amount,\n        uint256 _boxMax,\n        uint256 _accountMax\n    ) external onlyRole(OWNER_ROLE) {\n        require(block.timestamp > openTime, \"next batch after open time\");\n        _batchId.increment();\n        delete blindboxId;\n        require(_startTime > block.timestamp, \"invalid start time\");\n        require(_endTime > _startTime, \"invalid end time\");\n        require(_openTime > _endTime, \"invalid open time\");\n        require(_amount > 0, \"invalid dms amount\");\n        require(_boxMax > 0, \"invalid box max\");\n        require(_accountMax > 0, \"invalid account max\");\n        setStartTime(_startTime);\n        setEndTime(_endTime);\n        setOpenTime(_openTime);\n        setDmsAmount(_amount);\n        setBoxMax(_boxMax);\n        setAccountMax(_accountMax);\n        // id reset\n        _id.reset();\n    }\n\n    modifier checkBatch(uint256 _batch) {\n        require(_batch <= _batchId.current(), \"invalid batch\");\n        _;\n    }\n\n    // apply to join\n    // dms transfer\n    function applyJoin() external returns (bool) {\n        require(\n            block.timestamp >= startTime &&\n                block.timestamp <= endTime &&\n                startTime > 0 &&\n                endTime > 0,\n            \"invalid time\"\n        );\n        uint256 _currBatch = _batchId.current();\n        require(\n            !isApplyJoin(_currBatch, msg.sender),\n            \"The current user is already registered\"\n        );\n        _id.increment();\n        require(\n            _id.current() <= accountMax,\n            \"The Blind Box registration is full\"\n        );\n        require(\n            dmsToken.balanceOf(msg.sender) >= dmsAmount,\n            \"Your DMS balance is insufficient\"\n        );\n        require(\n            dmsToken.transferFrom(msg.sender, recipient, dmsAmount),\n            \"DMS transfer failure\"\n        );\n        balances[msg.sender] += dmsAmount;\n\n        uint256 _newId = _id.current();\n        blindboxId.push(_newId);\n        blindboxAccount[_currBatch][_newId] = msg.sender;\n        blindboxList[_currBatch][msg.sender] = BlindboxData(\n            msg.sender,\n            _currBatch,\n            _id.current(),\n            dmsAmount,\n            0,\n            false\n        );\n        emit ApplyJoin(_currBatch, msg.sender, dmsAmount);\n\n        return true;\n    }\n\n    // get batch id\n    function getBatchId() external view returns (uint256) {\n        return _batchId.current();\n    }\n\n    // get apply count\n    function getApplyCount() external view returns (uint256) {\n        return blindboxId.length;\n    }\n\n    // get blindboxId list\n    function getBlindboxId() external view returns (uint256[] memory) {\n        return blindboxId;\n    }\n\n    // is apply join succ\n    function isApplyJoin(uint256 _batch, address _account)\n        public\n        view\n        checkBatch(_batch)\n        returns (bool)\n    {\n        return blindboxList[_batch][_account].number > 0;\n    }\n\n    // is lucky blindbox\n    function isLuckyBlindbox(uint256 _batch, address _account)\n        public\n        view\n        checkBatch(_batch)\n        returns (bool)\n    {\n        return blindboxList[_batch][_account].tokenId > 0;\n    }\n\n    // is opened blindbox\n    function isOpenedBlindbox(uint256 _batch, address _account)\n        public\n        view\n        checkBatch(_batch)\n        returns (bool)\n    {\n        return blindboxList[_batch][_account].opened;\n    }\n\n    // withdraw dms token\n    function withdraw() external {\n        require(block.timestamp > openTime, \"invalid withdraw time\");\n        uint256 _balance = balances[msg.sender];\n        require(_balance > 0, \"DMS balance is zero\");\n        balances[msg.sender] = 0;\n        // deploy successful recipient manual approve 1e18 * 1e9\n        dmsToken.transferFrom(recipient, msg.sender, _balance);\n        emit Withdraw(msg.sender, _balance);\n    }\n\n    // open blindbox\n    function openBlindbox(uint256 _batch)\n        external\n        checkBatch(_batch)\n        nonReentrant\n    {\n        if (_batch == _batchId.current()) {\n            require(\n                block.timestamp > openTime && openTime > 0,\n                \"invalid open time\"\n            );\n        }\n        BlindboxData memory _box = blindboxList[_batch][msg.sender];\n        require(!_box.opened, \"The blind box has been opened\");\n        require(_box.tokenId > 0, \"You did not win a blind box\");\n        blindboxList[_batch][msg.sender].opened = true;\n        dmbToken.mint(msg.sender, _box.tokenId, 1, \"0x\");\n        totalSupply += 1;\n        emit OpenBlindbox(_batch, msg.sender, _box.tokenId);\n    }\n\n    function _random(uint256 _seed, uint256 _modulus)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 rand = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _seed,\n                    block.timestamp,\n                    block.difficulty,\n                    blockhash(block.number),\n                    block.coinbase,\n                    msg.sender\n                )\n            )\n        );\n        return rand % _modulus;\n    }\n\n    function _levelId(uint256 _level) private view returns (uint256) {\n        if (_level <= levelWeight[0]) {\n            return 3;\n        } else if (_level <= levelWeight[1]) {\n            return 2;\n        } else if (_level <= levelWeight[2]) {\n            return 1;\n        }\n        return 1;\n    }\n\n    // lucky blindbox -> tokenId\n    // Run before OpenTime\n    function luckyBlindbox(uint256 _start, uint256 _end)\n        external\n        onlyRole(OPERATOR_ROLE)\n    {\n        require(block.timestamp > endTime && endTime > 0, \"invalid end time\");\n        require(_start < _end && _end - _start <= 500, \"invalid params\");\n        uint256 _currBatch = _batchId.current();\n        uint256 _len = blindboxId.length <= boxMax ? blindboxId.length : boxMax;\n        require(_end <= _len, \"invalid end\");\n        uint256 _seed = _random(_id.current(), _len);\n        for (uint256 i = _start; i <= _end; i++) {\n            uint256 _job = _random(_seed, 5) + 1; // 1 <= job <= 5\n            uint256 _index = _random(_seed, blindboxId.length);\n            uint256 _curr = blindboxId[_index];\n            _seed = _curr;\n            address _account = blindboxAccount[_currBatch][_curr];\n            if (blindboxList[_currBatch][_account].tokenId > 0) {\n                continue;\n            }\n            blindboxId[_index] = blindboxId[blindboxId.length - 1];\n            blindboxId.pop();\n\n            uint256 _level = _random(\n                uint256(uint160(_account)),\n                levelWeight[2]\n            ) + 1; // 1 <= level <= 100\n            uint256 _newTokenId = _job * 10 + _levelId(_level);\n            BlindboxData storage _data = blindboxList[_currBatch][_account];\n            _data.tokenId = _newTokenId;\n            blindboxList[_currBatch][_account] = _data;\n            balances[_account] -= dmsAmount;\n            emit LuckyBlindbox(_batchId.current(), _account, _newTokenId);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/DragonExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./DragonTransfer.sol\";\n\n// dragon mainland token interface\ninterface IDragonToken {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    // create dragon eggs\n    function createDragonEggs(\n        uint8 _job,\n        uint256 _tokenId,\n        address _owner,\n        uint256 _timestamp,\n        bytes calldata _sign\n    ) external returns (bool);\n\n    // add dragon breed count\n    function addDragonBreedCount(\n        uint256 _tokenId,\n        uint256 _timestamp,\n        bytes calldata _sign\n    ) external returns (bool);\n}\n\n/**\n * dragon contract exchange\n */\n\n/// dragon mainland token ERC721 exchange\ncontract DragonExchange is\n    Pausable,\n    Ownable,\n    DragonTransfer,\n    ERC721Holder,\n    ReentrancyGuard\n{\n    using Counters for Counters.Counter;\n    Counters.Counter private _orderIds;\n\n    // add market\n    event AddMarket(\n        address indexed from,\n        uint256 tokenId,\n        uint256 price,\n        uint8 exType,\n        uint256 minPrice,\n        uint256 maxPrice,\n        uint256 timeHours,\n        uint256 createTime,\n        uint256 orderId\n    );\n\n    // remove market\n    event RemoveMarket(address indexed from, uint256 tokenId, uint256 orderId);\n\n    // nft exchange\n    event Exchange(\n        address indexed from,\n        address to,\n        uint256 tokenId,\n        uint256 price,\n        uint256 fee,\n        uint8 exType,\n        uint256 orderId\n    );\n\n    // dragon breed count\n    event BreedCount(address indexed from, uint256 tokenId, uint256 count);\n    // breed count max\n    event BreedCountMax(uint256 newCount, uint256 oldCount);\n    // breed cooldown time end\n    event CooldownTimeEnd(uint256 tokenId, uint256 cooldownEnd);\n    // breed data\n    event BreedData(\n        uint8 job,\n        uint256 tokenId,\n        uint256 matronId,\n        uint256 sireId,\n        address owner\n    );\n    // breed cooldown event\n    event BreedCooldown(uint256[] _days);\n    // exchange expiration time\n    uint64 internal _expirationTime = 180;\n\n    // DMT token contract\n    IDragonToken public dragonToken;\n\n    // exchange data\n    struct ExchangeData {\n        address from;\n        address to;\n        uint256 price; // price\n        uint256 create;\n        uint8 ex_type; // 1=exchange 2=auction\n        bool state;\n        uint256 min_price;\n        uint256 max_price;\n        uint256 time_hours;\n        uint256 order_id;\n    }\n\n    // dragon breed cooldown time config\n    mapping(uint256 => uint256) public breedCooldown;\n    // matron sire dragon cooldown time\n    mapping(uint256 => uint256) public cooldownTimeEnd;\n    // nft tokenId => exchange data & price\n    mapping(uint256 => ExchangeData) public exchangeDatas;\n    // dragon breed count\n    mapping(uint256 => uint256) public breedCounts;\n    // dragon breed count max\n    uint256 public breedCountMax = 7;\n    // hour cycle\n    uint256 public constant CYCLE = 3600;\n\n    function setBreedCountMax(uint256 _count) external onlyOwner {\n        require(_count > 0, \"invalid count\");\n        emit BreedCountMax(_count, breedCountMax);\n        breedCountMax = _count;\n    }\n\n    //  breed cooldown next time init data\n    function _breedCooldownInit() private {\n        breedCooldown[1] = 0 days;\n        breedCooldown[2] = 2 days;\n        breedCooldown[3] = 4 days;\n        breedCooldown[4] = 6 days;\n        breedCooldown[5] = 9 days;\n        breedCooldown[6] = 12 days;\n        breedCooldown[7] = 15 days;\n    }\n\n    // breed dragon DMP token amount\n    function setBreedCooldown(uint256[] calldata _days) external onlyOwner {\n        for (uint256 i = 0; i < _days.length; i++) {\n            require(_days[i] > 0, \"amount is zero\");\n            breedCooldown[i + 1] = _days[i];\n        }\n        emit BreedCooldown(_days);\n    }\n\n    modifier isExchange(uint256 _tokenId) {\n        require(exchangeDatas[_tokenId].state, \"invalid nft state\");\n        _;\n    }\n\n    constructor(address payable _dragon) {\n        require(_dragon != address(0), \"dragon address is zero\");\n        dragonToken = IDragonToken(_dragon);\n        _breedCooldownInit();\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // nft join market\n    // _price dms price\n    function addMarket(\n        uint256 _tokenId,\n        uint256 _price,\n        uint8 _exType,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        uint256 _timeHours\n    ) external whenNotPaused nonReentrant returns (bool) {\n        require(!exchangeDatas[_tokenId].state, \"nft is in market\");\n        require(\n            dragonToken.ownerOf(_tokenId) == msg.sender,\n            \"invalid nft owner\"\n        );\n        require(_exType == 1 || _exType == 2, \"invalid exType\");\n        if (_exType == 2) {\n            require(_minPrice > 0, \"invalid minPrice\");\n            require(_maxPrice > _minPrice, \"invalid maxPrice\");\n            require(_timeHours >= 24, \"invalid timeHours\");\n        }\n        _orderIds.increment();\n        uint256 _newOrderId = _orderIds.current();\n        dragonToken.safeTransferFrom(msg.sender, address(this), _tokenId);\n        exchangeDatas[_tokenId] = ExchangeData(\n            msg.sender,\n            address(0),\n            _price,\n            block.timestamp,\n            _exType,\n            true,\n            _minPrice,\n            _maxPrice,\n            _timeHours,\n            _newOrderId\n        );\n        emit AddMarket(\n            msg.sender,\n            _tokenId,\n            _price,\n            _exType,\n            _minPrice,\n            _maxPrice,\n            _timeHours,\n            block.timestamp,\n            _newOrderId\n        );\n        return true;\n    }\n\n    // nft remove market\n    function removeMarket(uint256 _tokenId, uint256 _orderId)\n        external\n        whenNotPaused\n        nonReentrant\n        isExchange(_tokenId)\n        returns (bool)\n    {\n        require(\n            exchangeDatas[_tokenId].from == msg.sender,\n            \"invalid nft owner\"\n        );\n\n        ExchangeData storage _exdata = exchangeDatas[_tokenId];\n        _exdata.state = false;\n        dragonToken.safeTransferFrom(address(this), msg.sender, _tokenId);\n        emit RemoveMarket(msg.sender, _tokenId, _orderId);\n        return true;\n    }\n\n    // current exchange price\n    function exchangePrice(uint256 _tokenId)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        ExchangeData memory _exdata = exchangeDatas[_tokenId];\n        if (_exdata.ex_type == 1) {\n            return (_exdata.price, 0);\n        } else if (_exdata.ex_type == 2) {\n            if (\n                block.timestamp >= _exdata.create + _exdata.time_hours * CYCLE\n            ) {\n                return (_exdata.min_price, 0);\n            }\n            uint256 _hour = (block.timestamp - _exdata.create) / CYCLE;\n            uint256 _one = (_exdata.max_price - _exdata.min_price) /\n                _exdata.time_hours;\n            uint256 _price = _exdata.max_price - (_one * _hour);\n            return (_price, _hour);\n        } else {\n            return (0, 0);\n        }\n    }\n\n    // nft exchange\n    // transfer dms token\n    function exchange(uint256 _tokenId, uint256 _orderId)\n        external\n        whenNotPaused\n        nonReentrant\n        isExchange(_tokenId)\n        returns (bool)\n    {\n        ExchangeData storage _exdata = exchangeDatas[_tokenId];\n        uint256 _balance = dmsToken.balanceOf(msg.sender);\n        uint8 _exType = _exdata.ex_type;\n        require(_exType == 1 || _exType == 2, \"invalid exchange type\");\n        uint256 _price;\n        if (_exType == 1) {\n            _price = _exdata.price;\n        } else if (_exType == 2) {\n            (uint256 _currPrice, ) = exchangePrice(_tokenId);\n            _price = _currPrice;\n        }\n        require(_exdata.order_id == _orderId, \"invalid order_id\");\n        require(_price > 0, \"invalid price\");\n        require(_balance >= _price, \"DMS balance is not enough\");\n        uint256 _fee = exchangeFee(_price);\n        // DMS token\n        dmsTransferEarn(msg.sender, _fee);\n        dmsTransferFrom(msg.sender, _exdata.from, _price - _fee);\n        // dragon nft\n        dragonToken.safeTransferFrom(address(this), msg.sender, _tokenId);\n        _exdata.to = msg.sender;\n        _exdata.state = false;\n\n        emit Exchange(\n            msg.sender,\n            _exdata.from,\n            _tokenId,\n            _price,\n            _fee,\n            _exType,\n            _orderId\n        );\n        return true;\n    }\n\n    // breed dragon eggs\n    function breedDragonEggs(\n        uint8 _job,\n        uint256 _tokenId,\n        uint256 _matronId,\n        uint256 _sireId,\n        address _owner,\n        uint256 _timestamp,\n        bytes calldata _sign,\n        bytes calldata _signMatron,\n        bytes calldata _signSire\n    ) external whenNotPaused nonReentrant returns (bool) {\n        require(_job >= 1 && _job <= 5, \"invalid job\");\n        require(_tokenId > 10000, \"invalid tokenId\");\n        require(\n            dragonToken.ownerOf(_matronId) != address(0),\n            \"invalid matronId\"\n        );\n        require(dragonToken.ownerOf(_sireId) != address(0), \"invalid matronId\");\n\n        // breed count\n        require(\n            breedCounts[_matronId] < breedCountMax,\n            \"matron breed count max\"\n        );\n        require(breedCounts[_sireId] < breedCountMax, \"sire breed count max\");\n\n        // breed cooldown\n        require(\n            block.timestamp >= cooldownTimeEnd[_matronId],\n            \"matronId is cooldown\"\n        );\n        require(\n            block.timestamp >= cooldownTimeEnd[_sireId],\n            \"sireId is cooldown\"\n        );\n\n        _breedCounts(_matronId, _sireId);\n\n        require(\n            dragonToken.addDragonBreedCount(_matronId, _timestamp, _signMatron),\n            \"addDragonBreedCount matron failure\"\n        );\n        require(\n            dragonToken.addDragonBreedCount(_sireId, _timestamp, _signSire),\n            \"addDragonBreedCount sire failure\"\n        );\n        // dragon token create dragon egg\n        require(\n            dragonToken.createDragonEggs(\n                _job,\n                _tokenId,\n                _owner,\n                _timestamp,\n                _sign\n            ),\n            \"createDragonEggs failure\"\n        );\n        emit BreedData(_job, _tokenId, _matronId, _sireId, _owner);\n        return true;\n    }\n\n    function _breedCounts(uint256 _matronId, uint256 _sireId) private {\n        // dragon token breed count add\n        breedCounts[_matronId] += 1;\n        breedCounts[_sireId] += 1;\n        uint256 _matronIdBreed = breedCounts[_matronId];\n        uint256 _sireIdBreed = breedCounts[_sireId];\n        emit BreedCount(msg.sender, _matronId, _matronIdBreed);\n        emit BreedCount(msg.sender, _sireId, _sireIdBreed);\n\n        // breed cooldown\n        uint256 _matronCooldown = block.timestamp +\n            breedCooldown[_matronIdBreed + 1];\n        uint256 _sireCooldown = block.timestamp +\n            breedCooldown[_sireIdBreed + 1];\n        cooldownTimeEnd[_matronId] = _matronCooldown;\n        cooldownTimeEnd[_sireId] = _sireCooldown;\n        emit CooldownTimeEnd(_matronId, _matronCooldown);\n        emit CooldownTimeEnd(_sireId, _sireCooldown);\n\n        // dms token\n        dmsTransferEarn(\n            msg.sender,\n            breedDmsAmt[_matronIdBreed] + breedDmsAmt[_sireIdBreed]\n        );\n        dmpTransferEarn(\n            msg.sender,\n            breedDmpAmt[_matronIdBreed] + breedDmpAmt[_sireIdBreed]\n        );\n    }\n}\n"
    },
    "contracts/DragonTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// dragon transfer dms dmp token\ncontract DragonTransfer is Ownable {\n    // change dmsToken event\n    event ChangeDmsToken(address newAddress);\n    // change dmpToken event\n    event ChangeDmpToken(address newAddress);\n    // change dmbToken event\n    event ChangeDmbToken(address newAddress);\n    // feeRate event\n    event FeeRate(uint256 newFee, uint256 oldFee);\n    // beneficiary event\n    event Beneficiary(address newAddr, address oldAddr);\n    // DMS amount event\n    event DmsAmount(uint256 newAmt, uint256 oldAmt);\n    // DMP amount event\n    event DmpAmount(uint256 newAmt, uint256 oldAmt);\n    // DMB amount event\n    event DmbAmount(uint256 newAmt, uint256 oldAmt);\n    // talent DMS amount event\n    event TalentDmsAmt(uint256 newAmt, uint256 oldAmt);\n    // talent DMP amount event\n    event TalentDmpAmt(uint256 newAmt, uint256 oldAmt);\n    // skill DMS amount event\n    event SkillDmsAmt(uint256 newAmt, uint256 oldAmt);\n    // skill DMP amount event\n    event SkillDmpAmt(uint256 newAmt, uint256 oldAmt);\n    // breed DMS amounts event\n    event BreedDmsAmt(uint256[] amounts);\n    // Breed DMP amounts event\n    event BreedDmpAmt(uint256[] amounts);\n\n    // dragon mainland token\n    IERC20 public dmsToken = IERC20(0x9a26e6D24Df036B0b015016D1b55011c19E76C87);\n    // DMP token\n    IERC20 public dmpToken = IERC20(0x599107669322B0E72be939331f35A693ba71EBE2);\n    // dragon bone token\n    IERC1155 public dmbToken;\n\n    // beneficiary address\n    address public beneficiary;\n    // exchange fee rate\n    uint256 public feeRate = 500;\n\n    uint256 public dmsAmount = 1 * 1000000;\n    uint256 public dmpAmount = 1 ether;\n    uint256 public dmbAmount = 5;\n\n    //  talent update\n    uint256 public talentDmsAmt = 1 * 1000000;\n    uint256 public talentDmpAmt = 1 ether;\n\n    //  skill update\n    uint256 public skillDmsAmt = 1 * 1000000;\n    uint256 public skillDmpAmt = 1 ether;\n\n    // breed dragon\n    mapping(uint256 => uint256) public breedDmsAmt;\n    mapping(uint256 => uint256) public breedDmpAmt;\n\n    //  breed DMS amount init data\n    function _breedDmsAmtInit() private {\n        breedDmsAmt[1] = 0.2 ether;\n        breedDmsAmt[2] = 0.4 ether;\n        breedDmsAmt[3] = 0.6 ether;\n        breedDmsAmt[4] = 1 ether;\n        breedDmsAmt[5] = 1.5 ether;\n        breedDmsAmt[6] = 2 ether;\n        breedDmsAmt[7] = 2.5 ether;\n    }\n\n    //  breed DMP amount init data\n    function _breedDmpAmtInit() private {\n        breedDmpAmt[1] = 200 ether;\n        breedDmpAmt[2] = 400 ether;\n        breedDmpAmt[3] = 600 ether;\n        breedDmpAmt[4] = 1000 ether;\n        breedDmpAmt[5] = 1600 ether;\n        breedDmpAmt[6] = 2400 ether;\n        breedDmpAmt[7] = 3400 ether;\n    }\n\n    constructor() {\n        _breedDmsAmtInit();\n        _breedDmpAmtInit();\n    }\n\n    modifier checkAddr(address _address) {\n        require(_address != address(0), \"address is zero\");\n        _;\n    }\n\n    modifier checkAmt(uint256 _amount) {\n        require(_amount > 0, \"amount is zero\");\n        _;\n    }\n\n    // set DMS token address\n    function setDmsToken(address _address)\n        external\n        onlyOwner\n        checkAddr(_address)\n    {\n        emit ChangeDmsToken(_address);\n        dmsToken = IERC20(_address);\n    }\n\n    // set DMP token address\n    function setDmpToken(address _address)\n        external\n        onlyOwner\n        checkAddr(_address)\n    {\n        emit ChangeDmpToken(_address);\n        dmpToken = IERC20(_address);\n    }\n\n    // set beneficiary address\n    function setBeneficiary(address _address)\n        external\n        onlyOwner\n        checkAddr(_address)\n    {\n        emit Beneficiary(_address, beneficiary);\n        beneficiary = _address;\n    }\n\n    // set DMS amount\n    function setDmsAmount(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit DmsAmount(_amount, dmsAmount);\n        dmsAmount = _amount;\n    }\n\n    // set DMP amount\n    function setDmpAmount(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit DmpAmount(_amount, dmpAmount);\n        dmpAmount = _amount;\n    }\n\n    // set DMB amount\n    function setDmbAmount(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit DmbAmount(_amount, dmbAmount);\n        dmbAmount = _amount;\n    }\n\n    // set DMB token address\n    function setDmbToken(address _address)\n        external\n        onlyOwner\n        checkAddr(_address)\n    {\n        emit ChangeDmbToken(_address);\n        dmbToken = IERC1155(_address);\n    }\n\n    // set talent DMS token amount\n    function setTalentDmsAmt(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit TalentDmsAmt(_amount, talentDmsAmt);\n        talentDmsAmt = _amount;\n    }\n\n    // set talent DMP token amount\n    function setTalentDmpAmt(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit TalentDmpAmt(_amount, talentDmpAmt);\n        talentDmpAmt = _amount;\n    }\n\n    // set skill DMS token amount\n    function setSkillDmsAmt(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit SkillDmsAmt(_amount, skillDmsAmt);\n        skillDmsAmt = _amount;\n    }\n\n    // set skill DMP token amount\n    function setSkillDmpAmt(uint256 _amount)\n        external\n        onlyOwner\n        checkAmt(_amount)\n    {\n        emit SkillDmpAmt(_amount, skillDmpAmt);\n        skillDmpAmt = _amount;\n    }\n\n    // breed dragon DMS token amount\n    function setBreedDmsAmt(uint256[] calldata _amounts) external onlyOwner {\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] > 0, \"amount is zero\");\n            breedDmsAmt[i + 1] = _amounts[i];\n        }\n        emit BreedDmsAmt(_amounts);\n    }\n\n    // breed dragon DMP token amount\n    function setBreedDmpAmt(uint256[] calldata _amounts) external onlyOwner {\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] > 0, \"amount is zero\");\n            breedDmpAmt[i + 1] = _amounts[i];\n        }\n        emit BreedDmpAmt(_amounts);\n    }\n\n    // set fee rate\n    function setFeeRate(uint256 _fee) external onlyOwner {\n        require(_fee > 0, \"fee value invalid\");\n        emit FeeRate(_fee, feeRate);\n        feeRate = _fee;\n    }\n\n    // dms token transfer earn\n    function dmsTransferEarn(address _from, uint256 _amount) internal {\n        uint256 dmsBalance = dmsToken.balanceOf(_from);\n        require(dmsBalance >= _amount, \"DMS balance is not enough\");\n        dmsToken.transferFrom(_from, beneficiary, _amount);\n    }\n\n    // dmp token transfer earn\n    function dmpTransferEarn(address _from, uint256 _amount) internal {\n        uint256 dmpBalance = dmpToken.balanceOf(_from);\n        require(dmpBalance >= _amount, \"DMP balance is not enough\");\n        dmpToken.transferFrom(_from, beneficiary, _amount);\n    }\n\n    // dms token transferFrom\n    function dmsTransferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 dmsBalance = dmsToken.balanceOf(_from);\n        require(dmsBalance >= _amount, \"DMS balance is not enough\");\n        dmsToken.transferFrom(_from, _to, _amount);\n    }\n\n    // dmp token transferFrom\n    function dmpTransferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 dmpBalance = dmpToken.balanceOf(_from);\n        require(dmpBalance >= _amount, \"DMP balance is low\");\n        dmpToken.transferFrom(_from, _to, _amount);\n    }\n\n    // exchange fee\n    function exchangeFee(uint256 _price) public view returns (uint256) {\n        return (_price * feeRate) / 10000;\n    }\n}\n"
    },
    "contracts/DragonBoneExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"./DragonTransfer.sol\";\r\n\r\ncontract DragonBoneExchange is\r\n    Ownable,\r\n    Pausable,\r\n    ReentrancyGuard,\r\n    ERC1155Holder,\r\n    DragonTransfer\r\n{\r\n    // bone add market\r\n    event AddMarket(\r\n        address indexed from,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint8 exType,\r\n        uint256 minPrice,\r\n        uint256 maxPrice,\r\n        uint256 timeHours,\r\n        uint256 createTime,\r\n        uint256 orderId\r\n    );\r\n\r\n    // bone remove Market\r\n    event RemoveMarket(\r\n        address indexed from,\r\n        uint256 orderId,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    );\r\n\r\n    // bone exchange\r\n    event Exchange(\r\n        address indexed from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint8 exType,\r\n        uint256 orderId\r\n    );\r\n\r\n    struct ExchangeData {\r\n        uint256 tokenId;\r\n        address from;\r\n        address to;\r\n        uint256 price; // price\r\n        uint256 amount; // amount\r\n        uint256 amountLimit; // amount limit\r\n        uint256 create;\r\n        uint8 ex_type; // 1=exchange 2=auction\r\n        bool state; // order state\r\n        uint256 min_price;\r\n        uint256 max_price;\r\n        uint256 time_hours;\r\n    }\r\n\r\n    struct OrderData {\r\n        uint256 orderId;\r\n        uint256 tokenId;\r\n        uint256 price;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct OrderType {\r\n        uint8 exType;\r\n        uint256 minPrice;\r\n        uint256 maxPrice;\r\n        uint256 timeHours;\r\n    }\r\n\r\n    // orderId => exchange data & price\r\n    mapping(uint256 => ExchangeData) public exchangeDatas;\r\n    // hour cycle\r\n    uint256 public constant CYCLE = 3600;\r\n    // prev orderId\r\n    uint256 public prevOrderId = 0;\r\n\r\n    modifier isOrderExchange(uint256 _orderId) {\r\n        require(exchangeDatas[_orderId].state, \"invalid order state\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    // add bone market\r\n    function addMarket(OrderData memory _data, OrderType memory _type)\r\n        external\r\n        whenNotPaused\r\n        nonReentrant\r\n    {\r\n        require(\r\n            dmbToken.balanceOf(msg.sender, _data.tokenId) >= _data.amount,\r\n            \"dragon bone balance not enough\"\r\n        );\r\n        require(_type.exType == 1 || _type.exType == 2, \"invalid exType\");\r\n        if (_type.exType == 2) {\r\n            require(_type.minPrice > 0, \"invalid minPrice\");\r\n            require(_type.maxPrice > _type.minPrice, \"invalid maxPrice\");\r\n            require(_type.timeHours >= 24, \"invalid timeHours\");\r\n        }\r\n        dmbToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _data.tokenId,\r\n            _data.amount,\r\n            \"0x\"\r\n        );\r\n\r\n        require(\r\n            !exchangeDatas[_data.orderId].state && _data.orderId > prevOrderId,\r\n            \"orderId is exist\"\r\n        );\r\n        prevOrderId = _data.orderId;\r\n\r\n        exchangeDatas[_data.orderId] = ExchangeData(\r\n            _data.tokenId,\r\n            msg.sender,\r\n            address(0),\r\n            _data.price,\r\n            _data.amount,\r\n            _data.amount,\r\n            block.timestamp,\r\n            _type.exType,\r\n            true,\r\n            _type.minPrice,\r\n            _type.maxPrice,\r\n            _type.timeHours\r\n        );\r\n\r\n        emit AddMarket(\r\n            msg.sender,\r\n            _data.tokenId,\r\n            _data.price,\r\n            _data.amount,\r\n            _type.exType,\r\n            _type.minPrice,\r\n            _type.maxPrice,\r\n            _type.timeHours,\r\n            block.timestamp,\r\n            _data.orderId\r\n        );\r\n    }\r\n\r\n    // remove bone market\r\n    function removeMarket(uint256 _orderId)\r\n        external\r\n        whenNotPaused\r\n        nonReentrant\r\n        isOrderExchange(_orderId)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            exchangeDatas[_orderId].from == msg.sender,\r\n            \"invalid dragon bone owner\"\r\n        );\r\n        ExchangeData storage _exdata = exchangeDatas[_orderId];\r\n        _exdata.state = false;\r\n        uint256 _tokenId = _exdata.tokenId;\r\n        uint256 _amount = _exdata.amount;\r\n        dmbToken.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            _amount,\r\n            \"0x\"\r\n        );\r\n\r\n        emit RemoveMarket(msg.sender, _orderId, _tokenId, _amount);\r\n        return true;\r\n    }\r\n\r\n    // dragon bone exchange\r\n    // transfer dms token\r\n    function exchange(uint256 _orderId, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        ExchangeData storage _exdata = exchangeDatas[_orderId];\r\n        require(_exdata.amount >= _amount, \"stock not enough\");\r\n        require(_exdata.state, \"invalid order state\");\r\n        (uint256 _currPrice, ) = exchangePrice(_orderId);\r\n        uint256 _totalPrice = _currPrice * _amount;\r\n        require(\r\n            dmsToken.balanceOf(msg.sender) >= _totalPrice && _totalPrice > 0,\r\n            \"DMS balance is not enough\"\r\n        );\r\n        uint256 _fee = exchangeFee(_totalPrice);\r\n        _exdata.amount -= _amount;\r\n        _exdata.to = msg.sender;\r\n        // DMS token\r\n        dmsTransferEarn(msg.sender, _fee);\r\n        dmsTransferFrom(msg.sender, _exdata.from, _totalPrice - _fee);\r\n        // dragon bone transfer\r\n        uint256 _tokenId = _exdata.tokenId;\r\n        dmbToken.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            _amount,\r\n            \"0x\"\r\n        );\r\n        if (_exdata.amount == 0) {\r\n            _exdata.state = false;\r\n            emit RemoveMarket(msg.sender, _orderId, _tokenId, 0);\r\n        }\r\n        emit Exchange(\r\n            msg.sender,\r\n            _exdata.from,\r\n            _tokenId,\r\n            _currPrice,\r\n            _amount,\r\n            _fee,\r\n            _exdata.ex_type,\r\n            _orderId\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // current exchange Bone price\r\n    function exchangePrice(uint256 _orderId)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        ExchangeData memory _exdata = exchangeDatas[_orderId];\r\n        if (_exdata.ex_type == 1) {\r\n            return (_exdata.price, 0);\r\n        } else if (_exdata.ex_type == 2) {\r\n            if (\r\n                block.timestamp >= _exdata.create + _exdata.time_hours * CYCLE\r\n            ) {\r\n                return (_exdata.min_price, 0);\r\n            }\r\n            uint256 _hour = (block.timestamp - _exdata.create) / CYCLE;\r\n            uint256 _one = (_exdata.max_price - _exdata.min_price) /\r\n                _exdata.time_hours;\r\n            uint256 _price = _exdata.max_price - (_one * _hour);\r\n            return (_price, _hour);\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/interfaces/IDragonMainToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IDragonMainToken is IERC721 {\n    function getDragonAttribute(uint256 _tokenId, uint256 _attrId)\n        external\n        view\n        returns (uint256 attr);\n\n    function dragonSkills(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint256 horn,\n            uint256 ear,\n            uint256 wing,\n            uint256 tail,\n            uint256 talent\n        );\n\n    function getDragonSkill(uint256 _tokenId, uint256 _skillId)\n        external\n        view\n        returns (uint256 skill);\n\n    function burn(uint256 tokenId) external;\n\n    function setDragonSkill(\n        uint256 _tokenId,\n        uint256 _skillId,\n        uint256 _value,\n        uint256 _timestamp,\n        bytes memory _sign\n    ) external returns (bool);\n\n    function setDragonAttribute(\n        uint256 _tokenId,\n        uint256 _attrId,\n        uint256 _value,\n        uint256 _timestamp,\n        bytes memory _sign\n    ) external returns (bool);\n\n    function getDragonJob(uint256 _tokenId) external view returns (uint8 job);\n}\n"
    },
    "contracts/DragonMainlandShards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * Dragon Mainland Shards ERC20 Token\n */\ncontract DragonMainlandShardsToken is ERC20, ERC20Burnable, Pausable, Ownable {\n    constructor(address _recipient) ERC20(\"Dragon Mainland Shards\", \"DMS\") {\n        require(_recipient != address(0), \"recipient address is zero\");\n        _mint(_recipient, 1000000000 * 10**decimals());\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/DragonMainlandShardIDO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// dragon mainland shard IDO base contract\nabstract contract DragonMainlandShardIDOBase is Ownable {\n    // add whitelist\n    event AddWhitelist(address indexed account);\n    // deposit\n    event Deposit(address indexed account, uint256 amount);\n    // withdraw\n    event Withdraw(address indexed account, uint256 amount);\n    // dms price\n    event DmsPrice(address indexed account, uint256 oldPrice, uint256 newPrice);\n    // dms amount\n    event DmsAmount(\n        address indexed account,\n        uint256 oldAmount,\n        uint256 newAmount\n    );\n    // Deposit time\n    event DepositTime(\n        address indexed account,\n        uint256 oldTime,\n        uint256 newTime\n    );\n    // Withdraw time\n    event WithdrawTime(\n        address indexed account,\n        uint256 oldTime,\n        uint256 newTime\n    );\n    // Operator\n    event Operator(address indexed account, address oldOpe, address newOpe);\n\n    // DMS token\n    IERC20 public DmsToken;\n\n    // DMS max supply\n    uint256 public maxSupply;\n\n    // each DMS price\n    uint256 public dmsPrice = 0.25 ether;\n\n    // each DMS amount = 1000\n    uint256 public dmsAmount = 1000000000000000000000;\n\n    // deposit start time\n    uint256 public depositTime = 1636113600;\n\n    // withdraw start time\n    uint256 public withdrawTime = depositTime + 5 days;\n\n    // operator account\n    address public operator;\n\n    // set dms token price\n    function setDmsPrice(uint256 _price) external onlyOwner {\n        require(_price > 0, \"invalid price\");\n        uint256 _old = dmsPrice;\n        dmsPrice = _price;\n        emit DmsPrice(msg.sender, _old, _price);\n    }\n\n    // set dms token amount\n    function setDmsAmount(uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"invalid amount\");\n        uint256 _old = dmsAmount;\n        dmsAmount = _amount;\n        emit DmsAmount(msg.sender, _old, _amount);\n    }\n\n    // set deposit start time\n    function setDepositTime(uint256 _time) external onlyOwner {\n        require(_time > block.timestamp, \"invalid deposit time\");\n        uint256 _old = depositTime;\n        depositTime = _time;\n        emit DepositTime(msg.sender, _old, _time);\n    }\n\n    // set withdraw start time\n    function setWithdrawTime(uint256 _time) external onlyOwner {\n        require(_time > block.timestamp, \"invalid withdraw time\");\n        uint256 _old = withdrawTime;\n        withdrawTime = _time;\n        emit WithdrawTime(msg.sender, _old, _time);\n    }\n\n    // set operator account\n    function setOperator(address _account) external onlyOwner {\n        require(_account != address(0), \"invalid account\");\n        address _old = operator;\n        operator = _account;\n        emit Operator(msg.sender, _old, _account);\n    }\n}\n\n// dragon mainland shard ido contract\ncontract DragonMainlandShardIDO is\n    Ownable,\n    Pausable,\n    DragonMainlandShardIDOBase\n{\n    // whitelist account\n    mapping(address => bool) public whitelistAccounts;\n\n    // deposit amount\n    mapping(address => uint256) public depositAmounts;\n\n    // account withdraw\n    mapping(address => bool) public withdrawed;\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    constructor(\n        address _dmsToken,\n        uint256 _supply,\n        address _operator\n    ) {\n        require(_dmsToken != address(0), \"token address is zero\");\n        require(_operator != address(0), \"operator address is zero\");\n        require(_supply > 0, \"invalid supply\");\n\n        DmsToken = IERC20(_dmsToken);\n        maxSupply = _supply;\n        operator = _operator;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"invalid operator\");\n        _;\n    }\n\n    // add whitelist\n    function addWhitelist(address[] calldata accounts)\n        external\n        onlyOperator\n        whenNotPaused\n        returns (bool)\n    {\n        require(accounts.length <= 200, \"accounts length too long\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            whitelistAccounts[accounts[i]] = true;\n            emit AddWhitelist(accounts[i]);\n        }\n        return true;\n    }\n\n    // account deposit bnb\n    function deposit() external payable whenNotPaused {\n        require(block.timestamp > depositTime, \"deposit time is not start\");\n        require(\n            block.timestamp < depositTime + 1 days,\n            \"deposit time is finish\"\n        );\n        require(msg.value == dmsPrice, \"invalid deposit price\");\n        require(whitelistAccounts[msg.sender], \"account is not whitelist\");\n        require(depositAmounts[msg.sender] == 0, \"account is deposited\");\n\n        depositAmounts[msg.sender] = msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // batch widthdraw\n    function batchWithdraw(address[] calldata accounts)\n        external\n        onlyOperator\n        whenNotPaused\n    {\n        require(block.timestamp > withdrawTime, \"withdraw is not start\");\n        uint256 _balance = dmsBalance();\n        require(\n            _balance >= dmsAmount * accounts.length,\n            \"insufficient balance\"\n        );\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            address _currAcct = accounts[i];\n            bool ok = whitelistAccounts[_currAcct] &&\n                depositAmounts[_currAcct] > 0 &&\n                !withdrawed[_currAcct];\n            if (ok) {\n                bool succ = DmsToken.transfer(_currAcct, dmsAmount);\n                require(succ, \"dms token transfer failure\");\n                withdrawed[_currAcct] = true;\n                emit Withdraw(_currAcct, _balance);\n            }\n        }\n    }\n\n    // dms token balance\n    function dmsBalance() public view returns (uint256) {\n        return DmsToken.balanceOf(address(this));\n    }\n\n    // withdraw contract dms token balance\n    function withdrawBalance() external onlyOwner {\n        require(\n            block.timestamp > withdrawTime + 5 days,\n            \"withdraw dms balance is not start\"\n        );\n        uint256 _balance = dmsBalance();\n        require(_balance > 0, \"balance is zero\");\n\n        bool succ = DmsToken.transfer(msg.sender, _balance);\n        require(succ, \"dms token transfer failure\");\n\n        emit Withdraw(msg.sender, _balance);\n    }\n\n    // withdraw contract bnb balance\n    function withdrawBnb() external onlyOwner {\n        require(\n            block.timestamp > withdrawTime + 5 days,\n            \"withdraw bnb balance is not start\"\n        );\n        uint256 _balance = address(this).balance;\n        require(_balance > 0, \"balance is zero\");\n\n        payable(msg.sender).transfer(_balance);\n        emit Withdraw(msg.sender, _balance);\n    }\n}\n"
    },
    "contracts/DragonBlindBox-2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"./DragonTransfer.sol\";\r\nimport \"./Adminable.sol\";\r\n\r\ninterface IDmbToken {\r\n    function mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function transferAdmin(address newAdmin) external;\r\n}\r\n\r\ncontract DragonBlindBox is\r\n    Ownable,\r\n    Adminable,\r\n    Pausable,\r\n    ReentrancyGuard,\r\n    DragonTransfer\r\n{\r\n    event SetPeriod(\r\n        uint256 number,\r\n        uint256 startTime,\r\n        uint256 openHours,\r\n        uint256 boxAmount,\r\n        uint256 participantsMax,\r\n        uint256 bindBoxPrice\r\n    );\r\n\r\n    event SetCurrDmbToken(address newDmbAcc);\r\n\r\n    event TransferDmbTokenAdmin(address newDmbAdmin);\r\n\r\n    event SetWeight(uint256[3] newWeight, uint256[3] oldWeight);\r\n\r\n    event SetCuurPeriodNumber(uint256 newPeriodN, uint256 oldPeriodN);\r\n\r\n    event Participate(address account, uint256 amount, uint256 numberPeriod);\r\n\r\n    event LucklyAccount(\r\n        address lucklyAccount,\r\n        uint256 tokenId,\r\n        uint256 numberPeriod\r\n    );\r\n\r\n    event Winthdraw(address account, uint256 amount);\r\n\r\n    event OpenBlindBox(address account, uint256 tokenId, uint256 numberPeriod);\r\n\r\n    struct PeriodData {\r\n        uint256 startTime;\r\n        uint256 openHours;\r\n        uint256 boxAmount;\r\n        uint256 participantsMax;\r\n        uint256 bindBoxPrice;\r\n    }\r\n    struct BlindBoxData {\r\n        uint256 tokenId;\r\n        bool openState;\r\n    }\r\n    //count => PeriodData\r\n    mapping(uint256 => PeriodData) periodDatas;\r\n    //current Period number\r\n    uint256 public currentPeriod;\r\n    //current Deadline\r\n    uint256 public currentDeadline;\r\n    //players pay amount\r\n    mapping(address => uint256) investmentAmounts;\r\n    //address => Periodnumber => participateStates 0 未参加 1 已参加 2 中标\r\n    mapping(address => mapping(uint256 => uint8)) participateStates;\r\n    //blindBox Data\r\n    mapping(address => mapping(uint256 => BlindBoxData)) blindBoxDatas;\r\n    mapping(uint256 => address[]) public participants;\r\n    uint256[3] public weights = [30, 20, 10];\r\n    //[0,a][a,b][b,100]\r\n    uint256[2] internal weightsPercentage = [50, 83];\r\n    //dmb token\r\n    IDmbToken public currDmbToken =\r\n        IDmbToken(0x482c27c754454BC184C5bCDbf90272628f220748);\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function transferDmbTokenAdmin(address _dmsAdmin) external onlyOwner {\r\n        currDmbToken.transferAdmin(_dmsAdmin);\r\n        emit TransferDmbTokenAdmin(_dmsAdmin);\r\n    }\r\n\r\n    //admin set DmbToken\r\n    function setCurrDmbToken(address _address)\r\n        external\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        currDmbToken = IDmbToken(_address);\r\n        emit SetCurrDmbToken(_address);\r\n        return true;\r\n    }\r\n\r\n    //admin set Weights\r\n    function setWeights(uint256[3] memory _weights)\r\n        external\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        uint256[3] memory _oldWeight = weights;\r\n        weights = _weights;\r\n        uint256 _sum;\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            _sum += _weights[i];\r\n        }\r\n        weightsPercentage[0] = (_weights[0] * 100) / _sum;\r\n        weightsPercentage[1] = ((_weights[0] + _weights[1]) * 100) / _sum;\r\n        emit SetWeight(_weights, _oldWeight);\r\n        return true;\r\n    }\r\n\r\n    //admin set Period\r\n    function setPeriod(\r\n        uint256 _number,\r\n        uint256 _startTime,\r\n        uint256 _openHours,\r\n        uint256 _boxAmount,\r\n        uint256 _participantsMax,\r\n        uint256 _bindBoxPrice\r\n    ) external onlyAdmin returns (bool) {\r\n        PeriodData memory _data = PeriodData(\r\n            _startTime,\r\n            _openHours,\r\n            _boxAmount,\r\n            _participantsMax,\r\n            _bindBoxPrice\r\n        );\r\n        periodDatas[_number] = _data;\r\n        currentDeadline = _startTime + _openHours * 1 hours;\r\n        emit SetPeriod(\r\n            _number,\r\n            _startTime,\r\n            _openHours,\r\n            _boxAmount,\r\n            _participantsMax,\r\n            _bindBoxPrice\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //admin set current Period number\r\n    function setCuurPeriodNumber(uint256 _number)\r\n        external\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        uint256 _old = currentPeriod;\r\n        currentPeriod = _number;\r\n        emit SetCuurPeriodNumber(_old, _number);\r\n        return true;\r\n    }\r\n\r\n    //participant draw\r\n    function participate() external whenNotPaused nonReentrant returns (bool) {\r\n        require(\r\n            participateStates[msg.sender][currentPeriod] == 0,\r\n            \"Can't participate again\"\r\n        );\r\n        PeriodData memory _data = periodDatas[currentPeriod];\r\n        require(\r\n            participants[currentPeriod].length <= _data.participantsMax,\r\n            \"Exceed the maximum number of participants\"\r\n        );\r\n        require(\r\n            block.timestamp < currentDeadline &&\r\n                block.timestamp > _data.startTime,\r\n            \"Exceed the maximum number of participants\"\r\n        );\r\n        require(\r\n            dmsToken.balanceOf(msg.sender) >= _data.bindBoxPrice,\r\n            \"Balance not enough\"\r\n        );\r\n        //transfer dms\r\n        dmsTransferEarn(msg.sender, _data.bindBoxPrice);\r\n        //change owner current state\r\n        participateStates[msg.sender][currentPeriod] = 1;\r\n        investmentAmounts[msg.sender] += _data.bindBoxPrice;\r\n        participants[currentPeriod].push(msg.sender);\r\n        emit Participate(msg.sender, _data.bindBoxPrice, currentPeriod);\r\n        return true;\r\n    }\r\n\r\n    //generate Lucky\r\n    function generateLucky() external onlyAdmin returns (bool) {\r\n        require(block.timestamp > currentDeadline, \"Deadline not reached\");\r\n        PeriodData memory _data = periodDatas[currentPeriod];\r\n        uint256 _boxAmount = _data.boxAmount;\r\n        uint256 _numberOf = participants[currentPeriod].length;\r\n        //real the number of blindBox\r\n        uint256 _len = _boxAmount < _numberOf ? _boxAmount : _numberOf;\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            uint256 random_ = _random(participants[currentPeriod][i]);\r\n            uint256 _LuckyId = random_ % _numberOf;\r\n            address _Lucky = participants[currentPeriod][_LuckyId];\r\n            //won bidding\r\n            participateStates[_Lucky][currentPeriod] = 2;\r\n            //Charge box fee\r\n            investmentAmounts[_Lucky] -= _data.bindBoxPrice;\r\n\r\n            participants[_LuckyId] = participants[_numberOf - 1];\r\n            participants[currentPeriod].pop();\r\n\r\n            _numberOf--;\r\n\r\n            uint256 _tokenId = getdmbTokenId(random_);\r\n            blindBoxDatas[_Lucky][currentPeriod].tokenId = _tokenId;\r\n\r\n            emit LucklyAccount(_Lucky, _tokenId, currentPeriod);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //withdraw DMS\r\n    function withdraw() external whenNotPaused nonReentrant returns (bool) {\r\n        uint256 _amount;\r\n        uint256 _participateStates = participateStates[msg.sender][\r\n            currentPeriod\r\n        ];\r\n        // not participate or won the prize in this period\r\n        if (_participateStates == 0 || _participateStates == 2) {\r\n            _amount = investmentAmounts[msg.sender];\r\n        } else if (\r\n            _participateStates == 1 && block.timestamp < currentDeadline\r\n        ) {\r\n            //Participated but not drawn\r\n            _amount =\r\n                investmentAmounts[msg.sender] -\r\n                periodDatas[currentPeriod].bindBoxPrice;\r\n        } else {\r\n            //Participated but not won bidding\r\n            _amount = investmentAmounts[msg.sender];\r\n        }\r\n        require(\r\n            _amount > 0 && investmentAmounts[msg.sender] >= _amount,\r\n            \"No DMS to be extracted\"\r\n        );\r\n        investmentAmounts[msg.sender] -= _amount;\r\n        dmsTransferFrom(beneficiary, msg.sender, _amount);\r\n\r\n        emit Winthdraw(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    //Open BlindBox\r\n    function openBlindBox(uint256 _pNumber)\r\n        external\r\n        whenNotPaused\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(\r\n            participateStates[msg.sender][_pNumber] == 2,\r\n            \"not win bidding\"\r\n        );\r\n        BlindBoxData storage _data = blindBoxDatas[msg.sender][_pNumber];\r\n        require(!_data.openState, \"The blind box has been opened\");\r\n        uint256 _tokenId = _data.tokenId;\r\n        currDmbToken.mint(msg.sender, _tokenId, 1, \"0x\");\r\n        _data.openState = true;\r\n        emit OpenBlindBox(msg.sender, _tokenId, _pNumber);\r\n        return true;\r\n    }\r\n\r\n    //get random TokenId\r\n    function getdmbTokenId(uint256 random) internal view returns (uint256) {\r\n        uint256 _random1 = (random % 5) + 1;\r\n\r\n        uint256 _random2 = random % 100;\r\n        if (_random2 < weightsPercentage[0]) {\r\n            _random2 = 1;\r\n        } else if (_random2 >= weightsPercentage[1]) {\r\n            _random2 = 3;\r\n        } else {\r\n            _random2 = 2;\r\n        }\r\n        uint256 _tokenId = _random1 * 10 + _random2;\r\n        return _tokenId;\r\n    }\r\n\r\n    //randon\r\n    function _random(address account) internal view returns (uint256) {\r\n        uint256 rand = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    account,\r\n                    block.timestamp,\r\n                    block.difficulty,\r\n                    blockhash(block.number),\r\n                    block.coinbase\r\n                )\r\n            )\r\n        );\r\n        return rand;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}