{
  "address": "0x05DDCb541937D9809Ce55fd2622750AA4d451BB1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dragon",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "PerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        }
      ],
      "name": "PerCycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakedEarn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "accountTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseHashRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dragonToken",
      "outputs": [
        {
          "internalType": "contract IDragonToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getStakingTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perCycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cycle",
          "type": "uint256"
        }
      ],
      "name": "setPerCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_hashRates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_powers",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeEarn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_powers",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_sign",
          "type": "bytes"
        }
      ],
      "name": "stakePower",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "stakeTotals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedDatas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingDatas",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76595af0d782f370a5132512859d5539710b7d2f06d1ce85085d1149d7d220e5",
  "receipt": {
    "to": null,
    "from": "0x9Dac3Cc17757059E64f028Be283237085bAd2199",
    "contractAddress": "0x05DDCb541937D9809Ce55fd2622750AA4d451BB1",
    "transactionIndex": 130,
    "gasUsed": "2942330",
    "logsBloom": "0x
    "blockHash": "0xead2005ec8a99b025209be0d89fdedbca10832e62a70f9816175dc9715be3150",
    "transactionHash": "0x76595af0d782f370a5132512859d5539710b7d2f06d1ce85085d1149d7d220e5",
    "logs": [
      {
        "transactionIndex": 130,
        "blockNumber": 12530666,
        "transactionHash": "0x76595af0d782f370a5132512859d5539710b7d2f06d1ce85085d1149d7d220e5",
        "address": "0x05DDCb541937D9809Ce55fd2622750AA4d451BB1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dac3cc17757059e64f028be283237085bad2199"
        ],
        "data": "0x",
        "logIndex": 418,
        "blockHash": "0xead2005ec8a99b025209be0d89fdedbca10832e62a70f9816175dc9715be3150"
      },
      {
        "transactionIndex": 130,
        "blockNumber": 12530666,
        "transactionHash": "0x76595af0d782f370a5132512859d5539710b7d2f06d1ce85085d1149d7d220e5",
        "address": "0x05DDCb541937D9809Ce55fd2622750AA4d451BB1",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dac3cc17757059e64f028be283237085bad2199"
        ],
        "data": "0x",
        "logIndex": 419,
        "blockHash": "0xead2005ec8a99b025209be0d89fdedbca10832e62a70f9816175dc9715be3150"
      }
    ],
    "blockNumber": 12530666,
    "cumulativeGasUsed": "18980446",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3a70F8292F0053C97c4B394e2fC98389BdE765fb",
    "0x47879aAC5Dd5979cbAC1EBD305241Fcb54f73afD"
  ],
  "solcInputHash": "5b1a2e3516f3bdfc5ffd4b8a423f8cb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dragon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"PerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"PerCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseHashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonToken\",\"outputs\":[{\"internalType\":\"contract IDragonToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakingTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"setPerCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_hashRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_powers\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeEarn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_powers\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"stakePower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stakeTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedDatas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDatas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"dragon mainland token ERC721 staking V1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonStakingV1.sol\":\"DragonStakingV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"contracts/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract Adminable is Context {\\n    address internal _admin;\\n\\n    event AdminTransferred(\\n        address indexed previousAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Adminable: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function renounceAdmin() external virtual onlyAdmin {\\n        _setAdmin(address(0));\\n    }\\n\\n    function transferAdmin(address newAdmin) external virtual onlyAdmin {\\n        require(\\n            newAdmin != address(0),\\n            \\\"Adminable: new admin is the zero address\\\"\\n        );\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xced8c0716cf0cb642c772a760ea9e15d853bab89de6581eff4a49420fca53337\",\"license\":\"MIT\"},\"contracts/DragonStakingV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./Adminable.sol\\\";\\n\\n/**\\n * dragon contract staking V1\\n * earn DMP token\\n * DMP token transfer or withdraw not in this contract\\n */\\n\\n// dragon mainland token interface\\ninterface IDragonToken {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\nabstract contract DragonStakingV1Base is Pausable, Ownable {\\n    // per block event\\n    event PerBlock(uint256 block);\\n    // per cycle event\\n    event PerCycle(uint256 cycle);\\n    // staking data event\\n    event StakeData(\\n        address indexed account,\\n        uint256 power,\\n        uint256 hashRate,\\n        uint256 tokenId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 amount\\n    );\\n    // stake earn event\\n    event StakedEarn(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        uint256 power,\\n        uint256 amount\\n    );\\n\\n    // staking data\\n    struct StakingData {\\n        address account;\\n        uint256 power;\\n        uint256 hashRate;\\n        uint256 tokenId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 amount;\\n    }\\n\\n    // per block 9 DMP token\\n    uint256 public perBlock = 9 ether;\\n\\n    // base hashrate\\n    uint256 public baseHashRate = 331;\\n\\n    // per cycle 3 hours\\n    uint256 public perCycle = 3 hours;\\n\\n    // sign expiration time\\n    uint64 internal _expirationTime = 180;\\n\\n    // dragon tokenId staking data\\n    mapping(uint256 => StakingData) public stakingDatas;\\n\\n    // dragon tokenId staked state\\n    mapping(uint256 => bool) public stakedState;\\n\\n    // dragon tokenId staked DMP earn total\\n    mapping(uint256 => uint256) public stakedDatas;\\n\\n    // account staking tokenId list\\n    mapping(address => uint256[]) internal stakingTokenIds;\\n\\n    // stake total\\n    // dragonTotal => 0x647261676f6e546f74616c\\n    // accountTotal => 0x6163636f756e74546f74616c\\n    // dmpTotal => 0x646d70546f74616c\\n    mapping(bytes => uint256) public stakeTotals;\\n\\n    // set pre block\\n    function setPerBlock(uint256 _block) external onlyOwner {\\n        require(_block > 0, \\\"invalid perblock\\\");\\n        perBlock = _block;\\n        emit PerBlock(_block);\\n    }\\n\\n    // set pre cycle\\n    function setPerCycle(uint256 _cycle) external onlyOwner {\\n        require(_cycle > 0, \\\"invalid perCycle\\\");\\n        perCycle = _cycle;\\n        emit PerCycle(_cycle);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\n/// dragon mainland token ERC721 staking V1\\ncontract DragonStakingV1 is\\n    Pausable,\\n    ERC721Holder,\\n    DragonStakingV1Base,\\n    Adminable\\n{\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    // dragon token\\n    IDragonToken public dragonToken;\\n\\n    constructor(address _dragon, address admin_) {\\n        require(_dragon != address(0), \\\"dragon address is zero\\\");\\n        require(admin_ != address(0), \\\"admin address is zero\\\");\\n        dragonToken = IDragonToken(_dragon);\\n        _admin = admin_;\\n    }\\n\\n    // hashRate calc\\n    function _hashRateCalc(uint256 _hashRate) private view returns (uint256) {\\n        return (perBlock * _hashRate) / baseHashRate;\\n    }\\n\\n    // stake calc\\n    // returns (dmsAmt, power)\\n    function _stakeCalc(uint256 _tokenId, uint256 _hashRate)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 _value = _hashRateCalc(_hashRate);\\n        StakingData memory _data = stakingDatas[_tokenId];\\n        uint256 endTime = block.timestamp > _data.endTime\\n            ? _data.endTime\\n            : block.timestamp;\\n        // floor cycle value (math.floor)\\n        uint256 _cycle = (endTime - _data.startTime) / perCycle;\\n        // ceil power value (math.ceil)\\n        uint256 _power = (endTime - _data.startTime + perCycle - 1) / perCycle;\\n        if (_cycle < 1) {\\n            return (0, 0, _cycle);\\n        }\\n        return (_cycle * _value, _data.power - _power, _cycle);\\n    }\\n\\n    // stake dragon token\\n    // earn DMP token\\n    function stake(\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _hashRates,\\n        uint256 _powers,\\n        uint64 _timestamp,\\n        bytes memory _sign\\n    ) external whenNotPaused returns (bool) {\\n        require(\\n            _tokenIds.length > 0 && _tokenIds.length == _hashRates.length,\\n            \\\"invalid tokenIds or hashRates\\\"\\n        );\\n        require(\\n            _timestamp + _expirationTime >= block.timestamp,\\n            \\\"expiration time\\\"\\n        );\\n        require(\\n            _powers > 0 && _powers % _tokenIds.length == 0,\\n            \\\"invalid power\\\"\\n        );\\n\\n        uint256 _powerOne = _powers / _tokenIds.length;\\n        require(_powerOne <= 8, \\\"invalid powerOne\\\");\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(_tokenIds[i] > 0, \\\"invalid tokenId\\\");\\n            require(_hashRates[i] > 0, \\\"invalid hashRate\\\");\\n            require(!stakedState[_tokenIds[i]], \\\"invalid stake state\\\");\\n            require(\\n                dragonToken.ownerOf(_tokenIds[i]) == msg.sender,\\n                \\\"invalid owner\\\"\\n            );\\n        }\\n\\n        // verify sign message\\n        string memory _message = _signStake(\\n            _tokenIds,\\n            _hashRates,\\n            _powers,\\n            _timestamp\\n        );\\n        _verifyAdmin(_message, _sign);\\n\\n        if (stakingTokenIds[msg.sender].length == 0) {\\n            stakeTotals[bytes(\\\"accountTotal\\\")] += 1;\\n        }\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            dragonToken.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n            StakingData memory _data = StakingData({\\n                account: msg.sender,\\n                power: _powerOne,\\n                hashRate: _hashRates[i],\\n                tokenId: _tokenId,\\n                startTime: block.timestamp,\\n                endTime: block.timestamp + perCycle * _powerOne,\\n                amount: 0\\n            });\\n            stakingDatas[_tokenId] = _data;\\n            emit StakeData(\\n                _data.account,\\n                _data.power,\\n                _data.hashRate,\\n                _data.tokenId,\\n                _data.startTime,\\n                _data.endTime,\\n                _data.amount\\n            );\\n\\n            if (stakingTokenIds[msg.sender].length == 0) {\\n                stakingTokenIds[msg.sender] = [_tokenId];\\n            } else {\\n                stakingTokenIds[msg.sender].push(_tokenId);\\n            }\\n            if (!stakedState[_tokenId]) {\\n                stakeTotals[bytes(\\\"dragonTotal\\\")] += 1;\\n                stakedState[_tokenId] = true;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // cancel stake dragon\\n    function unStake(uint256[] calldata _tokenIds)\\n        external\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(_tokenIds.length > 0, \\\"invalid tokenIds\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            require(_tokenId > 0, \\\"invalid tokenId\\\");\\n            StakingData storage _data = stakingDatas[_tokenId];\\n            require(_data.account == msg.sender, \\\"invalid account\\\");\\n            require(stakedState[_tokenId], \\\"invalid stake state\\\");\\n            uint256 _currHashRate = _data.hashRate;\\n\\n            // dragon to account\\n            dragonToken.safeTransferFrom(\\n                address(this),\\n                _data.account,\\n                _tokenId\\n            );\\n\\n            // earn log\\n            uint256 _dmpAmt;\\n            uint256 _power;\\n            uint256 _cycle;\\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\\n            stakeTotals[bytes(\\\"dmpTotal\\\")] += _dmpAmt;\\n            stakedDatas[_tokenId] += _dmpAmt;\\n            _data.amount += _dmpAmt;\\n            _data.power = _power;\\n            emit StakedEarn(msg.sender, _tokenId, _power, _dmpAmt);\\n\\n            // delete tokenId\\n            uint256 _len = stakingTokenIds[msg.sender].length;\\n            for (uint256 j = 0; j < _len; j++) {\\n                if (stakingTokenIds[msg.sender][j] == _tokenId) {\\n                    stakingTokenIds[msg.sender][j] = stakingTokenIds[\\n                        msg.sender\\n                    ][_len - 1];\\n                    stakingTokenIds[msg.sender].pop();\\n                    break;\\n                }\\n            }\\n\\n            // account total\\n            if (stakingTokenIds[msg.sender].length == 0) {\\n                stakeTotals[bytes(\\\"accountTotal\\\")] -= 1;\\n            }\\n\\n            // staked state\\n            if (stakedState[_tokenId]) {\\n                stakeTotals[bytes(\\\"dragonTotal\\\")] -= 1;\\n                stakedState[_tokenId] = false;\\n            }\\n\\n            // dragon data reset\\n            _data.startTime = 0;\\n            _data.endTime = 0;\\n        }\\n\\n        return true;\\n    }\\n\\n    // dragon stake earn DMP token\\n    function stakeEarn(uint256[] calldata _tokenIds)\\n        external\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(_tokenIds.length > 0, \\\"invalid tokenIds\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            require(_tokenId > 0, \\\"invalid tokenId\\\");\\n            StakingData storage _data = stakingDatas[_tokenId];\\n            require(_data.account == msg.sender, \\\"invalid account\\\");\\n            require(stakedState[_tokenId], \\\"invalid stake state\\\");\\n            uint256 _currHashRate = _data.hashRate;\\n\\n            // earn log\\n            uint256 _dmpAmt;\\n            uint256 _power;\\n            uint256 _cycle;\\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\\n            require(_cycle > 0, \\\"time is too short\\\");\\n            stakeTotals[bytes(\\\"dmpTotal\\\")] += _dmpAmt;\\n            stakedDatas[_tokenId] += _dmpAmt;\\n            _data.startTime += perCycle * _cycle;\\n            _data.amount += _dmpAmt;\\n            _data.power -= _cycle;\\n            emit StakedEarn(msg.sender, _tokenId, 0, _dmpAmt);\\n        }\\n\\n        return true;\\n    }\\n\\n    // dragon stake power earn DMP token\\n    function stakePower(\\n        uint256[] calldata _tokenIds,\\n        uint256 _powers,\\n        uint64 _timestamp,\\n        bytes memory _sign\\n    ) external whenNotPaused returns (bool) {\\n        require(\\n            _timestamp + _expirationTime >= block.timestamp,\\n            \\\"expiration time\\\"\\n        );\\n        require(_tokenIds.length > 0, \\\"invalid tokenIds\\\");\\n        require(\\n            _powers > 0 && _powers % _tokenIds.length == 0,\\n            \\\"invalid power\\\"\\n        );\\n        uint256 _powerOne = _powers / _tokenIds.length;\\n        require(_powerOne <= 8, \\\"invalid powerOne\\\");\\n\\n        uint256[] memory _hashRates = new uint256[](_tokenIds.length);\\n\\n        // verify sign message\\n        string memory _message = _signStake(\\n            _tokenIds,\\n            _hashRates,\\n            _powers,\\n            _timestamp\\n        );\\n        _verifyAdmin(_message, _sign);\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            require(_tokenId > 0, \\\"invalid tokenId\\\");\\n            StakingData storage _data = stakingDatas[_tokenId];\\n            require(_data.account == msg.sender, \\\"invalid account\\\");\\n            require(stakedState[_tokenId], \\\"invalid stake state\\\");\\n            require(\\n                block.timestamp >= _data.endTime,\\n                \\\"stake was not completed\\\"\\n            );\\n            uint256 _currHashRate = _data.hashRate;\\n\\n            // earn log\\n            uint256 _dmpAmt;\\n            uint256 _power;\\n            uint256 _cycle;\\n            (_dmpAmt, _power, _cycle) = _stakeCalc(_tokenId, _currHashRate);\\n            stakeTotals[bytes(\\\"dmpTotal\\\")] += _dmpAmt;\\n            stakedDatas[_tokenId] += _dmpAmt;\\n            _data.startTime = block.timestamp;\\n            _data.amount += _dmpAmt;\\n            _data.power = _power;\\n            emit StakedEarn(msg.sender, _tokenId, 0, _dmpAmt);\\n\\n            // add power & endTime\\n            _data.endTime = block.timestamp + perCycle * _powerOne;\\n            _data.power += _powerOne;\\n        }\\n\\n        return true;\\n    }\\n\\n    // account earn DMP token total\\n    function accountTotal(address _account) external view returns (uint256) {\\n        require(_account != address(0), \\\"invalid account address\\\");\\n        uint256[] memory _tokenIds = stakingTokenIds[_account];\\n        uint256 _total;\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            _total += stakedDatas[_tokenId];\\n        }\\n        return _total;\\n    }\\n\\n    // account staking tokenIds\\n    function getStakingTokenIds(address _account)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _tokenIds = stakingTokenIds[_account];\\n        return _tokenIds;\\n    }\\n\\n    // verify admin\\n    function _verifyAdmin(string memory data, bytes memory _sign) private view {\\n        bytes32 message = keccak256(abi.encodePacked(data));\\n        bytes32 ethSignedHash = message.toEthSignedMessageHash();\\n        require(ethSignedHash.recover(_sign) == admin(), \\\"sign message fault\\\");\\n    }\\n\\n    // sign stake data\\n    function _signStake(\\n        uint256[] calldata _tokenIds,\\n        uint256[] memory _hashRates,\\n        uint256 _powers,\\n        uint64 _timestamp\\n    ) private pure returns (string memory) {\\n        bytes memory message = bytes(_powers.toString());\\n        message = abi.encodePacked(message, uint256(_timestamp).toString());\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            message = abi.encodePacked(\\n                message,\\n                _tokenIds[i].toString(),\\n                _hashRates[i].toString()\\n            );\\n        }\\n        return string(message);\\n    }\\n}\\n\",\"keccak256\":\"0x6f895a37e5b344cad4c6652040d61fab41741419a14053d2ec0e2836da1ad547\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052677ce66c50e284000060015561014b600255612a30600355600480546001600160401b03191660b41790553480156200003c57600080fd5b50604051620033e5380380620033e58339810160408190526200005f916200022d565b6000805460ff19169055620000743362000165565b6200007f33620001be565b6001600160a01b038216620000db5760405162461bcd60e51b815260206004820152601660248201527f647261676f6e2061646472657373206973207a65726f0000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620001335760405162461bcd60e51b815260206004820152601560248201527f61646d696e2061646472657373206973207a65726f00000000000000000000006044820152606401620000d2565b600b80546001600160a01b039384166001600160a01b031991821617909155600a805492909316911617905562000264565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b80516001600160a01b03811681146200022857600080fd5b919050565b6000806040838503121562000240578182fd5b6200024b8362000210565b91506200025b6020840162000210565b90509250929050565b61317180620002746000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806383e84a8f116100ee578063b29411cd11610097578063e8f08dd211610071578063e8f08dd214610467578063f2fde38b1461047a578063f7d1ff1a1461048d578063f851a44014610496576101ae565b8063b29411cd14610442578063d5a33fe014610455578063dbd8e4761461045e576101ae565b80638da5cb5b116100c85780638da5cb5b14610405578063a72d8baf1461041c578063b10dcc931461042f576101ae565b806383e84a8f146103d25780638456cb59146103f55780638bad0c0a146103fd576101ae565b806341ad20771161015b578063715018a611610135578063715018a61461039157806375829def14610399578063806fb4aa146103ac57806381952c24146103bf576101ae565b806341ad20771461034357806356354e81146103635780635c975abb14610386576101ae565b806321be7cbf1161018c57806321be7cbf146102e05780632a1b9164146103195780633f4ba83a14610339576101ae565b80630e42323b146101b3578063150b7a02146101e35780631738ad861461024b575b600080fd5b600b546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021a6101f1366004612d0c565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101da565b6102a1610259366004612f1a565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006909501546001600160a01b0390941695929491939092919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101da565b61030b6102ee366004612ee7565b805160208183018101805160098252928201919093012091525481565b6040519081526020016101da565b61030b610327366004612f1a565b60076020526000908152604090205481565b6103416104a7565b005b610356610351366004612ccd565b610516565b6040516101da9190612fc0565b610376610371366004612e63565b610584565b60405190151581526020016101da565b60005460ff16610376565b610341610a70565b6103416103a7366004612ccd565b610ada565b6103766103ba366004612db6565b610bc7565b6103416103cd366004612f1a565b6113d2565b6103766103e0366004612f1a565b60066020526000908152604090205460ff1681565b6103416114be565b610341611526565b6101c660005461010090046001600160a01b031690565b61030b61042a366004612ccd565b611595565b61037661043d366004612d76565b6116ce565b610376610450366004612d76565b611c37565b61030b60035481565b61030b60015481565b610341610475366004612f1a565b611f73565b610341610488366004612ccd565b612058565b61030b60025481565b600a546001600160a01b03166101c6565b6000546001600160a01b0361010090910416331461050c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61051461213d565b565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083526060949383018282801561057557602002820191906000526020600020905b815481526020019060010190808311610561575b5093955050505050505b919050565b6000805460ff16156105cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b60045442906105e49067ffffffffffffffff168561301c565b67ffffffffffffffff16101561063c5760405162461bcd60e51b815260206004820152600f60248201527f65787069726174696f6e2074696d6500000000000000000000000000000000006044820152606401610503565b8461067c5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b600084118015610693575061069185856130d0565b155b6106cf5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103837bbb2b960991b6044820152606401610503565b60006106db868661303f565b9050600881111561072e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706f7765724f6e65000000000000000000000000000000006044820152606401610503565b60008667ffffffffffffffff81111561075757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610780578160200160208202803683370190505b50905060006107928989848a8a6121d9565b905061079e81866122ca565b60005b88811015610a605760008a8a838181106107cb57634e487b7160e01b600052603260045260246000fd5b905060200201359050600081116108165760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b0316331461086f5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff166108c35760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b80600501544210156109175760405162461bcd60e51b815260206004820152601760248201527f7374616b6520776173206e6f7420636f6d706c657465640000000000000000006044820152606401610503565b60028101546000808061092a86856123d1565b6040805180820182526008815267191b5c151bdd185b60c21b602082015290519396509194509250849160099161096091612f32565b9081526020016040518091039020600082825461097d9190613004565b9091555050600086815260076020526040812080548592906109a0908490613004565b90915550504260048601556006850180548491906000906109c2908490613004565b909155505060018501829055604080516000815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a389600354610a1a9190613053565b610a249042613004565b856005018190555089856001016000828254610a409190613004565b925050819055505050505050508080610a58906130b5565b9150506107a1565b5060019998505050505050505050565b6000546001600160a01b03610100909104163314610ad05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6105146000612504565b600a546001600160a01b03163314610b3f5760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610503565b6001600160a01b038116610bbb5760405162461bcd60e51b815260206004820152602860248201527f41646d696e61626c653a206e65772061646d696e20697320746865207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152608401610503565b610bc481612574565b50565b6000805460ff1615610c0e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b8615801590610c1c57508685145b610c685760405162461bcd60e51b815260206004820152601d60248201527f696e76616c696420746f6b656e496473206f72206861736852617465730000006044820152606401610503565b6004544290610c819067ffffffffffffffff168561301c565b67ffffffffffffffff161015610cd95760405162461bcd60e51b815260206004820152600f60248201527f65787069726174696f6e2074696d6500000000000000000000000000000000006044820152606401610503565b600084118015610cf05750610cee87856130d0565b155b610d2c5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103837bbb2b960991b6044820152606401610503565b6000610d38888661303f565b90506008811115610d8b5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706f7765724f6e65000000000000000000000000000000006044820152606401610503565b60005b888110156110085760008a8a83818110610db857634e487b7160e01b600052603260045260246000fd5b9050602002013511610dfe5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b6000888883818110610e2057634e487b7160e01b600052603260045260246000fd5b9050602002013511610e745760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964206861736852617465000000000000000000000000000000006044820152606401610503565b600660008b8b84818110610e9857634e487b7160e01b600052603260045260246000fd5b602090810292909201358352508101919091526040016000205460ff1615610ef85760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b600b5433906001600160a01b0316636352211e8c8c85818110610f2b57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610f5091815260200190565b60206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190612cf0565b6001600160a01b031614610ff65760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206f776e6572000000000000000000000000000000000000006044820152606401610503565b80611000816130b5565b915050610d8e565b50600061104d8a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92508b91506121d99050565b905061105981856122ca565b336000908152600860205260409020546110c657600160096040518060400160405280600c81526020016b1858d8dbdd5b9d151bdd185b60a21b8152506040516110a39190612f32565b908152602001604051809103902060008282546110c09190613004565b90915550505b60005b898110156113c15760008b8b838181106110f357634e487b7160e01b600052603260045260246000fd5b600b54604051632142170760e11b815233600482015230602482015260209290920293909301356044820181905293506001600160a01b03909216916342842e0e9150606401600060405180830381600087803b15801561115357600080fd5b505af1158015611167573d6000803e3d6000fd5b5050505060006040518060e00160405280336001600160a01b031681526020018681526020018c8c868181106111ad57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001838152602001428152602001866003546111d39190613053565b6111dd9042613004565b81526000602091820181905284815260058083526040918290208451815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116908117825585850151600183018190558685015160028401819055606080890151600386018190556080808b01516004880181905560a0808d01519989018a905560c0808e01516006909a018a90558b519788529b87019590955298850191909152908301969096529481019390935292820152929350917fd8ee405d59cd4994d029e96987833911a3b72cdce28b0887dd0066d3047e74a3910160405180910390a2336000908152600860205260409020546113025760408051602080820183528482523360009081526008909152919091206112fc916001612b8c565b50611325565b336000908152600860209081526040822080546001810182559083529120018290555b60008281526006602052604090205460ff166113ac57600160096040518060400160405280600b81526020016a191c9859dbdb951bdd185b60aa1b8152506040516113709190612f32565b9081526020016040518091039020600082825461138d9190613004565b90915550506000828152600660205260409020805460ff191660011790555b505080806113b9906130b5565b9150506110c9565b5060019a9950505050505050505050565b6000546001600160a01b036101009091041633146114325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b600081116114825760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706572626c6f636b000000000000000000000000000000006044820152606401610503565b60018190556040518181527f97ed956ab9258a72e76abd3ab8a041502846140a6cb8ec6fafc258c624f97142906020015b60405180910390a150565b6000546001600160a01b0361010090910416331461151e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6105146125d3565b600a546001600160a01b0316331461158b5760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610503565b6105146000612574565b60006001600160a01b0382166115ed5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206163636f756e7420616464726573730000000000000000006044820152606401610503565b6001600160a01b03821660009081526008602090815260408083208054825181850281018501909352808352919290919083018282801561164d57602002820191906000526020600020905b815481526020019060010190808311611639575b50505050509050600080600090505b82518110156116c657600083828151811061168757634e487b7160e01b600052603260045260246000fd5b602002602001015190506007600082815260200190815260200160002054836116b09190613004565b92505080806116be906130b5565b91505061165c565b509392505050565b6000805460ff16156117155760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b816117555760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b60005b82811015611c2d57600084848381811061178257634e487b7160e01b600052603260045260246000fd5b905060200201359050600081116117cd5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b031633146118265760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff1661187a5760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b6002810154600b548254604051632142170760e11b81523060048201526001600160a01b039182166024820152604481018690529116906342842e0e90606401600060405180830381600087803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b5050505060008060006118fb86856123d1565b6040805180820182526008815267191b5c151bdd185b60c21b602082015290519396509194509250849160099161193191612f32565b9081526020016040518091039020600082825461194e9190613004565b909155505060008681526007602052604081208054859290611971908490613004565b925050819055508285600601600082825461198c9190613004565b9091555050600185018290556040805183815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a333600090815260086020526040812054905b81811015611b0c57336000908152600860205260409020805489919083908110611a2157634e487b7160e01b600052603260045260246000fd5b90600052602060002001541415611afa57336000908152600860205260409020611a4c600184613072565b81548110611a6a57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091015433835260089091526040909120805483908110611aa557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255338152600890915260409020805480611adf57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055611b0c565b80611b04816130b5565b9150506119e7565b5033600090815260086020526040902054611b7a57600160096040518060400160405280600c81526020016b1858d8dbdd5b9d151bdd185b60a21b815250604051611b579190612f32565b90815260200160405180910390206000828254611b749190613072565b90915550505b60008781526006602052604090205460ff1615611bff57600160096040518060400160405280600b81526020016a191c9859dbdb951bdd185b60aa1b815250604051611bc69190612f32565b90815260200160405180910390206000828254611be39190613072565b90915550506000878152600660205260409020805460ff191690555b6000866004018190555060008660050181905550505050505050508080611c25906130b5565b915050611758565b5060019392505050565b6000805460ff1615611c7e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b81611cbe5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b60005b82811015611c2d576000848483818110611ceb57634e487b7160e01b600052603260045260246000fd5b90506020020135905060008111611d365760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b03163314611d8f5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff16611de35760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b600281015460008080611df686856123d1565b9194509250905080611e4a5760405162461bcd60e51b815260206004820152601160248201527f74696d6520697320746f6f2073686f72740000000000000000000000000000006044820152606401610503565b82600960405180604001604052806008815260200167191b5c151bdd185b60c21b815250604051611e7b9190612f32565b90815260200160405180910390206000828254611e989190613004565b909155505060008681526007602052604081208054859290611ebb908490613004565b9091555050600354611ece908290613053565b856004016000828254611ee19190613004565b9250508190555082856006016000828254611efc9190613004565b9250508190555080856001016000828254611f179190613072565b9091555050604080516000815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a35050505050508080611f6b906130b5565b915050611cc1565b6000546001600160a01b03610100909104163314611fd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b600081116120235760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207065724379636c65000000000000000000000000000000006044820152606401610503565b60038190556040518181527fa9b49d9f24447ba24e127521471ad5e3f86cef9e162bfa3ed3a32724a83ab7a4906020016114b3565b6000546001600160a01b036101009091041633146120b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6001600160a01b0381166121345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610503565b610bc481612504565b60005460ff1661218f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610503565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060006121e68461264e565b9050806121fc8467ffffffffffffffff1661264e565b60405160200161220d929190612f4e565b604051602081830303815290604052905060005b868110156122bf578161225989898481811061224d57634e487b7160e01b600052603260045260246000fd5b9050602002013561264e565b61228988848151811061227c57634e487b7160e01b600052603260045260246000fd5b602002602001015161264e565b60405160200161229b93929190612f7d565b604051602081830303815290604052915080806122b7906130b5565b915050612221565b509695505050505050565b6000826040516020016122dd9190612f32565b604051602081830303815290604052805190602001209050600061234e826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050612362600a546001600160a01b031690565b6001600160a01b031661237582856127a5565b6001600160a01b0316146123cb5760405162461bcd60e51b815260206004820152601260248201527f7369676e206d657373616765206661756c7400000000000000000000000000006044820152606401610503565b50505050565b6000806000806123e0856127c1565b6000878152600560208181526040808420815160e08101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301529182015460a0820181905260069092015460c08201529293504211612457574261245d565b8160a001515b905060006003548360800151836124749190613072565b61247e919061303f565b90506000600354600160035486608001518661249a9190613072565b6124a49190613004565b6124ae9190613072565b6124b8919061303f565b905060018210156124d657506000965086955093506124fd92505050565b6124e08583613053565b8185602001516124f09190613072565b8397509750975050505050505b9250925092565b600080546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b60005460ff16156126195760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121bc3390565b60608161268f575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261057f565b8160005b81156126b957806126a3816130b5565b91506126b29050600a8361303f565b9150612693565b60008167ffffffffffffffff8111156126e257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561270c576020820181803683370190505b5090505b841561279d57612721600183613072565b915061272e600a866130d0565b612739906030613004565b60f81b81838151811061275c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612796600a8661303f565b9450612710565b949350505050565b60008060006127b485856127e4565b915091506116c681612854565b6000600254826001546127d49190613053565b6127de919061303f565b92915050565b60008082516041141561281b5760208301516040840151606085015160001a61280f87828585612a57565b9450945050505061284d565b825160401415612845576020830151604084015161283a868383612b44565b93509350505061284d565b506000905060025b9250929050565b600081600481111561287657634e487b7160e01b600052602160045260246000fd5b141561288157610bc4565b60018160048111156128a357634e487b7160e01b600052602160045260246000fd5b14156128f15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610503565b600281600481111561291357634e487b7160e01b600052602160045260246000fd5b14156129615760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610503565b600381600481111561298357634e487b7160e01b600052602160045260246000fd5b14156129dc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610503565b60048160048111156129fe57634e487b7160e01b600052602160045260246000fd5b1415610bc45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610503565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a8e5750600090506003612b3b565b8460ff16601b14158015612aa657508460ff16601c14155b15612ab75750600090506004612b3b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b0b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b3457600060019250925050612b3b565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01612b7e87828885612a57565b935093505050935093915050565b828054828255906000526020600020908101928215612bc7579160200282015b82811115612bc7578251825591602001919060010190612bac565b50612bd3929150612bd7565b5090565b5b80821115612bd35760008155600101612bd8565b60008083601f840112612bfd578081fd5b50813567ffffffffffffffff811115612c14578182fd5b602083019150836020808302850101111561284d57600080fd5b600082601f830112612c3e578081fd5b813567ffffffffffffffff80821115612c5957612c59613110565b604051601f8301601f19908116603f01168101908282118183101715612c8157612c81613110565b81604052838152866020858801011115612c99578485fd5b8360208701602083013792830160200193909352509392505050565b803567ffffffffffffffff8116811461057f57600080fd5b600060208284031215612cde578081fd5b8135612ce981613126565b9392505050565b600060208284031215612d01578081fd5b8151612ce981613126565b60008060008060808587031215612d21578283fd5b8435612d2c81613126565b93506020850135612d3c81613126565b925060408501359150606085013567ffffffffffffffff811115612d5e578182fd5b612d6a87828801612c2e565b91505092959194509250565b60008060208385031215612d88578182fd5b823567ffffffffffffffff811115612d9e578283fd5b612daa85828601612bec565b90969095509350505050565b600080600080600080600060a0888a031215612dd0578283fd5b873567ffffffffffffffff80821115612de7578485fd5b612df38b838c01612bec565b909950975060208a0135915080821115612e0b578485fd5b612e178b838c01612bec565b909750955060408a01359450859150612e3260608b01612cb5565b935060808a0135915080821115612e47578283fd5b50612e548a828b01612c2e565b91505092959891949750929550565b600080600080600060808688031215612e7a578081fd5b853567ffffffffffffffff80821115612e91578283fd5b612e9d89838a01612bec565b909750955060208801359450859150612eb860408901612cb5565b93506060880135915080821115612ecd578283fd5b50612eda88828901612c2e565b9150509295509295909350565b600060208284031215612ef8578081fd5b813567ffffffffffffffff811115612f0e578182fd5b61279d84828501612c2e565b600060208284031215612f2b578081fd5b5035919050565b60008251612f44818460208701613089565b9190910192915050565b60008351612f60818460208801613089565b835190830190612f74818360208801613089565b01949350505050565b60008451612f8f818460208901613089565b845190830190612fa3818360208901613089565b8451910190612fb6818360208801613089565b0195945050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ff857835183529284019291840191600101612fdc565b50909695505050505050565b60008219821115613017576130176130e4565b500190565b600067ffffffffffffffff808316818516808303821115612f7457612f746130e4565b60008261304e5761304e6130fa565b500490565b600081600019048311821515161561306d5761306d6130e4565b500290565b600082821015613084576130846130e4565b500390565b60005b838110156130a457818101518382015260200161308c565b838111156123cb5750506000910152565b60006000198214156130c9576130c96130e4565b5060010190565b6000826130df576130df6130fa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bc457600080fdfea2646970667358221220f33f5bf6146fde44c552284f74295aaf1eec21bc6c72830843257d25039e30b364736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806383e84a8f116100ee578063b29411cd11610097578063e8f08dd211610071578063e8f08dd214610467578063f2fde38b1461047a578063f7d1ff1a1461048d578063f851a44014610496576101ae565b8063b29411cd14610442578063d5a33fe014610455578063dbd8e4761461045e576101ae565b80638da5cb5b116100c85780638da5cb5b14610405578063a72d8baf1461041c578063b10dcc931461042f576101ae565b806383e84a8f146103d25780638456cb59146103f55780638bad0c0a146103fd576101ae565b806341ad20771161015b578063715018a611610135578063715018a61461039157806375829def14610399578063806fb4aa146103ac57806381952c24146103bf576101ae565b806341ad20771461034357806356354e81146103635780635c975abb14610386576101ae565b806321be7cbf1161018c57806321be7cbf146102e05780632a1b9164146103195780633f4ba83a14610339576101ae565b80630e42323b146101b3578063150b7a02146101e35780631738ad861461024b575b600080fd5b600b546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021a6101f1366004612d0c565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101da565b6102a1610259366004612f1a565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006909501546001600160a01b0390941695929491939092919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101da565b61030b6102ee366004612ee7565b805160208183018101805160098252928201919093012091525481565b6040519081526020016101da565b61030b610327366004612f1a565b60076020526000908152604090205481565b6103416104a7565b005b610356610351366004612ccd565b610516565b6040516101da9190612fc0565b610376610371366004612e63565b610584565b60405190151581526020016101da565b60005460ff16610376565b610341610a70565b6103416103a7366004612ccd565b610ada565b6103766103ba366004612db6565b610bc7565b6103416103cd366004612f1a565b6113d2565b6103766103e0366004612f1a565b60066020526000908152604090205460ff1681565b6103416114be565b610341611526565b6101c660005461010090046001600160a01b031690565b61030b61042a366004612ccd565b611595565b61037661043d366004612d76565b6116ce565b610376610450366004612d76565b611c37565b61030b60035481565b61030b60015481565b610341610475366004612f1a565b611f73565b610341610488366004612ccd565b612058565b61030b60025481565b600a546001600160a01b03166101c6565b6000546001600160a01b0361010090910416331461050c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61051461213d565b565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083526060949383018282801561057557602002820191906000526020600020905b815481526020019060010190808311610561575b5093955050505050505b919050565b6000805460ff16156105cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b60045442906105e49067ffffffffffffffff168561301c565b67ffffffffffffffff16101561063c5760405162461bcd60e51b815260206004820152600f60248201527f65787069726174696f6e2074696d6500000000000000000000000000000000006044820152606401610503565b8461067c5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b600084118015610693575061069185856130d0565b155b6106cf5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103837bbb2b960991b6044820152606401610503565b60006106db868661303f565b9050600881111561072e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706f7765724f6e65000000000000000000000000000000006044820152606401610503565b60008667ffffffffffffffff81111561075757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610780578160200160208202803683370190505b50905060006107928989848a8a6121d9565b905061079e81866122ca565b60005b88811015610a605760008a8a838181106107cb57634e487b7160e01b600052603260045260246000fd5b905060200201359050600081116108165760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b0316331461086f5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff166108c35760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b80600501544210156109175760405162461bcd60e51b815260206004820152601760248201527f7374616b6520776173206e6f7420636f6d706c657465640000000000000000006044820152606401610503565b60028101546000808061092a86856123d1565b6040805180820182526008815267191b5c151bdd185b60c21b602082015290519396509194509250849160099161096091612f32565b9081526020016040518091039020600082825461097d9190613004565b9091555050600086815260076020526040812080548592906109a0908490613004565b90915550504260048601556006850180548491906000906109c2908490613004565b909155505060018501829055604080516000815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a389600354610a1a9190613053565b610a249042613004565b856005018190555089856001016000828254610a409190613004565b925050819055505050505050508080610a58906130b5565b9150506107a1565b5060019998505050505050505050565b6000546001600160a01b03610100909104163314610ad05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6105146000612504565b600a546001600160a01b03163314610b3f5760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610503565b6001600160a01b038116610bbb5760405162461bcd60e51b815260206004820152602860248201527f41646d696e61626c653a206e65772061646d696e20697320746865207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152608401610503565b610bc481612574565b50565b6000805460ff1615610c0e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b8615801590610c1c57508685145b610c685760405162461bcd60e51b815260206004820152601d60248201527f696e76616c696420746f6b656e496473206f72206861736852617465730000006044820152606401610503565b6004544290610c819067ffffffffffffffff168561301c565b67ffffffffffffffff161015610cd95760405162461bcd60e51b815260206004820152600f60248201527f65787069726174696f6e2074696d6500000000000000000000000000000000006044820152606401610503565b600084118015610cf05750610cee87856130d0565b155b610d2c5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103837bbb2b960991b6044820152606401610503565b6000610d38888661303f565b90506008811115610d8b5760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706f7765724f6e65000000000000000000000000000000006044820152606401610503565b60005b888110156110085760008a8a83818110610db857634e487b7160e01b600052603260045260246000fd5b9050602002013511610dfe5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b6000888883818110610e2057634e487b7160e01b600052603260045260246000fd5b9050602002013511610e745760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964206861736852617465000000000000000000000000000000006044820152606401610503565b600660008b8b84818110610e9857634e487b7160e01b600052603260045260246000fd5b602090810292909201358352508101919091526040016000205460ff1615610ef85760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b600b5433906001600160a01b0316636352211e8c8c85818110610f2b57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610f5091815260200190565b60206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190612cf0565b6001600160a01b031614610ff65760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206f776e6572000000000000000000000000000000000000006044820152606401610503565b80611000816130b5565b915050610d8e565b50600061104d8a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92508b91506121d99050565b905061105981856122ca565b336000908152600860205260409020546110c657600160096040518060400160405280600c81526020016b1858d8dbdd5b9d151bdd185b60a21b8152506040516110a39190612f32565b908152602001604051809103902060008282546110c09190613004565b90915550505b60005b898110156113c15760008b8b838181106110f357634e487b7160e01b600052603260045260246000fd5b600b54604051632142170760e11b815233600482015230602482015260209290920293909301356044820181905293506001600160a01b03909216916342842e0e9150606401600060405180830381600087803b15801561115357600080fd5b505af1158015611167573d6000803e3d6000fd5b5050505060006040518060e00160405280336001600160a01b031681526020018681526020018c8c868181106111ad57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001838152602001428152602001866003546111d39190613053565b6111dd9042613004565b81526000602091820181905284815260058083526040918290208451815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116908117825585850151600183018190558685015160028401819055606080890151600386018190556080808b01516004880181905560a0808d01519989018a905560c0808e01516006909a018a90558b519788529b87019590955298850191909152908301969096529481019390935292820152929350917fd8ee405d59cd4994d029e96987833911a3b72cdce28b0887dd0066d3047e74a3910160405180910390a2336000908152600860205260409020546113025760408051602080820183528482523360009081526008909152919091206112fc916001612b8c565b50611325565b336000908152600860209081526040822080546001810182559083529120018290555b60008281526006602052604090205460ff166113ac57600160096040518060400160405280600b81526020016a191c9859dbdb951bdd185b60aa1b8152506040516113709190612f32565b9081526020016040518091039020600082825461138d9190613004565b90915550506000828152600660205260409020805460ff191660011790555b505080806113b9906130b5565b9150506110c9565b5060019a9950505050505050505050565b6000546001600160a01b036101009091041633146114325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b600081116114825760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420706572626c6f636b000000000000000000000000000000006044820152606401610503565b60018190556040518181527f97ed956ab9258a72e76abd3ab8a041502846140a6cb8ec6fafc258c624f97142906020015b60405180910390a150565b6000546001600160a01b0361010090910416331461151e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6105146125d3565b600a546001600160a01b0316331461158b5760405162461bcd60e51b815260206004820152602260248201527f41646d696e61626c653a2063616c6c6572206973206e6f74207468652061646d60448201526134b760f11b6064820152608401610503565b6105146000612574565b60006001600160a01b0382166115ed5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206163636f756e7420616464726573730000000000000000006044820152606401610503565b6001600160a01b03821660009081526008602090815260408083208054825181850281018501909352808352919290919083018282801561164d57602002820191906000526020600020905b815481526020019060010190808311611639575b50505050509050600080600090505b82518110156116c657600083828151811061168757634e487b7160e01b600052603260045260246000fd5b602002602001015190506007600082815260200190815260200160002054836116b09190613004565b92505080806116be906130b5565b91505061165c565b509392505050565b6000805460ff16156117155760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b816117555760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b60005b82811015611c2d57600084848381811061178257634e487b7160e01b600052603260045260246000fd5b905060200201359050600081116117cd5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b031633146118265760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff1661187a5760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b6002810154600b548254604051632142170760e11b81523060048201526001600160a01b039182166024820152604481018690529116906342842e0e90606401600060405180830381600087803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b5050505060008060006118fb86856123d1565b6040805180820182526008815267191b5c151bdd185b60c21b602082015290519396509194509250849160099161193191612f32565b9081526020016040518091039020600082825461194e9190613004565b909155505060008681526007602052604081208054859290611971908490613004565b925050819055508285600601600082825461198c9190613004565b9091555050600185018290556040805183815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a333600090815260086020526040812054905b81811015611b0c57336000908152600860205260409020805489919083908110611a2157634e487b7160e01b600052603260045260246000fd5b90600052602060002001541415611afa57336000908152600860205260409020611a4c600184613072565b81548110611a6a57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091015433835260089091526040909120805483908110611aa557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255338152600890915260409020805480611adf57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055611b0c565b80611b04816130b5565b9150506119e7565b5033600090815260086020526040902054611b7a57600160096040518060400160405280600c81526020016b1858d8dbdd5b9d151bdd185b60a21b815250604051611b579190612f32565b90815260200160405180910390206000828254611b749190613072565b90915550505b60008781526006602052604090205460ff1615611bff57600160096040518060400160405280600b81526020016a191c9859dbdb951bdd185b60aa1b815250604051611bc69190612f32565b90815260200160405180910390206000828254611be39190613072565b90915550506000878152600660205260409020805460ff191690555b6000866004018190555060008660050181905550505050505050508080611c25906130b5565b915050611758565b5060019392505050565b6000805460ff1615611c7e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b81611cbe5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420746f6b656e49647360801b6044820152606401610503565b60005b82811015611c2d576000848483818110611ceb57634e487b7160e01b600052603260045260246000fd5b90506020020135905060008111611d365760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610503565b600081815260056020526040902080546001600160a01b03163314611d8f5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610503565b60008281526006602052604090205460ff16611de35760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964207374616b6520737461746560681b6044820152606401610503565b600281015460008080611df686856123d1565b9194509250905080611e4a5760405162461bcd60e51b815260206004820152601160248201527f74696d6520697320746f6f2073686f72740000000000000000000000000000006044820152606401610503565b82600960405180604001604052806008815260200167191b5c151bdd185b60c21b815250604051611e7b9190612f32565b90815260200160405180910390206000828254611e989190613004565b909155505060008681526007602052604081208054859290611ebb908490613004565b9091555050600354611ece908290613053565b856004016000828254611ee19190613004565b9250508190555082856006016000828254611efc9190613004565b9250508190555080856001016000828254611f179190613072565b9091555050604080516000815260208101859052879133917ff8eb4f7e5a655679d91cf7ba6b71dd3c6e680c2706647c79766f925c74ffed2a910160405180910390a35050505050508080611f6b906130b5565b915050611cc1565b6000546001600160a01b03610100909104163314611fd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b600081116120235760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207065724379636c65000000000000000000000000000000006044820152606401610503565b60038190556040518181527fa9b49d9f24447ba24e127521471ad5e3f86cef9e162bfa3ed3a32724a83ab7a4906020016114b3565b6000546001600160a01b036101009091041633146120b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610503565b6001600160a01b0381166121345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610503565b610bc481612504565b60005460ff1661218f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610503565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060006121e68461264e565b9050806121fc8467ffffffffffffffff1661264e565b60405160200161220d929190612f4e565b604051602081830303815290604052905060005b868110156122bf578161225989898481811061224d57634e487b7160e01b600052603260045260246000fd5b9050602002013561264e565b61228988848151811061227c57634e487b7160e01b600052603260045260246000fd5b602002602001015161264e565b60405160200161229b93929190612f7d565b604051602081830303815290604052915080806122b7906130b5565b915050612221565b509695505050505050565b6000826040516020016122dd9190612f32565b604051602081830303815290604052805190602001209050600061234e826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050612362600a546001600160a01b031690565b6001600160a01b031661237582856127a5565b6001600160a01b0316146123cb5760405162461bcd60e51b815260206004820152601260248201527f7369676e206d657373616765206661756c7400000000000000000000000000006044820152606401610503565b50505050565b6000806000806123e0856127c1565b6000878152600560208181526040808420815160e08101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301529182015460a0820181905260069092015460c08201529293504211612457574261245d565b8160a001515b905060006003548360800151836124749190613072565b61247e919061303f565b90506000600354600160035486608001518661249a9190613072565b6124a49190613004565b6124ae9190613072565b6124b8919061303f565b905060018210156124d657506000965086955093506124fd92505050565b6124e08583613053565b8185602001516124f09190613072565b8397509750975050505050505b9250925092565b600080546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a35050565b60005460ff16156126195760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121bc3390565b60608161268f575060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015261057f565b8160005b81156126b957806126a3816130b5565b91506126b29050600a8361303f565b9150612693565b60008167ffffffffffffffff8111156126e257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561270c576020820181803683370190505b5090505b841561279d57612721600183613072565b915061272e600a866130d0565b612739906030613004565b60f81b81838151811061275c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612796600a8661303f565b9450612710565b949350505050565b60008060006127b485856127e4565b915091506116c681612854565b6000600254826001546127d49190613053565b6127de919061303f565b92915050565b60008082516041141561281b5760208301516040840151606085015160001a61280f87828585612a57565b9450945050505061284d565b825160401415612845576020830151604084015161283a868383612b44565b93509350505061284d565b506000905060025b9250929050565b600081600481111561287657634e487b7160e01b600052602160045260246000fd5b141561288157610bc4565b60018160048111156128a357634e487b7160e01b600052602160045260246000fd5b14156128f15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610503565b600281600481111561291357634e487b7160e01b600052602160045260246000fd5b14156129615760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610503565b600381600481111561298357634e487b7160e01b600052602160045260246000fd5b14156129dc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610503565b60048160048111156129fe57634e487b7160e01b600052602160045260246000fd5b1415610bc45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610503565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a8e5750600090506003612b3b565b8460ff16601b14158015612aa657508460ff16601c14155b15612ab75750600090506004612b3b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b0b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b3457600060019250925050612b3b565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01612b7e87828885612a57565b935093505050935093915050565b828054828255906000526020600020908101928215612bc7579160200282015b82811115612bc7578251825591602001919060010190612bac565b50612bd3929150612bd7565b5090565b5b80821115612bd35760008155600101612bd8565b60008083601f840112612bfd578081fd5b50813567ffffffffffffffff811115612c14578182fd5b602083019150836020808302850101111561284d57600080fd5b600082601f830112612c3e578081fd5b813567ffffffffffffffff80821115612c5957612c59613110565b604051601f8301601f19908116603f01168101908282118183101715612c8157612c81613110565b81604052838152866020858801011115612c99578485fd5b8360208701602083013792830160200193909352509392505050565b803567ffffffffffffffff8116811461057f57600080fd5b600060208284031215612cde578081fd5b8135612ce981613126565b9392505050565b600060208284031215612d01578081fd5b8151612ce981613126565b60008060008060808587031215612d21578283fd5b8435612d2c81613126565b93506020850135612d3c81613126565b925060408501359150606085013567ffffffffffffffff811115612d5e578182fd5b612d6a87828801612c2e565b91505092959194509250565b60008060208385031215612d88578182fd5b823567ffffffffffffffff811115612d9e578283fd5b612daa85828601612bec565b90969095509350505050565b600080600080600080600060a0888a031215612dd0578283fd5b873567ffffffffffffffff80821115612de7578485fd5b612df38b838c01612bec565b909950975060208a0135915080821115612e0b578485fd5b612e178b838c01612bec565b909750955060408a01359450859150612e3260608b01612cb5565b935060808a0135915080821115612e47578283fd5b50612e548a828b01612c2e565b91505092959891949750929550565b600080600080600060808688031215612e7a578081fd5b853567ffffffffffffffff80821115612e91578283fd5b612e9d89838a01612bec565b909750955060208801359450859150612eb860408901612cb5565b93506060880135915080821115612ecd578283fd5b50612eda88828901612c2e565b9150509295509295909350565b600060208284031215612ef8578081fd5b813567ffffffffffffffff811115612f0e578182fd5b61279d84828501612c2e565b600060208284031215612f2b578081fd5b5035919050565b60008251612f44818460208701613089565b9190910192915050565b60008351612f60818460208801613089565b835190830190612f74818360208801613089565b01949350505050565b60008451612f8f818460208901613089565b845190830190612fa3818360208901613089565b8451910190612fb6818360208801613089565b0195945050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ff857835183529284019291840191600101612fdc565b50909695505050505050565b60008219821115613017576130176130e4565b500190565b600067ffffffffffffffff808316818516808303821115612f7457612f746130e4565b60008261304e5761304e6130fa565b500490565b600081600019048311821515161561306d5761306d6130e4565b500290565b600082821015613084576130846130e4565b500390565b60005b838110156130a457818101518382015260200161308c565b838111156123cb5750506000910152565b60006000198214156130c9576130c96130e4565b5060010190565b6000826130df576130df6130fa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bc457600080fdfea2646970667358221220f33f5bf6146fde44c552284f74295aaf1eec21bc6c72830843257d25039e30b364736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "dragon mainland token ERC721 staking V1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 121,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8417,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "perBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8420,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "baseHashRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8423,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "perCycle",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8426,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "_expirationTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 8431,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "stakingDatas",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(StakingData)8414_storage)"
      },
      {
        "astId": 8435,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "stakedState",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8439,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "stakedDatas",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8444,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "stakingTokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8448,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "stakeTotals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 4368,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "_admin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8531,
        "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
        "label": "dragonToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IDragonToken)8361"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDragonToken)8361": {
        "encoding": "inplace",
        "label": "contract IDragonToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(StakingData)8414_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonStakingV1Base.StakingData)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingData)8414_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakingData)8414_storage": {
        "encoding": "inplace",
        "label": "struct DragonStakingV1Base.StakingData",
        "members": [
          {
            "astId": 8401,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8403,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "power",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8405,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "hashRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8407,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8409,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8411,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8413,
            "contract": "contracts/DragonStakingV1.sol:DragonStakingV1",
            "label": "amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}